<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blackie&#39;s Failed Notes</title>
  <subtitle>Show me. Don&#39;t tell me.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blackie1019.github.io/"/>
  <updated>2017-05-11T13:49:54.000Z</updated>
  <id>https://blackie1019.github.io/</id>
  
  <author>
    <name>Blackie Tsai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Google Compute Engine Default Password for Windows Instances</title>
    <link href="https://blackie1019.github.io/2017/05/11/Google-Compute-Engine-Default-Password-for-Windows-Instances/"/>
    <id>https://blackie1019.github.io/2017/05/11/Google-Compute-Engine-Default-Password-for-Windows-Instances/</id>
    <published>2017-05-11T13:16:27.000Z</published>
    <updated>2017-05-11T13:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>解決在 Google Compute Engine 啟用 Windows Server VM 需要 RDP 登入時的預設密碼問題</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>當我們在 Google Compute Engine 透過 <em>cloud launcher</em> 快速啟用 ASP.NET + Windows Server + SQL Server 的 VM Instance ：</p>
<p><img src="gcp_aspnet_launcher.png" alt="gcp_aspnet_launcher"></p>
<p>過程中服務會一一啟動，在全部完成前無法連線至遠端或是開啟該主機的 80 port 網頁：</p>
<p><img src="gcp_windows_doing.png" alt="gcp_windows_doing"></p>
<p>當成功完成所有啟用，會有下面的畫面：</p>
<p><img src="gcp_windows_create_pw.png" alt="gcp_windows_create_pw"></p>
<p>而我們可以在 Chrome 安裝<a href="https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm?utm_source=chrome-ntp-launcher" target="_blank" rel="external">Chrome RDP for Google Cloud Platform</a> 或是其他的 RDP 套件都可以幫我們做登入．</p>
<p>這邊我們就可以點選 RDP 登入遠端主機：</p>
<p><img src="gcp_rdp.png" alt="gcp_rdp"></p>
<p>但當我們點下去的那一剎那應該會有點慌掉：</p>
<p><img src="gcp_windows_rdp_login.png" alt="gcp_windows_rdp_login"></p>
<p>而回到剛剛的完成介面卻只看到 reset password 而非 create password :</p>
<p><img src="gcp_windows_first_login_fake.png" alt="gcp_windows_first_login_fake"></p>
<p>還在回想 Windows Server 有預設什麼密碼的時候，決定先去官方看了一次文件才發現第一次登入是可以安心按下重設密碼的：</p>
<p><img src="gcp_windows_first_login.png" alt="gcp_windows_first_login"></p>
<p>後我們成功的登入主機，這邊確定一下 ip 是一樣的：</p>
<p><img src="gcp_windows_rdp.png" alt="gcp_windows_rdp"></p>
<p>提醒一下，密碼更換會導致該帳號的安全性相關設定重設，所以如果不是真的忘記密碼要稍微注意一下．</p>
<p><img src="gcp_windows_rdp_warning.png" alt="gcp_windows_rdp_warning"></p>
<p>結論 ： Windows Server 是沒有預設密碼的，請第一次登入的朋友請安心<strong>重設密碼</strong></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://cloud.google.com/compute/docs/instances/windows/creating-passwords-for-windows-instances" target="_blank" rel="external">Creating Passwords for Windows Instances</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解決在 Google Compute Engine 啟用 Windows Server VM 需要 RDP 登入時的預設密碼問題&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Visual Studio Code Integrate with macOS Finder</title>
    <link href="https://blackie1019.github.io/2017/05/08/Visual-Studio-Code-Integrate-with-macOS-Finder/"/>
    <id>https://blackie1019.github.io/2017/05/08/Visual-Studio-Code-Integrate-with-macOS-Finder/</id>
    <published>2017-05-08T02:10:24.000Z</published>
    <updated>2017-05-11T11:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何將VSCode 整合進入 Finder，提供快速開啟 <em>VSＣode</em> 的功能 </p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>使用 macOS 的開發者一定都有一樣的問題：可以讓 VSCode 跟 Finder 更方便地打開資料夾或檔案嗎？今天就要分享這樣的一個小技巧．</p>
<p>這邊我們使用網路上熱心人士提供的解決辦法：</p>
<p>先至<img src="https://github.com/cnstntn-kndrtv/open-in-buttons-for-finder-toolbar" alt="&#39;open in&#39; buttons for MacOS X Finder toolbar">下載整個專案．解壓所後可以看到下面的資料夾：</p>
<p><img src="folder.png" alt="folder"></p>
<p>接著進入 app 資料夾然後按住 <strong>⌘cmd</strong> 並將 <em>Open in Code</em> 拖曳進 Finder 的 Toolbar 即可：</p>
<p><img src="instruction.png" alt="instruction"></p>
<p>而以後要在 Finder 內開啟 VSCode 只要針對要開啟的檔案或資料夾選擇後按下該按鈕即可</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EC6Xhh1bEWc?ecver=2" frameborder="0" allowfullscreen></iframe> 

<p>是不是簡單很多啊，趕快下載來使用吧！記得不要吝嗇到 Github 給作者回應感謝摟～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何將VSCode 整合進入 Finder，提供快速開啟 &lt;em&gt;VSＣode&lt;/em&gt; 的功能 &lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
      <category term="macOS" scheme="https://blackie1019.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code Snippet and Tab Completion</title>
    <link href="https://blackie1019.github.io/2017/05/07/Visual-Studio-Code-Snippet-and-Tab-Completion/"/>
    <id>https://blackie1019.github.io/2017/05/07/Visual-Studio-Code-Snippet-and-Tab-Completion/</id>
    <published>2017-05-06T16:15:15.000Z</published>
    <updated>2017-05-11T11:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何增添 Visual Studio Code 的 Snappit 功能與開啟 Tab Completion 加速完成文件編輯</p>
<a id="more"></a>
<p>現代的編輯器大多有支援 snippet 功能，當然 VSCode 也不意外得具備這樣的功能，這次介紹如何透過 VSCode 的 Tab Completion 來加強 snippet 的使用</p>
<h2 id="Insert-Existed-Snippet"><a href="#Insert-Existed-Snippet" class="headerlink" title="Insert Existed Snippet"></a>Insert Existed Snippet</h2><p>要在當前檔案插入已經建立的 Snippet ，可於 <em>Command Palette</em> 輸入 <strong>insert snippet</strong> ，VSCode 就會針對你的副檔名(file extension) 開啟對應的 Snippet 清單，下方示範 .md 檔案的 snippet 該如何插入:</p>
<p><img src="Insert.gif" alt="Insert"></p>
<h2 id="Create-New-Snippet"><a href="#Create-New-Snippet" class="headerlink" title="Create New Snippet"></a>Create New Snippet</h2><p>眼尖的朋友會發現我們上面的示範所插入的是一個 <strong>md-iframe</strong> 的 snippet，這是一個客製的 snippet，專門負責在 <a href="https://hexo.io/zh-tw/" target="_blank" rel="external">hexo</a> 的 <em>.md</em> 內嵌入其他網頁，例如：youtube 影片．</p>
<p>而要新增一個 snippet 我們一樣要透過 <em>Command Palette</em> 輸入 <strong>Preferences: Open User Snippets</strong> ，接者選擇你的副檔名格式後就會開啟該語言的設定，此範例選則 <em>markdown</em> ：</p>
<p>markdown.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">/*</div><div class="line">	// Place your snippets for Markdown here. Each snippet is defined under a snippet name and has a prefix, body and </div><div class="line">	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</div><div class="line">	// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </div><div class="line">	// same ids are connected.</div><div class="line">	// Example:</div><div class="line">	"Print to console": &#123;</div><div class="line">		"prefix": "log",</div><div class="line">		"body": [</div><div class="line">			"console.log('$1');",</div><div class="line">			"$2"</div><div class="line">		],</div><div class="line">		"description": "Log output to console"</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">*/</div><div class="line">	"snippet-md-iframe": &#123;</div><div class="line">		"prefix": "md-iframe",</div><div class="line">		"body": "&lt;iframe width='560' height='315' src='$0' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;",</div><div class="line">		"description": "md-iframe"</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這邊要稍微解說一下裡面有一個 <strong>$0</strong> 的用意是讓我們再插入 snippet 之後，當前的滑鼠指標就會移到該區塊，我們就可以接著輸入網址，不用滑鼠再點選一次位置．</p>
<h2 id="Enable-editor-tabCompletion"><a href="#Enable-editor-tabCompletion" class="headerlink" title="Enable editor.tabCompletion"></a>Enable editor.tabCompletion</h2><p>這邊我們可以搭配開啟 editor.tabCompletion 這個功能，可以幫我們透過 tab 的方式直接插入對應的 snippet．開啟該設定的方式如下：</p>
<p><img src="setup.png" alt="setup"></p>
<p>而當我們開啟該設定後就可以透過 tab 的方式幫我們快速插入：</p>
<p><img src="vscode_tab_demo.gif" alt="vscode_tab_demo"></p>
<h2 id="補充-Snippet-Generator"><a href="#補充-Snippet-Generator" class="headerlink" title="[補充] Snippet Generator"></a>[補充] Snippet Generator</h2><p>如果你除了VSCode 之外還有用其他編輯器，如 <a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a> 或 <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 也想建立一樣的 <em>snippet</em> 指令，可以參考<a href="https://Snippet.now.sh/" target="_blank" rel="external">Snippet Generator</a> 一次幫你產生三個不同版本的 Snippet ，我們只要複製貼上就好．</p>
<p><img src="snippet-generator.png" alt="snippet-generator"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/editor/userdefinedSnippet" target="_blank" rel="external">Creating your own Snippet</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何增添 Visual Studio Code 的 Snappit 功能與開啟 Tab Completion 加速完成文件編輯&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core Develop with VSCode and Workspace Recommended Extension Configuration to Build up Project/Team Editor</title>
    <link href="https://blackie1019.github.io/2017/05/06/ASP-NET-Core-Develop-with-VSCode-and-Workspace-Recommended-Extension-Configuration-to-Build-up-Development-Editor/"/>
    <id>https://blackie1019.github.io/2017/05/06/ASP-NET-Core-Develop-with-VSCode-and-Workspace-Recommended-Extension-Configuration-to-Build-up-Development-Editor/</id>
    <published>2017-05-05T16:28:25.000Z</published>
    <updated>2017-05-11T11:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用 VSCode 中 Workspace Recommended Extension Configuration 這項功能來幫我們迅速的建立 VSCode 的開發環境．</p>
<a id="more"></a>
<p>今天看到 <a href="https://www.youtube.com/watch?v=zzon9KS90Dk&amp;lc=z125zvf5swr2itnc123silawimnzwhwht04" target="_blank" rel="external">本週的Editor 編輯者#9</a>的影片，介紹了 VSCode 中 <strong>Workspace Recommended Extension Configuration</strong> 這項功能，而本篇將接續分享如何透過這項功能來幫我們迅速的建立 VSCode 的開發環境．</p>
<p>建議對 <em>VSCode</em> 有興趣的朋友一定要去看一下影片！</p>
<h2 id="VSCode-Extensions-and-Recommended-Extension-feature"><a href="#VSCode-Extensions-and-Recommended-Extension-feature" class="headerlink" title="VSCode Extensions and Recommended Extension feature"></a>VSCode Extensions and Recommended Extension feature</h2><p>VSCode 的 Extension 功能與 <a href="https://marketplace.visualstudio.com/" target="_blank" rel="external">Extension Marketplace</a> 補足了 VSCode 上許多的好用的功能，也同時帶給我們安裝上極佳的方便性．</p>
<p><img src="vs_marketplace.png" alt="vs_marketplace"></p>
<p>在編輯器的 Activity Bar 最下方的 Extension 功能中其實還保留幾個快速的導覽功能，點擊 Extension 後可在視窗的右上方的 <strong>…</strong> 圖示透過滑鼠右鍵點擊後看到更多的選項：</p>
<p><img src="vscode_extension_features.png" alt="vscode_extension_features"></p>
<p>其中 Show Popular Extension 等同我們用下載量做排序．而排序總共有三種：</p>
<ul>
<li><p>依下載量排序</p>
<p>@sort:installs</p>
</li>
<li><p>依評分排序</p>
<p>@sort:rating</p>
</li>
<li><p>依名稱排序</p>
<p>@sort:name</p>
</li>
</ul>
<p>如果我們有一個關鍵字做查詢，也可以透過排序功能將我們的查詢結果從新整理，如：關鍵字 git,依評分排序：</p>
<p>  git @sort:rating</p>
<p><img src="vscode_extension_sorting.png" alt="vscode_extension_sorting"></p>
<p>而另外一個選項 Recommended Extension 則是可以直接看當前推薦的套件有哪些．</p>
<h2 id="Workspace-Recommended-Extension-Configuration"><a href="#Workspace-Recommended-Extension-Configuration" class="headerlink" title="Workspace Recommended Extension Configuration"></a>Workspace Recommended Extension Configuration</h2><p>Recommended Extension 也可以分別運作在不同的專案，依據專案設定不同的 Workspace Recommended Extension ，如此一來當該團隊有新成員加入的時候，就可以第一時間把編輯器的安裝說明快速帶著新人上手．</p>
<p>我們可以透過在 <em>Command Palette</em> 中輸入 Recommended Extension 作過濾找到 <strong>Extensions : Configure Recommended Extensions(Workspace)</strong> ：</p>
<p><img src="vscode_extensions_config.png" alt="vscode_extensions_config"></p>
<p>接著將套件的識別名稱貼入及可，請參考下方取得名稱方式：</p>
<p><img src="vscode_recommended_setup.png" alt="vscode_recommended_setup"></p>
<p>當完成加入後，點擊 Extension 右上方的 <strong>…</strong> 圖示選擇 <em>Show Workspace Recommended Extensions</em> :</p>
<p><img src="vscode_show_workspace_recommended_extensions.png" alt="vscode_show_workspace_recommended_extensions"></p>
<p>即可看到我們剛剛給當前專案加入的推薦套件：</p>
<p><img src="vscode_show_workspace_recommended_extensions_2.png" alt="vscode_show_workspace_recommended_extensions"></p>
<p>再次提醒，新增專案推薦套件會在當前的專案底下的新增一個資料夾與一個 <em>extensions.json</em> 檔案，以自身在中間規模圖隊(100人上下)服務的經驗，請務必要將該檔案加入版控(Vision Control)才會方便大家互相支援．</p>
<h2 id="Build-up-ASP-NET-Core-Development-Editor"><a href="#Build-up-ASP-NET-Core-Development-Editor" class="headerlink" title="Build up ASP.NET Core Development Editor"></a>Build up ASP.NET Core Development Editor</h2><p>而這邊就來分享小編在 ASP.NET Core 開發的環境所需要 Extensions ，有興趣的請直接拿去用摟．</p>
<p>載點：<a href="https://github.com/blackie1019/dot-net-core-vscode-extensions" target="_blank" rel="external">dot-net-core-vscode-extensions</a></p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp" target="_blank" rel="external">C#</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions" target="_blank" rel="external">C# Extensions</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=josephwoodward.vscodeilviewer" target="_blank" rel="external">C# IL Viewer</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jmrog.vscode-nuget-package-manager" target="_blank" rel="external">NuGet Package Manager</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=spywhere.guides" target="_blank" rel="external">Guides</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer" target="_blank" rel="external">Output Colorizer</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="external">Settings Sync</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="external">Git Lens</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore" target="_blank" rel="external">gitignore</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=samverschueren.yo" target="_blank" rel="external">yo</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-docker" target="_blank" rel="external">Docker</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker" target="_blank" rel="external">Code Spellchecker</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=emilast.logfilehighlighter" target="_blank" rel="external">Log File Highlighter</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify" target="_blank" rel="external">Beautify</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="external">markdownlint</a></li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/editor/extension-gallery" target="_blank" rel="external">VS Code Extension Marketplace</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用 VSCode 中 Workspace Recommended Extension Configuration 這項功能來幫我們迅速的建立 VSCode 的開發環境．&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code Customize your Own Edit Theme</title>
    <link href="https://blackie1019.github.io/2017/05/05/Visual-Studio-Code-Customize-your-Activity-Bar-Color/"/>
    <id>https://blackie1019.github.io/2017/05/05/Visual-Studio-Code-Customize-your-Activity-Bar-Color/</id>
    <published>2017-05-05T02:43:25.000Z</published>
    <updated>2017-05-11T11:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何修改 VSCode 整個 Editor 配色．</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>在 April 2017 Microsoft 發佈了新版的 VScode (Version 1.12.1 ) 增添了 <em>Workbench theming</em> 的功能，可以讓我們客製化整個編輯器的配色．</p>
<p><img src="vscode_latest_version.png" alt="vscode_latest_version"></p>
<p>有美感且有興趣完全打造自己風格的編輯器請參考官方說明：<a href="https://code.visualstudio.com/docs/getstarted/theme-color-reference" target="_blank" rel="external">Theme Color Reference</a>.</p>
<p>如果你沒有美感也關係，也可以直接套用預設的幾個 Theme :</p>
<p><img src="vscode_plate.png" alt="vscode_plate"></p>
<p><img src="vscode_default_theme.png" alt="vscode_default_theme"></p>
<p>或是下載別人的 Theme Extension:</p>
<p><img src="vscode_theme_download.png" alt="vscode_theme_download"></p>
<p>這邊帶大家看幾個修改就好：</p>
<h2 id="How-to-Customize-Your-Activity-Bar-Color"><a href="#How-to-Customize-Your-Activity-Bar-Color" class="headerlink" title="How to Customize Your Activity Bar Color"></a>How to Customize Your Activity Bar Color</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"workbench.colorCustomizations": &#123;</div><div class="line">    "activityBar.background": "#cd9731"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改前：</p>
<p><img src="customize_activity_Bar.png" alt="customize_activity_Bar"></p>
<p>修改後：</p>
<p><img src="customize_activity_Bar_after.png" alt="customize_activity_Bar_after"></p>
<h2 id="How-to-Customize-Editor-Active-Tab-Color"><a href="#How-to-Customize-Editor-Active-Tab-Color" class="headerlink" title="How to Customize Editor Active Tab Color"></a>How to Customize Editor Active Tab Color</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"workbench.colorCustomizations": &#123;</div><div class="line">  "tab.activeBackground": "#cd9731"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改前：</p>
<p><img src="customize_tab.png" alt="customize_tab"></p>
<p>修改後：</p>
<p><img src="customize_tab_after.png" alt="customize_tab_after"></p>
<h2 id="How-to-Switch-to-different-Theme"><a href="#How-to-Switch-to-different-Theme" class="headerlink" title="How to Switch to different Theme"></a>How to Switch to different Theme</h2><p>如何切換不同 Theme 請參考下方影片：</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/0L47rFf8JhU?ecver=2" frameborder="0" allowfullscreen></iframe>

<h2 id="VSCode-Theme-Generator"><a href="#VSCode-Theme-Generator" class="headerlink" title="VSCode Theme Generator"></a>VSCode Theme Generator</h2><p>如果你已經有想要呈現的色彩風格的色碼，也可以使用官方的<a href="https://github.com/Tyriar/vscode-theme-generator" target="_blank" rel="external">vscode-theme-generator</a></p>
<p>使用與安裝很簡單，只需先下載官方的原始碼：</p>
<pre><code>git clone https://github.com/Tyriar/vscode-theme-generator-quick-start
cd vscode-theme-generator-quick-start
npm install
</code></pre><p>然後透過下方程式碼修改 <em>index.ts</em> ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; generateTheme, IColorSet &#125; <span class="keyword">from</span> <span class="string">'vscode-theme-generator'</span>;</div><div class="line"><span class="keyword">const</span> colorSet: IColorSet = &#123;</div><div class="line">  <span class="attr">base</span>: &#123;</div><div class="line">    <span class="attr">background</span>: <span class="string">'#12171F'</span>,</div><div class="line">    <span class="attr">foreground</span>: <span class="string">'#EFEFEF'</span>,</div><div class="line">    <span class="attr">color1</span>: <span class="string">'#399EF4'</span>,</div><div class="line">    <span class="attr">color2</span>: <span class="string">'#DA6771'</span>,</div><div class="line">    <span class="attr">color3</span>: <span class="string">'#4EB071'</span>,</div><div class="line">    <span class="attr">color4</span>: <span class="string">'#FFF099'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">generateTheme(<span class="string">'Blackie Theme'</span>, colorSet, path.join(__dirname, <span class="string">'theme.json'</span>));</div></pre></td></tr></table></figure>
<p>接著我們透過下方指令即可快速產生 <em>theme.json</em> 檔案</p>
<pre><code>npm start
</code></pre><p><img src="theme_generator_result.png" alt="theme_generator_result"></p>
<p>套用的 Theme 結果如下：</p>
<p><img src="theme_example.png" alt="theme_example"></p>
<h2 id="補充-Color-Palette"><a href="#補充-Color-Palette" class="headerlink" title="[補充] Color Palette"></a>[補充] Color Palette</h2><p>如果不太會選擇顏色也沒關係，可以參考一些調色盤工具，如 <a href="https://color.adobe.com/" target="_blank" rel="external">Adobe Color CC</a></p>
<p>這類型的工具已經幫我們配好色差應該是多少，我們只要給予基準色與選擇想呈現的色差風格即可：</p>
<p><img src="adobe_cc.png" alt="adobe_cc"></p>
<p>對於這類型調色盤的工具選擇可以參考：</p>
<p><a href="http://htmlcolorcodes.com/resources/best-color-palette-generators/" target="_blank" rel="external">Best Color Palette Generators</a></p>
<h2 id="補充-vscode-icons"><a href="#補充-vscode-icons" class="headerlink" title="[補充] vscode-icons"></a>[補充] vscode-icons</h2><p>眼尖的朋友有詢問影片中左邊的檔案與資料夾為什麼也有 icon 圖示 與資料夾分類的顏色與圖示呢？</p>
<p><img src="icons.png" alt="icons"></p>
<p>其實這是另外一個套件 <a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a> 所帶來的效果</p>
<p><img src="preview.gif" alt="preview"></p>
<p>有興趣的朋友可以參考先前的<a href="https://blackie1019.github.io/2017/04/04/Visual-Studio-Code-Icons-Extension/">Visual Studio Code Icons Extension
</a>安裝與設定</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何修改 VSCode 整個 Editor 配色．&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Prepack - A tool for making JavaScript code run faster</title>
    <link href="https://blackie1019.github.io/2017/05/04/Prepack-A-tool-for-making-JavaScript-code-run-faster/"/>
    <id>https://blackie1019.github.io/2017/05/04/Prepack-A-tool-for-making-JavaScript-code-run-faster/</id>
    <published>2017-05-04T03:44:54.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹 Prepack 如何透過預先處理與編譯的方式幫助 js 加速。</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<h2 id="Prepack-Introduction"><a href="#Prepack-Introduction" class="headerlink" title="Prepack Introduction"></a>Prepack Introduction</h2><p><a href="https://github.com/facebook/prepack" target="_blank" rel="external">Prepack</a> 主要是可以幫我們處理一下可在編譯階段就預先進行計算的 js 函式或初始賦予值等動作，好處是可以幫我們省下很多處理與運算的時間，在透過全域變數(global variable)的方式來取用這些值來大幅度的增加效能。</p>
<p>例如原始碼這樣的程式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt;= <span class="number">1</span> ? x : fib(x - <span class="number">1</span>) + fib(x - <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> x = <span class="built_in">Date</span>.now();</div><div class="line">  <span class="keyword">if</span> (x * <span class="number">2</span> &gt; <span class="number">42</span>) x = fib(<span class="number">10</span>);</div><div class="line">  global.result = x;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>經過 Prepack 編譯處理後變成簡單的三元運算子(:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _$<span class="number">0</span> = <span class="built_in">Date</span>.now();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> _$<span class="number">0</span> !== <span class="string">"number"</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Prepack model invariant violation: "</span> + _$<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  result = _$<span class="number">0</span> * <span class="number">2</span> &gt; <span class="number">42</span> ? <span class="number">55</span> : _$<span class="number">0</span>;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>這邊在看一個例子: </p>
<p>編譯前:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> valueA = <span class="number">123</span>,</div><div class="line">      valueB = <span class="number">234</span>,</div><div class="line">      result = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">50</span>; j++) &#123;</div><div class="line">          result = i * j;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  global.result = result * valueA % valueB + result * valueB % valueA;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>編譯後:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = <span class="number">108</span>;</div></pre></td></tr></table></figure></p>
<p>這邊可以看到所有的迴圈計算都直接編譯並執行了，而產生的最後結果108則是被我們存到全域變數result裡面。</p>
<p>以目前本人使用的結果看來， Prepack 的功能還是很有限，對於 module.exports 與 參數展開的功能沒有支援，另外連 const 也會被忽略。</p>
<p>如果真的有比較偏向靜態函式,啟動參數或是前端資源檔(resource file)需求的朋友倒是可以參考，但程式碼也要將這部分抽離得很乾淨不然應該會發生錯誤而產生不出來檔案。</p>
<p>有興趣的朋友可以來這邊玩玩看，<a href="https://prepack.io/repl.html" target="_blank" rel="external">Try it</a></p>
<h2 id="How-to-Use"><a href="#How-to-Use" class="headerlink" title="How to Use"></a>How to Use</h2><p>安裝 Prepack CLI</p>
<pre><code>npm install -g prepack
</code></pre><p>安裝完成後即可透過 <em>prepack</em> 指令編譯我們的 js 檔案:</p>
<pre><code>prepack test.js
</code></pre><p>如果要設定產出的檔案名稱可以透過 –out 參數</p>
<p>  prepack test.js –out test-processed.js</p>
<p>我們也可以將其套件載入後交給 Webpack 或是Gulp 等套件做處理，如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Prepack = <span class="built_in">require</span>(<span class="string">"prepack"</span>);</div><div class="line"><span class="keyword">import</span> &#123; prepack, prepackFileSync &#125; <span class="keyword">from</span> <span class="string">'prepack'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Prepack <span class="keyword">from</span> <span class="string">'prepack'</span>;</div></pre></td></tr></table></figure>
<p>這邊可以考慮跟 Webpack 做整合的朋友可以參考<a href="https://github.com/gajus/prepack-webpack-plugin" target="_blank" rel="external">prepack-webpack-plugin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹 Prepack 如何透過預先處理與編譯的方式幫助 js 加速。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="Front-End Optimized" scheme="https://blackie1019.github.io/tags/Front-End-Optimized/"/>
    
      <category term="Prepack" scheme="https://blackie1019.github.io/tags/Prepack/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code adding Color Highlighting to log files</title>
    <link href="https://blackie1019.github.io/2017/05/03/Visual-Studio-Code-color-highlighting-to-log-files/"/>
    <id>https://blackie1019.github.io/2017/05/03/Visual-Studio-Code-color-highlighting-to-log-files/</id>
    <published>2017-05-02T16:36:26.000Z</published>
    <updated>2017-05-11T11:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何透過 Log File Highlighter 增強 VSCode 呈現 *.log 檔案</p>
<a id="more"></a>
<p><img src="cover.png" alt="conver"></p>
<p>先前有篇介紹了 <a href="http://blackie1019.github.io/2017/05/02/ASP-NET-Core-play-with-Log4Net/">log4net 與 ASP.NET Core 的整合</a>，但無論今天是用哪一個套件來產生日誌檔案，我們在閱讀時往往都希望能 <strong>一目瞭然</strong>．</p>
<p>但很可惜的，如果使用 VSCode 打開 *.log 檔案，雖然有部分 Highlight 的支援，閱讀起來還是很吃力．所以今天要為大家介紹 VSCode 上面閱讀日誌檔必備的 <a href="https://marketplace.visualstudio.com/items?itemName=emilast.LogFileHighlighter" target="_blank" rel="external">Log File Highlighter</a>．</p>
<p>在介紹功能前我們先來看一個安裝套件前，VSCode 預設呈現的樣子：</p>
<p><img src="before.png" alt="before.png"></p>
<p>這邊我們可以看到雖然有 Highlight ，但後面內容中帶到 Warning 或是 Error 的字樣就呈現錯誤的顏色來提示．</p>
<p>而當我們用 <em>Log File Highlighter</em> 這個套件呈現就正確了：</p>
<p><img src="after.png" alt="after.png"></p>
<p>這邊除了支援 log4net 的 Log Level ，其他針對資料格式的 Highlight 還包括：</p>
<ul>
<li><p>Dates and times in ISO format, such as</p>
<p>  2015-12-09<br>  2015-12-09 09:29<br>  2015-12-09 09:29:02,258</p>
</li>
<li><p>Dates and times in some culture specific formats</p>
<p>  12/09/2016<br>  12.09.2016<br>  12-09-2016<br>  12-09-2015 09:29<br>  12-09-2015 09:29:02,258</p>
</li>
<li><p>Log level, such as</p>
<p>  DEBUG<br>  INFO, INFORMATION<br>  WARN, WARNING<br>  ERROR, FAIL, FAILURE</p>
</li>
<li><p>Numeric constants, such as</p>
<p>  1<br>  234</p>
</li>
<li><p>Standard .Net constants</p>
<p>  null<br>  true<br>  false</p>
</li>
<li><p>String constants, enclosed in single or double quotes. Examples:</p>
<p>  “lorem ipsum”<br>  ‘lorem ipsum’</p>
</li>
<li><p>GUIDs. Example:</p>
<p>  859A4209-A82D-4CA1-8468-C2606A3501EE</p>
</li>
<li><p>.Net exception type names, i.e. word ending with Exception, such as</p>
<p>  ArgumentNullException<br>  HttpException</p>
</li>
<li><p>.Net exception stack traces, i.e. lines starting with whitespace characters, followed by at, for example:</p>
<p>  System.NullReferenceException: Object reference not set to an instance of an object.</p>
<pre><code>at MyClass.DoSomethingElse(string foo)
at MyClass.DoSomething()
</code></pre></li>
<li><p>Url:s</p>
<p>  <a href="http://www.meadow.se/wordpress/" target="_blank" rel="external">http://www.meadow.se/wordpress/</a></p>
</li>
<li><p>Namespaces (sequences of alpanumeric and dot characters). Useful to identity namespace qualified type names, for example.</p>
<p>  MyApp.MyNameSpace.MyClass</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何透過 Log File Highlighter 增強 VSCode 呈現 *.log 檔案&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core play with log4net</title>
    <link href="https://blackie1019.github.io/2017/05/02/ASP-NET-Core-play-with-Log4Net/"/>
    <id>https://blackie1019.github.io/2017/05/02/ASP-NET-Core-play-with-Log4Net/</id>
    <published>2017-05-02T13:17:14.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何在 ASP.NET Core 使用 log4net 幫我們強化 Log 相關功能</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>ASP.NET Core 本身有提供 Logging 的延伸套件 <em>Microsoft.Extensions.Logging</em> 協助我們透過 (dependency injection (DI)](dependency injection) 的方式在程式中加入 ILoggerFactory 的實體(instance)．如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app,</span></span></div><div class="line">    IHostingEnvironment env,</div><div class="line">    ILoggerFactory loggerFactory)</div><div class="line">&#123;</div><div class="line">    loggerFactory</div><div class="line">        .AddConsole()</div><div class="line">        .AddDebug();</div></pre></td></tr></table></figure>
<p>而今天我們則是要介紹另外一套在 .NET 開發中必備的 Logging 套件 - log4net，來協助我們建立 Logging 機制．</p>
<p>接下來就讓我們先簡單介紹 log4net 是什麼．</p>
<h2 id="log4net-Introduction"><a href="#log4net-Introduction" class="headerlink" title="log4net Introduction"></a>log4net Introduction</h2><p>log4net 是 Apache Logging Services 專案的其中一部分，是由 Apache log4j 移轉制 .NET Runtime 上所開源的日誌紀錄套件，可協助我們快速的開發 Logging 相關功能．</p>
<p><img src="apace_logging_services.png" alt="apace_logging_services"></p>
<p>幾乎所有的大型應用都需要有一套強大的日誌系統來診斷和修復功能上的問題，而log4net就是小編這幾年(2012 - 2017) 在 .NET 開發上所採用的Logging 套件，目前運用在全部經手過的各大小專案上，在繁重的應用程式中(每秒接受並處理五萬筆以上的 transaction 請求與每秒10萬筆的 API 請求) 都能有不錯的效能處理與豐富的資料格式與分檔寫入的效果．</p>
<h3 id="The-structure-of-log4net"><a href="#The-structure-of-log4net" class="headerlink" title="The structure of log4net"></a>The structure of log4net</h3><p>log4net 有五種主要的組件:</p>
<ul>
<li><p>ILog</p>
<p>  是我們日誌記錄實體的介面(interface)，這邊我們要透過 LogManager 內的函式與傳入的類型來建立實體．</p>
</li>
<li><p>LogManager</p>
<p>  可以幫我們建立 Repository 與 ILog 的實體</p>
</li>
<li><p>Appender</p>
<p>  是一個幫我們處理寫入日誌記錄的物件(object)</p>
</li>
<li><p>Filter</p>
<p>  是一個幫我們依據設定的條件限制寫入日誌記錄的條件式(condition)</p>
</li>
<li><p>Layout</p>
<p>  日誌記錄的呈現風格(display)</p>
</li>
<li><p>Repository</p>
<p>  是一個為了儲放 log4net 設定與 LogManager 內實體的集中的儲存槽(store)</p>
</li>
</ul>
<p>執行上的順序為：</p>
<p><a href="log4net_objects.gif">log4net_objects</a></p>
<h3 id="Log-Level"><a href="#Log-Level" class="headerlink" title="Log Level"></a>Log Level</h3><p>我們可以給予不同的 Log Level 來方便我們解讀與觀看，層級如下：</p>
<p><img src="log4net_tag.jpg" alt="log4net_tag.jpg"></p>
<p>當然 log 不是銀彈，千萬不要因為偷懶就在一開始打了一堆根本不會用到的 log ，因為<strong>每個 log 的處理與寫入檔案都是成本</strong>，好的 log 帶你上天堂(快速的顯示問題或是我們要找的資料)，壞的 log 讓你住套房(很難找到我們的資料或是導致應用程式效能不佳)</p>
<p>而當我們有了足夠的 log 後，我們就可以考慮採用 ELK 的架構幫我們建立起強大的分析與監控機制，有興趣的可以參考好友的文章：<a href="https://blog.johnwu.cc/article/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-centos-red-hat.html" target="_blank" rel="external">ELK 教學 - 從無到有安裝 ELK (CentOS/Red Hat)</a>．而筆者之後也會分享 <em>ELK</em> 與 <em>ASP.NET Core</em> 這塊的整合與做法．</p>
<h2 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h2><p><a href="https://github.com/blackie1019/DEMO-AspNETCore-Log4Net" target="_blank" rel="external">Demo Source Code</a></p>
<p>這邊我們可以透過新增一個 ASP.NET Core MVC 專案</p>
<pre><code>mkdir app; dotnet new mvc
</code></pre><p>專案建立後可以透過先前介紹的nuget套件幫我們加入 log4net 至當前專案：</p>
<p><img src="nuget_add.png" alt="nuget_add"></p>
<p>加入完成後可以看到專案多了一個相依的 framework :</p>
<p><img src="nuget_add_project.png" alt="nuget_add_project"></p>
<p>接著使用還原所有相依套件:</p>
<pre><code>dotnet restore
</code></pre><p>接著我們加入 <em>log4net.config</em> 至專案內</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- This section contains the log4net configuration settings --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">log4net</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ConsoleAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.ConsoleAppender"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger - %message%newline"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FileAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.FileAppender"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">file</span> <span class="attr">value</span>=<span class="string">"log-file.log"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appendToFile</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger [%property&#123;NDC&#125;] - %message%newline"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"RollingLogFileAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">file</span> <span class="attr">value</span>=<span class="string">"logfile/"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appendToFile</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rollingStyle</span> <span class="attr">value</span>=<span class="string">"Composite"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">staticLogFileName</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">datePattern</span> <span class="attr">value</span>=<span class="string">"yyyyMMdd'.log'"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">maxSizeRollBackups</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">maximumFileSize</span> <span class="attr">value</span>=<span class="string">"1MB"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger [%property&#123;NDC&#125;] - %message%newline"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Setup the root category, add the appenders and set the default level --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ALL"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ConsoleAppender"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FileAppender"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingLogFileAppender"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接著我們在程式當中加入下面日誌紀錄：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.IO;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</div><div class="line"></div><div class="line"><span class="keyword">using</span> log4net;</div><div class="line"><span class="keyword">using</span> log4net.Repository;</div><div class="line"><span class="keyword">using</span> log4net.Config;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">DEMO_AspNETCore_Log4Net</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ILoggerRepository repository &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">readonly</span> ILog log;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</div><div class="line">                .SetBasePath(env.ContentRootPath)</div><div class="line">                .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>)</div><div class="line">                .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json"</span>, optional: <span class="literal">true</span>)</div><div class="line">                .AddEnvironmentVariables();</div><div class="line">            Configuration = builder.Build();</div><div class="line">            repository = LogManager.CreateRepository(<span class="string">"NETCoreRepository"</span>);</div><div class="line">            XmlConfigurator.Configure(repository, <span class="keyword">new</span> FileInfo(<span class="string">"log4net.config"</span>));</div><div class="line"></div><div class="line">            log = LogManager.GetLogger(repository.Name,<span class="keyword">typeof</span>(Startup));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> IConfigurationRoot Configuration &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Add framework services.</span></div><div class="line">            log.Info(<span class="string">"Doing ConfigureServices..."</span>);</div><div class="line">            services.AddMvc();</div><div class="line">            log.Info(<span class="string">"Done ConfigureServices..."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// loggerFactory.AddConsole(Configuration.GetSection("Logging"));</span></div><div class="line">            <span class="comment">// loggerFactory.AddDebug();</span></div><div class="line"></div><div class="line">            log.Info(<span class="string">"Doing Configure..."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (env.IsDevelopment())</div><div class="line">            &#123;</div><div class="line">                app.UseDeveloperExceptionPage();</div><div class="line">                app.UseBrowserLink();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                app.UseExceptionHandler(<span class="string">"/Home/Error"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            app.UseStaticFiles();</div><div class="line"></div><div class="line">            app.UseMvc(routes =&gt;</div><div class="line">            &#123;</div><div class="line">                routes.MapRoute(</div><div class="line">                    name: <span class="string">"default"</span>,</div><div class="line">                    template: <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            log.Info(<span class="string">"Done Configure..."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著啟用網站:</p>
<pre><code>dotnet run
</code></pre><p>我們即可看到專案下多了一份log-file.log，內容如下：</p>
<p><img src="log_file.png" alt="log_file"></p>
<p>詳細的config設定可以參考<a href="http://logging.apache.org/log4net/release/config-examples.html" target="_blank" rel="external">Apache log4net™ Config Examples</a></p>
<h2 id="Alternative-for-Logging"><a href="#Alternative-for-Logging" class="headerlink" title="Alternative for Logging"></a>Alternative for Logging</h2><p>除了 ASP.NET Core 自身的 Logging 機制與 本篇介紹的 log4net 外，還有其他可以用在 ASP.NET Core 的 Logging 套件：</p>
<ul>
<li><a href="https://github.com/elmahio/Elmah.Io.Extensions.Logging" target="_blank" rel="external">elmah.io</a></li>
<li><a href="https://github.com/imobile3/Loggr.Extensions.Logging" target="_blank" rel="external">Loggr</a></li>
<li><a href="https://github.com/NLog/NLog.Extensions.Logging" target="_blank" rel="external">NLog</a></li>
<li><a href="https://github.com/serilog/serilog-framework-logging" target="_blank" rel="external">Serilog</a></li>
</ul>
<p>這邊會在之後再介紹各相關套件與優劣/適合的使用時機．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://logging.apache.org/log4net/" target="_blank" rel="external">What is Apache log4net</a></li>
<li><a href="http://logging.apache.org/log4net/release/manual/configuration.html" target="_blank" rel="external">Apache log4net™ Manual - Configuration</a></li>
<li><a href="http://logging.apache.org/log4net/release/config-examples.html" target="_blank" rel="external">Apache log4net™ Config Examples</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging" target="_blank" rel="external">Introduction to Logging in ASP.NET Core</a></li>
<li><a href="https://www.codeproject.com/Articles/19207/log-net-XmlConfigurator-Simplified" target="_blank" rel="external">log4net XmlConfigurator Simplified</a></li>
<li><a href="http://www.programering.com/a/MjN1EjNwATI.html" target="_blank" rel="external">Log4Net full range tracking program</a></li>
<li><a href="https://jonhilton.net/2016/09/14/troubleshoot-your-asp-net-core-web-app-using-logging/" target="_blank" rel="external">Troubleshoot your ASP.NET Core web app using logging</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何在 ASP.NET Core 使用 log4net 幫我們強化 Log 相關功能&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="Log" scheme="https://blackie1019.github.io/tags/Log/"/>
    
      <category term="log4net" scheme="https://blackie1019.github.io/tags/log4net/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Testing with AWS Device Farm - Built-in Fuzz Test</title>
    <link href="https://blackie1019.github.io/2017/05/01/Mobile-Testing-with-AWS-Device-Farm-Built-in-Fuzz-Test/"/>
    <id>https://blackie1019.github.io/2017/05/01/Mobile-Testing-with-AWS-Device-Farm-Built-in-Fuzz-Test/</id>
    <published>2017-05-01T11:42:49.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹 AWS Device Farm 的 Built-in Fuzz Test，並透過它完成手機上的 Monkey Testing</p>
<a id="more"></a>
<p><img src="cover.jpg" alt="cover"></p>
<p>這次要介紹 AWS Device Farm 的 Built-in Fuzz Test 如何可以幫我們快速地進行手機應用程式測試。但在開始前我們先提提 <em>Monkey Testing</em> 與 <em>Fuzz testing</em></p>
<h2 id="Monkey-Testing-and-Fuzz-testing"><a href="#Monkey-Testing-and-Fuzz-testing" class="headerlink" title="Monkey Testing and Fuzz testing"></a>Monkey Testing and Fuzz testing</h2><p>Monkey Testing = no test case + no test plan + no test requirement (即沒有測試案例、沒有測試計畫、也不知道測試透過需求)</p>
<p><img src="monkey testing.jpg" alt="monkey testing"></p>
<p>往往我們的測試都是以正常的商務流程與系統功能(Happy Path)為主去做測試，而異常測試不可能有所有的例外流程去包裹，<em>因為人能想出來的意外絕對不是意外</em>。</p>
<p>而 <em>Monkey Testing</em> 的概念，就是當下完全沒有想法的亂點整個應用程式，看會跑出什麼結果出來的沒有特定目標與範圍的測試，這類測試通常都是亂數隨機組成的，有可能開開按一下音量大小，然後回到桌面再打開隨便點點或是輸入一些奇怪的數值，製造出一切有可能的結果。</p>
<p>而網路上你打Monkey Testing 應該找到的資料不多，因為在軟體測試方面這樣的測試我們稱為 <strong>Fuzzing</strong> 或 <strong>Fuzz testing</strong>。 但有不少人認為兩者還是不一樣的，Fuzz testing　重視的是資料的變異(輸入合理範圍外的資料格式或數值)，Monkey Testing 則是行為的變異(不按標準或是沒有方向的操作行為)。</p>
<p><img src="fuzz_testing.jpg" alt="fuzz_testing"></p>
<h2 id="Built-in-Fuzz-Test"><a href="#Built-in-Fuzz-Test" class="headerlink" title="Built-in Fuzz Test"></a>Built-in Fuzz Test</h2><p>AWS Device Farm 提供 Built-in Fuzz Test 可以讓我們透過實體的行動裝置來進行該 Monkey Testing 。 我們僅需上傳待測試的 APP 或是開啟網頁，透過幾個簡單的設定即可馬上進行這類型的測試。</p>
<h2 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h2><p>這邊讓我們來實際操作一次，一開始需要先建立一個新的 Device Farm 專案(Project):</p>
<p><img src="aws_device_farm_new_project.png" alt="aws_device_farm_new_project"></p>
<p>而後開始選擇要做 Automation Testing 還是 Remote Access:</p>
<p><img src="aws_device_farm_new_project_success.png" alt="aws_device_farm_new_project_success"></p>
<p>選擇 Automation Testing 後即可上傳你的測試類型，這邊選擇 <em>iOS</em> ：</p>
<p><img src="aws_device_farm_built_in_fuzz_create.png" alt="aws_device_farm_built_in_fuzz_create"></p>
<p>然後上傳你封裝好的apk檔案，這邊要注意一下記得要給AdHoc的版本：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_upload.png" alt="aws_device_farm_built_in_fuzz_create_upload"></p>
<p>上傳完成且透過驗證即可以看到旁邊步驟都亮了綠燈，接著我們就可以來指定要測試的類型，這邊選擇 <em>Built-in:Fuzz</em> 作為我們的類型：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_type.png" alt="aws_device_farm_built_in_fuzz_create_type"></p>
<p>我們可以開始選擇要用哪個指定的 <em>Device Pool</em> 或是再次挑選該次要跑的實機：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_select_devices.png" alt="aws_device_farm_built_in_fuzz_create_select_devices"></p>
<p><img src="aws_device_farm_built_in_fuzz_create_select_devices_detail.png" alt="aws_device_farm_built_in_fuzz_create_select_devices_detail"></p>
<p>如果我們的測試有些環境設定或是相依的App也可以從這邊傳入：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_device_state.png" alt="aws_device_farm_built_in_fuzz_create_device_state"></p>
<p>最後在執行前會讓你選擇你這要運行的時間(最少五分鐘)，這邊選擇的時間要乘上你先前設定的機器書量才會是計價的 <strong>Device Minutes</strong>，所以要特別注意：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_review_run.png" alt="aws_device_farm_built_in_fuzz_create_review_run"></p>
<p>這邊直接看實際使用 Built-in Fuzz Test 測試一個 Hybrid App (React Native) 的過程:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GmY3LmHP6cY" frameborder="0" allowfullscreen></iframe>

<p>當運行完成就會提供我們該次測試的測試影片(如上)，並包含下面每台實體機的各行為測試紀錄與報告：</p>
<p><img src="aws_device_farm_built_in_fuzz_report_devices.png" alt="aws_device_farm_built_in_fuzz_report_devices"></p>
<p><img src="aws_device_farm_built_in_fuzz_report_files.png" alt="aws_device_farm_built_in_fuzz_report_files"></p>
<p><img src="aws_device_farm_built_in_fuzz_report_screen.png" alt="aws_device_farm_built_in_fuzz_report_screen"></p>
<p>這邊要注意的一下，我們上傳到AWS的 Mobile APP 會在 <em>30天</em> 後自動移除，而所有的測試報告與紀錄會保留 <em>15 個月</em>。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.zhihu.com/question/34939418/answer/107543574" target="_blank" rel="external">猴子测试是什么？</a></li>
<li><a href="https://qualitytaiwan.wordpress.com/2013/09/25/%E6%90%9E%E6%80%AA%E6%B8%AC%E8%A9%A6-monkey-test/" target="_blank" rel="external">Quality Taiwan 中文品質筆記 - 搞怪測試 (Monkey Test)</a></li>
<li><a href="http://stackoverflow.com/questions/10241957/difference-between-fuzz-testing-and-monkey-test" target="_blank" rel="external">Difference between “fuzz testing” and “monkey test”</a></li>
<li><a href="https://www.tutorialspoint.com/software_testing_dictionary/monkey_testing.htm" target="_blank" rel="external">tutorialspoint - Monkey Testing</a></li>
<li><a href="https://www.tutorialspoint.com/software_testing_dictionary/fuzz_testing.htm" target="_blank" rel="external">tutorialspoint - Fuzz Testing</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹 AWS Device Farm 的 Built-in Fuzz Test，並透過它完成手機上的 Monkey Testing&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="https://blackie1019.github.io/categories/Testing/"/>
    
    
      <category term="Automation Testing" scheme="https://blackie1019.github.io/tags/Automation-Testing/"/>
    
      <category term="AWS" scheme="https://blackie1019.github.io/tags/AWS/"/>
    
      <category term="AWS Device Farm" scheme="https://blackie1019.github.io/tags/AWS-Device-Farm/"/>
    
      <category term="Behavior Testing" scheme="https://blackie1019.github.io/tags/Behavior-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Testing with AWS Device Farm - Introduction and Remote Access</title>
    <link href="https://blackie1019.github.io/2017/04/30/Mobile-Testing-with-AWS-Device-Farm-Introduction-and-Remote-Access/"/>
    <id>https://blackie1019.github.io/2017/04/30/Mobile-Testing-with-AWS-Device-Farm-Introduction-and-Remote-Access/</id>
    <published>2017-04-30T05:42:49.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹 AWS Device Farm 如何在雲端中透過實際的行動裝置進行測試，以改善您的 iOS、Android 以及 Web 應用程式的品質。 並實際使用 Remote Access 功能測試你的應用程式在實機的運行狀況。</p>
<a id="more"></a>
<p>行動裝置上的應用程式測試，往往碰到最大的困擾就是手機的種類太多、太雜、甚至作業系統與相關應用程式還有版本問題，而以往在進行測試後，最常遇到客戶的反應就是：某某牌沒辦法安裝、另外一個牌沒辦法登入、還有不同作業系統一開就閃退等等奇怪的問題。但這些在QA測試過程中並不一定會發現，因為QA手上有的機種是有限的，有些甚至還在 <strong>人工</strong>測試的階段，根本不要提機器不夠了，這些主要測試的工人也不夠…。但別提公司根本沒有提供足夠的行動裝置給開發人員或是測試人員可以安心地交付產品，因為這些裝置是買不完的。但今天做手機應用程式真的要這麼徒法煉鋼嗎？</p>
<p>今天就來看看 <em>AWS Device Farm</em> 如何協助我們脫離這樣困境吧。</p>
<p><img src="cover.png" alt="cover"></p>
<p>AWS Device Farm 是AWS 在2015年推出的服務，提供 Mobile App 與 Web 於實體的行動載具上的進行遠端測試的服務，讓我們可以一次在無數個真實的裝置上測試 Android、iOS 或 Web 應用程式並與其做真實的互動，或問題重現。</p>
<p>而最令人高興的是，AWS 目前提供每個帳戶每個月 <strong>1,000</strong> <em>device minute</em> 的 Free Trail Service 來試用，這邊試用的範圍是跟正式的功能一模一樣的。</p>
<p>而本篇文章將會介紹AWS Device Farm 並實際操作 <em>Remote Access</em> 來達到遠端實體機器測試作者用 ReactNative 所開發的 <em>iOS App</em></p>
<h2 id="AWS-Device-Farm-Overview"><a href="#AWS-Device-Farm-Overview" class="headerlink" title="AWS Device Farm Overview"></a>AWS Device Farm Overview</h2><p>AWS Device Farm 透過在實際裝置運行時所側錄的完整測試影片、Log、資源與效能紀錄、以及裝置實際運行的截圖我們能在開發完後即時的對市面上所有既有的裝置進行實機測試，而不用先花錢買大量的行動裝置來達到實機測試的效果。</p>
<p>在目前的裝置清單上已經具備超過300種(型號與作業系統版本)，而它也有提供客製化需求，為你量身購買你想要的機型、硬體規格與搭載的作業系統。</p>
<p>透過該服務我們就不用一直重複購買機器、APP 測試環境安裝與OS設定升降版的動作，我們可以選擇上傳APP後測試 Native App或是 Hybrid App ，也可以直接透過手機內的瀏覽器測試 Web 應用程式。開好帳號就可以透過瀏覽器直接遠端進實體機器中操作觀看結果。或是，我們可以撰寫可重複執行的自動測試將其測試案例在上百台以上的實體機器中執行，如此我們便可以快速且方便的地拿到測試結果。</p>
<p><img src="aws_device_farm_hld_overview.jpg" alt="aws_device_farm_hld_overview"></p>
<p>而 Mobile App　的 CI與CD 也是可以跟 Web 或是 Desktop　應用程式一樣更聰明的自動化被建立與整合的：</p>
<p><img src="cicd_testing.png" alt="cicd_testing"></p>
<p>接下來介紹一些相關名詞。</p>
<h3 id="Device-Pools"><a href="#Device-Pools" class="headerlink" title="Device Pools"></a>Device Pools</h3><p>Device Pools 是將多個實體機器建立測試群組的概念，透過 Device Pools 我們可以建立特定的機器群組並指派要執行的測試行為，這方便我們在職行測試時不用每次都一個一個點選加入，可以將常用的機器建立 Device Pools ，並直接下拉選即可。</p>
<p><img src="device-pools.png" alt="device-pools"></p>
<p>這邊是新增一組 Device Pools 的畫面:</p>
<p><img src="project_device_pool.png" alt="project_device_pool"></p>
<p>這邊要注意由於 Device Pools 是在 Test Project 之下，所以是無法跨 Project 使用的。 但同一個 Test Project 不同的 Run&amp;Sessions 則可以共用已建立的 Device Pools。</p>
<p>而系統這邊也幫我們建立了一組預設的Device Pools 叫做 <em>Top Devices</em> 則在新增測試案例時會從下拉看到:</p>
<p><img src="device_pools_default.png" alt="device_pools_default"></p>
<h2 id="AWS-Device-Farm-Remote-Access"><a href="#AWS-Device-Farm-Remote-Access" class="headerlink" title="AWS Device Farm - Remote Access"></a>AWS Device Farm - Remote Access</h2><p><img src="aws_device_farm_remote_access_hld.png" alt="aws_device_farm_remote_access_hld"></p>
<p>使用上我們需要至 <a href="https://console.aws.amazon.com/console/" target="_blank" rel="external">AWS Management Console</a> 前往 Device Farm 服務，這邊要稍微注意一下 Device Farm 目前是沒有分 Region 的服務 :</p>
<p><img src="aws_management_console.png" alt="aws_management_console"></p>
<p>而近來服務會呈現各專案最後的測試狀態:</p>
<p><img src="aws_device_farm_overview.png" alt="aws_device_farm_overview"></p>
<p>目前的有支援的瀏覽器可操作 AWS Device Farm 的有:</p>
<ul>
<li>Internet Explorer 9 or later</li>
<li>Latest versions of Chrome, Firefox, and Safari. </li>
</ul>
<p>而我們在 AWS Device Farm 內的實體測試機器所安裝好的瀏覽器包含:</p>
<ul>
<li>Android : Chrome  </li>
<li>iOS : Safari</li>
</ul>
<h3 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h3><p>這邊讓我們來實際操作一次，一開始需要先建立一個新的 Device Farm 專案(Project):</p>
<p><img src="aws_device_farm_new_project.png" alt="aws_device_farm_new_project"></p>
<p>而後開始選擇要做 Automation Testing 還是 Remote Access:</p>
<p><img src="aws_device_farm_new_project_success.png" alt="aws_device_farm_new_project_success"></p>
<p>當點選 Remote Access Tab 後則可以開始選擇要測試的實體機器:</p>
<p><img src="aws_device_farm_new_project_remote.png" alt="aws_device_farm_new_project_remote"></p>
<p><img src="aws_device_farm_new_project_remote_device.png" alt="aws_device_farm_new_project_remote_device"></p>
<p>這邊我們直接看實際使用 Remote Access 的過程:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GmY3LmHP6cY" frameborder="0" allowfullscreen></iframe>

<p>當我們想要結束使用則點選右上角中止即可:</p>
<p><img src="aws_device_farm_recycle.png" alt="aws_device_farm_recycle"></p>
<p>都結束可以回到Project &gt; Setting 去看目前剩餘的小時與相關的執行報告等:</p>
<p><img src="aws_device_farm_setting_remain.png" alt="aws_device_farm_setting_remain"></p>
<p>這邊要注意的一下，我們上傳到AWS的 Mobile APP 會在 <em>30天</em> 後自動移除，而所有的測試報告與紀錄會保留 <em>15 個月</em>。</p>
<h3 id="Supported-Devices"><a href="#Supported-Devices" class="headerlink" title="Supported Devices"></a>Supported Devices</h3><p><em>並非所有機型都支援 Remote Access 功能</em> ， 但如果有想要的機型不支援可以寫信至客服開啟特定機器做測試。</p>
<p>目前有的機型與版本列表如下:</p>
<table>
<thead>
<tr>
<th>Android</th>
<th>iOS</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTC One M8 (AT&amp;T) (4.4.4)</td>
<td>Apple iPad Air (9.1)</td>
</tr>
<tr>
<td>LG G Flex (AT&amp;T) (4.2.2)</td>
<td>Apple iPad Air (9.2)</td>
</tr>
<tr>
<td>LG G2 (AT&amp;T) (4.4.2)</td>
<td>Apple iPad Air (9.2.1)</td>
</tr>
<tr>
<td>LG G3 (Sprint) (4.4.2)</td>
<td>Apple iPad Mini 1st Gen (9.2)</td>
</tr>
<tr>
<td>LG G3 (Sprint) (5.0.1)</td>
<td>Apple iPad Mini 2 (9.0)</td>
</tr>
<tr>
<td>LG Optimus L70 (MetroPCS) (4.4.2)</td>
<td>Apple iPad Mini 2 (9.1)</td>
</tr>
<tr>
<td>Motorola DROID Ultra (Verizon) (4.4.4)</td>
<td>Apple iPad Mini 2 (9.2)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 3 (AT&amp;T) (4.4.2)</td>
<td>Apple iPad Mini 2 (9.2.1)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 3 (Verizon) (4.4.4)</td>
<td>Apple iPhone 5c (9.0)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 4 (AT&amp;T) (5.0.1)</td>
<td>Apple iPhone 5c (9.1)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 4 (Verizon) (5.0.1)</td>
<td>Apple iPhone 5c (9.2)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 (Sprint) (4.4.2)</td>
<td>Apple iPod Touch 6th Gen (9.1)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 (T-Mobile) (4.3)</td>
<td>Apple iPod Touch 6th Gen (9.2)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 (Verizon) (4.4.2)</td>
<td>Apple iPod Touch 6th Gen (9.2.1)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 LTE (T-Mobile) (4.3)</td>
<td>Apple iPod Touch 6th Gen (9.3)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 Mini (AT&amp;T) (4.4.2)</td>
<td>Apple iPod Touch 6th Gen (9.3.1)</td>
</tr>
<tr>
<td>Samsung Galaxy S4 (AT&amp;T) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S4 (T-Mobile) (4.4.4)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S4 (Verizon) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S4 Tri-band (Sprint) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S5 (AT&amp;T) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S5 (AT&amp;T) (4.4.4)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S5 (Verizon) (4.4.4)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S6 (Verizon) (5.0.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy Tab 3 10.1” (WiFi) (4.2.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy Tab 3 10.1” (WiFi) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy Tab 3 7.0” (T-Mobile) (4.4.4)</td>
</tr>
</tbody>
</table>
<p>但這邊很殘酷的對比一下Microsoft的 <em>Xamarin Test Cloud</em> 目前所提供測試的機器數量，完全比不上…</p>
<p>目前 AWS Device Farm 與 Xamarin Test Cloud 的裝置數量比為 397 : <strong> 2613 </strong> </p>
<h4 id="AWS-Device-Farm"><a href="#AWS-Device-Farm" class="headerlink" title="AWS Device Farm"></a>AWS Device Farm</h4><p><img src="device_list_aws.png" alt="device_list_aws"></p>
<p><a href="http://awsdevicefarm.info/" target="_blank" rel="external">Device List</a></p>
<p>以小米品牌的手機為例:</p>
<p>AWS 上找不到:</p>
<p><img src="xiaomi_aws.png" alt="xiaomi_aws"></p>
<h4 id="Xamarin-Test-Cloud"><a href="#Xamarin-Test-Cloud" class="headerlink" title="Xamarin Test Cloud"></a>Xamarin Test Cloud</h4><p><img src="device_list_xamarin.png" alt="device_list_xamarin"></p>
<p><a href="https://testcloud.xamarin.com/devices" target="_blank" rel="external">Device List</a></p>
<p>以小米品牌的手機為例:</p>
<p>Xamarin 上找到6台不同型號 :</p>
<p><img src="xiaomi_xamarin.png" alt="xiaomi_xamarin"></p>
<h3 id="Limits-in-AWS-Device-Farm"><a href="#Limits-in-AWS-Device-Farm" class="headerlink" title="Limits in AWS Device Farm"></a>Limits in AWS Device Farm</h3><ul>
<li>每個上傳測試的 Mobile App 不能大於 <em>4 GB</em> .</li>
<li>單次執行測試<em>無機器數量的限制</em>. </li>
<li>可測試執行回合<em>無上限</em></li>
<li>每次 <em>Remote Access</em> 的 Session 最多只能使用 <strong>60</strong> 分鐘</li>
<li>每次執行測試，預設的 Automated Testing 執行時間不能超過 <strong>60</strong> 分鐘 ，但此時間可寫信至官方服務單位請求延長最多至 <strong>150</strong> 分鐘</li>
</ul>
<h3 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h3><p>看完功能，最後來看一下一個服務的重點 - <strong>價錢</strong></p>
<p><img src="aws_device_farm_price.png" alt="aws_device_farm_price"></p>
<h4 id="Device-Minute"><a href="#Device-Minute" class="headerlink" title="Device Minute"></a>Device Minute</h4><p>要注意一下，基本的計價的方式是用 <em>device minute</em> 來計算。這時間的算法包含 : 單一機器 install, execute, 與 uninstall app所需的所有時間。所以每台機器除了啟動不用算錢，到完成測試並將該機器關閉時。所以如果我們有五個機器要做一個循環的測&amp;&amp;試從環境開始運行到關閉總共需要五分鐘，那這樣計算出來的總時數就是25分鐘。 目前  <strong>$0.17 per device minute</strong> 。</p>
<p>基本的 Automated Tests 或是 Remote Access 都是用這樣的計價方式。而這邊前 <em>1000 minutes</em> 是免費的!</p>
<h4 id="Unmetered-Plans"><a href="#Unmetered-Plans" class="headerlink" title="Unmetered Plans"></a>Unmetered Plans</h4><p>而 Automated Tests 除了上面的以分計費，還有包月專案~</p>
<p>Unmetered plans 是讓我們可以無限量的執行我們的測試，不用考慮使用時間。但這邊計價的方式則是看我們使用的 <em>Device Slot</em>。</p>
<p>Device Slot 是指機器同時執行數量，例如我們買10個單位的 Device Slot ，那就代表我們同時能跑的機器數量為10個。因為我們都是可以一個月可以跑無限量次的測試，如果同時能執行的機器越多，能幫我們越快完成測試。</p>
<p>這邊的 Device Slot 依樣可以在每次執行測試時從你定義的 Device Pool 或是 Device List 中逐一挑選。當你覺得當前的執行需要增減 Device Slot 時，也可以任意新增或降低當前的 Device Slot。</p>
<h4 id="Private-Device"><a href="#Private-Device" class="headerlink" title="Private Device"></a>Private Device</h4><p>AWS 還能針對客製化的需求(CPU, RAM, OS或是其他設定)的 <em>Private Device</em> 選項。 Private Device 與 Public Device 是可以混合使用的，每個 Private Device 一個月是 $200 的費用，但我們可以隨時將起停用避免帳單多出費用。</p>
<p>這邊要在強調一個雲端服務的重點，那就是:</p>
<p><img src="pay_as_you_using.jpg" alt="pay_as_you_using"></p>
<p>軟體開發沒有特效藥(silver bullet)，如果有這樣的體悟跟知道要測試的範圍，就來體驗每個月免費的1000 device minute，來試試實機測試的另一種選擇吧!</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://aws.amazon.com/tw/device-farm/" target="_blank" rel="external">AWS Device Farm</a></li>
<li><a href="https://aws.amazon.com/device-farm/faq/" target="_blank" rel="external">AWS Device Farm FAQs</a></li>
<li><a href="http://docs.aws.amazon.com/devicefarm/latest/developerguide/limits.html" target="_blank" rel="external">Limits in AWS Device Farm</a></li>
<li><a href="https://www.slideshare.net/AmazonWebServices/aws-reinvent-2016-test-and-debug-your-mobile-apps-on-real-android-and-ios-devices-in-the-cloud-with-aws-device-farm-mbl205" target="_blank" rel="external">AWS re:Invent 2016: Test and Debug Your Mobile Apps on Real Android and iOS Devices in the Cloud with AWS Device Farm (MBL205)</a></li>
<li><a href="https://www.youtube.com/watch?v=Y0WbKMJ6M6I" target="_blank" rel="external">AWS re:Invent 2016: Test and Debug Your Apps on Real Android and iOS Devices in the Cloud (MBL205)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹 AWS Device Farm 如何在雲端中透過實際的行動裝置進行測試，以改善您的 iOS、Android 以及 Web 應用程式的品質。 並實際使用 Remote Access 功能測試你的應用程式在實機的運行狀況。&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="https://blackie1019.github.io/categories/Testing/"/>
    
    
      <category term="Automation Testing" scheme="https://blackie1019.github.io/tags/Automation-Testing/"/>
    
      <category term="AWS" scheme="https://blackie1019.github.io/tags/AWS/"/>
    
      <category term="AWS Device Farm" scheme="https://blackie1019.github.io/tags/AWS-Device-Farm/"/>
    
      <category term="Behavior Testing" scheme="https://blackie1019.github.io/tags/Behavior-Testing/"/>
    
      <category term="Mobile" scheme="https://blackie1019.github.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET and ASP.NET Core, .NET Framework and .NET core and .NET Standard</title>
    <link href="https://blackie1019.github.io/2017/04/29/ASP-NET-and-ASP-NET-Core-NET-Framework-and-NET-core-and-NET-Standard/"/>
    <id>https://blackie1019.github.io/2017/04/29/ASP-NET-and-ASP-NET-Core-NET-Framework-and-NET-core-and-NET-Standard/</id>
    <published>2017-04-29T15:54:38.000Z</published>
    <updated>2017-05-11T14:20:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹 .NET Core 與 .NET Framework 與 ASP.NET Core的差別</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover.png"></p>
<p>最近在推廣與學習 .NET Core 上最常遇到的幾個問題：</p>
<ul>
<li>.NET Core 與 .NET Framework 的差別？</li>
<li>.NET Core 與 Mono 的差別？</li>
<li>.NET Core 與 ASP.NET Core 的差別？</li>
<li>什麼是 .NET Standard?</li>
<li>.NET Standard 與 .NET Core 的關係？</li>
<li>現在在用的 ASP.NET MVC5 &amp; WebAPI2 跟 ASP.NET Core 的差別？</li>
<li>C# 與 .NET Core 和 ASP.NET Core 的關係？</li>
</ul>
<p>因為這個些問題是學習 .NET Core 的必要知識，所以就整理了一篇與大家分享．</p>
<p>先說明，以下內容大多都是整理已有資訊的重點，如果有興趣了解這些內容請點選 <em>References</em> 閱讀細節，並給予原作者肯定與鼓勵！</p>
<p>其中推薦兩篇：</p>
<ul>
<li><a href="https://dotblogs.com.tw/aspnetshare/2016/04/10/20160409-netcore-netstandard" target="_blank" rel="external">ASP.NET Core 與 .Net Core, .Net Platform Standard, 以及 Shared Runtime 之間的關係</a></li>
<li><a href="https://dotblogs.com.tw/aspnetshare/2017/02/26/20170225-netstandardagain" target="_blank" rel="external">再來多聊一點 .Net Standard</a></li>
</ul>
<h2 id="NET-Overview"><a href="#NET-Overview" class="headerlink" title=".NET Overview"></a>.NET Overview</h2><p>2014 年11月微軟新任 CEO <em>Satya Nadella</em> 決心下，釋出了的.NET原始碼包含了伺服器部份的核心，如.NET Framework Libraries、.NET Core Framework Libraries 和 RyuJit VM，以上都正式對外開放原始碼．其他包含 Visual Studio Code 也是完全開源的計畫！</p>
<p>更多 Microsoft Open Source Project 可以參考 <a href="https://opensource.microsoft.com/" target="_blank" rel="external">Open Source at Microsoft</a></p>
<p>整個.NET 的開發我們可以從下面這兩張圖來看到這幾年到未來的一個趨勢：</p>
<p><img src="pre-overview.png" alt="pre-overview"></p>
<p>上面這張是<strong>目前</strong>整個 .NET 生態的分類．可以簡單地看到微軟在三個領域()由不同的底層 Framework 所支援，這樣的好處是我們對應特定領域/用途的開發可以透過這些分開的 Framework 達到 Cross-platform．但這三個領域本身並不是共用同一個底層 Framework ，這導致在 ASP.NET MVC 上用的套件，ASP.NET Core MVC 上可能不能用．</p>
<p>為了讓 Cross-solution 的專案能沿用既有的這些第三方套件(Packages)達到一個底層 Framework 即可 Cross-platform 與 Cross-solution 的目標， .NET Standard 就這樣誕生了．</p>
<p><img src="future-innovation_detail.png" alt="future-innovation_detail.png"></p>
<p>上面這張是<strong>未來</strong>整個 .NET 生態的分類．</p>
<p>可以很明顯地看到，微軟在未來想透過 <em>.NET Standard</em> 做到完整的 Cross-platform 與 Cross-solution．</p>
<p>而當我們加入了開發工具來看整個微軟針對開發的佈局就如下圖：</p>
<p><img src="future-innovation.jpg" alt="future-innovation"></p>
<p>從右邊的開發工具我們可以看到除了傳統號稱<em>地表最強IDE</em>的 Visual Studio 外， Visual Studio 其實還有一個線上版本的整合開發環境(IDE) Visual Studio Online 讓我們可以不用安裝任何東西，透過瀏覽器即可開始開發，而這邊要稍微注意的是 Visual Studio Online 以功能與定位來看，它其實是線上版的 <strong>Team Foundation Service</strong>．線上編輯<em>只是輔助</em>的功能．而Visual Studio Online 已於 2015/11 月改名為 Visual Studio Team Services – VSTS．</p>
<p>而從 2016 開始微軟也公開 macOS 版本的 <a href="https://www.visualstudio.com/zh-hant/vs/visual-studio-mac/" target="_blank" rel="external">Visual Studio for mac</a>，目前雖然還在 preview 中，但會在 2017 年上市．</p>
<p>另外，這幾年成長速度最快廣受各社群與開發者歡迎的免費且跨平台開源編輯器 <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>，不同於 Visual Studio 定位為 IDE，Visual Studio Code 定位為編輯器，但透過其開源與強大的社群功能，在各種不同套件的整合下，漸漸的可變成各語言的輕量IDE．</p>
<h3 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h3><p>.NET Framework 有兩個主要的元件 ：<em>Common Language Runtime</em> 和 <em>.NET Framework類別庫</em> 。</p>
<ul>
<li>Common Language Runtime則是.NET Framework的基礎，可視為程式執行期間管理程式碼的代理程式，提供記憶體的管理、執行緒的執行、程式碼的執行、程式碼安全驗證及編譯等服務。</li>
<li>Microsoft .NET Framework類別庫是作業系統層級的物件導向類別庫，與Common Language Runtime緊密整合，可供程式語言呼叫。所有支援.NET的程式語言都可以使用.NET Framework類別庫，減少學習新語言的時間。</li>
</ul>
<p><img src="introduction-to-net-framework.jpg" alt="introduction-to-net-framework"></p>
<p>最為人詬病的兩點：只能跑在 <em>Ｗindows</em> 平台與<em>各版本的套件不一定相容</em>，後著問題在 .NET Framework 4.0 開始已經逐漸達到向前相容了 (相容 2.0 到 當前下載的版本，但不包括 1.1 版本)．</p>
<p>這邊我們可以參考 Wiki 整理好的各版本 <strong>.NET Framework</strong> 的重點功能：</p>
<p><img src="DotNet_library.png" alt="DotNet_library.png"></p>
<p>而這邊要提醒一下 C# 版本與 .NET Framework 版本不一定要一致，但.NET Framework 版本會限制能使用的 C# 版本．</p>
<p>對於這些版本的關係可參考 <a href="http://blog.miniasp.com/post/2015/07/28/Clarify-the-versions-between-CLR-NET-CSharp-Visual-Studio-and-ASPNET.aspx" target="_blank" rel="external">釐清 CLR、.NET、C#、Visual Studio、ASP.NET 各版本之間的關係</a></p>
<h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><p>Mono 是一個目前由 Xamarin 公司 所主導的開放原始碼專案，該專案的目標是建立一系列符合ECMA標準的.NET工具．Mono專案不僅可以執行於Windows系統上，還可以執行於Linux，FreeBSD，Unix，OS X和Solaris，甚至一些遊戲平台，例如：Playstation 3，Wii或XBox 360．</p>
<p><img src="mono.png" alt="mono"></p>
<p>Mono程式的執行包含一個程式碼運作引擎，它會將ECMA CIL的byte code轉譯為原生碼（Native Code），它支援了以下處理器：ARM, MIPS（只有32位元模式）, SPARC, PowerPC, S390（64位元模式）, x86, x86-64以及IA-64 64位元模式。<br>程式的轉譯有三種模式：</p>
<ul>
<li><p>Just-in-time (JIT)編譯</p>
<p>  在程式執行當中將ECMA CIL的byte code轉譯為原生碼。</p>
</li>
<li><p>Ahead-of-Time (AOT)編譯：</p>
<p>  ECMA CIL的byte code（通常在.exe檔或.dll檔中）會轉譯出原生碼並儲存在作業系統中、以及CPU架構設定檔（例如在Linux上，如果是foo.exe，就會產生foo.exe.so檔）。通常，此種模式可產生出絕大部份前種模式所產生的原生碼，部份的例外是trampolines或是控管監督相關的碼（仍舊需要JIT來執行），由此可知AOT影像檔並非可以完全獨立執行的。</p>
</li>
<li><p>完全靜態編譯：</p>
<p>  這個模式只支援少數平台，它基於AOT編譯模式上，更進一步產生所有的trampoline、wrappers以及proxies，這幾樣東西是用於靜態連結出靜態檔案時所需。完全靜態編譯模式可以讓程式的執行期完全不需要用到JIT，這個做法適用於Apple iOS作業系統、Sony PlayStation 3以及微軟的XBox 360等作業系統。</p>
</li>
</ul>
<p>這邊可以看到在目前與早先推廣的框架裡面 Xamarin 還是使用 Mono 作為開發的底層 API :</p>
<p><img src="dotnet_mono_dotnetcore.png" alt="dotnet_mono_dotnetcore"></p>
<p>而 Mono 目前也是 <a href="https://dotnetfoundation.org/" target="_blank" rel="external">.NET Foundation</a> 下的其中一個開源計畫，看來應該還可以繼續保持下去．</p>
<h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p><a href="https://www.microsoft.com/net/core/platform" target="_blank" rel="external">.NET Core</a> 是.NET Framework的新一代版本，是微軟官方開發的第一個跨平台 (Windows、Mac OSX、Linux) 的應用程式開發框架（Application Framework）有著下列的特性：</p>
<ul>
<li>Cross-platform</li>
<li>Unified</li>
<li>Fast</li>
<li>Lightweight</li>
<li>Modern</li>
<li>Open Source</li>
</ul>
<p>而目前的版本為 .NET Core 1.1.1，近期更新計畫：</p>
<table>
<thead>
<tr>
<th>Milestone</th>
<th>Release Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>.NET Core 2.0 Preview</td>
<td>Q2 2017</td>
</tr>
<tr>
<td>.NET Core 2.0</td>
<td>Q3 2017</td>
</tr>
</tbody>
</table>
<p>.NET Core 1.0 支援的作業系統環境：</p>
<table>
<thead>
<tr>
<th>OS</th>
<th>Version</th>
<th>Architectures</th>
<th>Configurations</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Client</td>
<td>7 SP1 - 10</td>
<td>x64, x86</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Server</td>
<td>2008 R2 SP1 - 2016</td>
<td>x64, x86</td>
<td>Full, Server Core, Nano (2016 only)</td>
<td></td>
</tr>
<tr>
<td>Red Hat Enterprise Linux</td>
<td>7.2</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Debian</td>
<td>8.2</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ubuntu</td>
<td>14.04 LTS, 16.04 LTS</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Linux Mint</td>
<td>17</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Centos</td>
<td>7.1</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Oracle Linux</td>
<td>7.1</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Mac OS X</td>
<td>10.11, 10.12</td>
<td>x64</td>
<td></td>
<td>10.12 added in 1.0.2</td>
</tr>
</tbody>
</table>
<p>.NET Core 2.0 支援的作業系統環境：</p>
<table>
<thead>
<tr>
<th>OS</th>
<th>Version</th>
<th>Architectures</th>
<th>Configurations</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Client</td>
<td>7 SP1+</td>
<td>x64, x86</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Server</td>
<td>2008 R2 SP1+</td>
<td>x64, x86</td>
<td>Full, Server Core, Nano</td>
<td></td>
</tr>
<tr>
<td>Red Hat Enterprise Linux</td>
<td>7.3+</td>
<td>x64</td>
<td></td>
<td>This includes Centos and Oracle Linux</td>
</tr>
<tr>
<td>Fedora</td>
<td>25+</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Debian</td>
<td>8.7+</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ubuntu</td>
<td>14.04+</td>
<td>x64, arm32 [C]</td>
<td></td>
<td>This includes Linux Mint 17 for x64</td>
</tr>
<tr>
<td>openSUSE</td>
<td>42.2+</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Tizen</td>
<td>4+</td>
<td>arm32 [S]</td>
<td></td>
<td>Tizen .NET Developer Preview</td>
</tr>
<tr>
<td>Mac OS X</td>
<td>10.12+</td>
<td>x64</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>[S] This is supported by Samsung.</li>
<li>[C] This is supported by the Community</li>
</ul>
<h3 id="NET-Standard"><a href="#NET-Standard" class="headerlink" title=".NET Standard"></a>.NET Standard</h3><p>.NET Standard 是.NET 的新一代版本，是微軟開發的第一個跨平台 (Windows、Mac OSX、Linux) 並且跨應用程式開發框架（Application Framework）的底層API．.NET Standard 是重新了規範一套標準基礎程式庫 API 介面，未來可以在上面開發 ASP.NET, ASP.NET Core, Xamarin 等應用程式．</p>
<p>過去針對跨平台共用程式庫的主推做法是PCL（Portable Class Library），取出各平台不同 API 的交集(Intersection)，並透過適度的篩選保留對彼此平台都支援的 API．這樣的做法可以讓但開發者 <em>無痛</em> (不需知道不同平台的差異來呼叫或是發佈對應版本)。</p>
<p>而 .NET Standard 目的在提供微軟在解決方案的底層 API 可依此介面實作出一致的程式庫，如此程式碼不需修改即可針對不同平台編譯、執行，達到真正的 <em>Ｗrite one, Run everywhere</em> 。.Net Standard 的製做想法跟 PCL 不同．.Net Standard 先規範出了一些 API intersection 內容，把不同的 intersection 定義出不同的版本編號，然後再看每個 platform 能支援到什麼版本．</p>
<p>當前的 .NET Standard 還在 1.6 版本，而預計 2017 的 Q3 會有一個更完整的 .NET Standard 2 的版本，該版本整合了目前微軟所有主流的底層 API ．換句話說，或許從這版開始以後就只需要知道 .NET Standard 即可了．官方<a href="https://docs.microsoft.com/en-us/dotnet/articles/standard/library" target="_blank" rel="external">支援參考</a>或是<a href="https://github.com/dotnet/standard/blob/master/docs/versions.md" target="_blank" rel="external">Github - .NET Standard Versions</a>．</p>
<p><img src="dotnet_standard_2_overview.png" alt="dotnet_standard_2_overview"></p>
<p>而.NET Standard 2 則是有下面的既定目標:</p>
<p><img src="dotnet_standard_2_library.gif" alt="dotnet_standard_2_library"></p>
<p>補上與 .NET Core 的更新發佈時間：</p>
<table>
<thead>
<tr>
<th>Milestone</th>
<th>Release Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>.NET Core 2.0 Preview</td>
<td>Q2 2017</td>
</tr>
<tr>
<td>.NET Standard 2.0 Preview</td>
<td>Q2 2017</td>
</tr>
<tr>
<td>.NET Core 2.0</td>
<td>Q3 2017</td>
</tr>
<tr>
<td>.NET Standard 2.0</td>
<td>Q3 2017</td>
</tr>
</tbody>
</table>
<h4 id="ASP-NET-Web-Implementation-Overview"><a href="#ASP-NET-Web-Implementation-Overview" class="headerlink" title="ASP.NET Web Implementation Overview"></a>ASP.NET Web Implementation Overview</h4><p>大致上我們可以將 ASP.NET 於 Web 開發的應用(不以效能來看)以下圖來解釋：</p>
<p><img src="Web_Overview.bmp" alt="Web_Overview"></p>
<h4 id="ASP-NET-Web-Form-and-ASP-NET-MVC-Different"><a href="#ASP-NET-Web-Form-and-ASP-NET-MVC-Different" class="headerlink" title="ASP.NET Web Form and ASP.NET MVC Different"></a>ASP.NET Web Form and ASP.NET MVC Different</h4><p>ASP.NET Web Form 是微軟早期主打的 Web 應用程式服務框架，這也是很多人不懂 ASP.NET 的人所大多停留的映像：<strong>ASP.NET 的 Web Form 只要拖拉就可以完成頁面開發</strong>．</p>
<p>而在 ASP.NET MVC 框架推出後，我強烈建議不要在使用 Web Form 框架，因為不合宜的請求生命週期以及太好用的 toolkit 都導致整個效能只有 <em>慢</em> 跟 <em>很慢</em> 的差別，基本上我找不到繼續用 Web Form的任何理由，所以我也不打算介紹了．撇開效能跟不一樣的請求處理流程，直接看應用的時機與差別：</p>
<p><img src="WebForms_WebMVC.gif" alt="WebForms_WebMVC.gif"></p>
<p>這邊補上與 ASP.NET Core 的應用差別：</p>
<p><img src="dotnetframework_dotnet_application.png" alt="dotnetframework_dotnet_application"></p>
<h3 id="ASP-NET-MVC-5-and-ASP-NET-WebAPI-2-Different"><a href="#ASP-NET-MVC-5-and-ASP-NET-WebAPI-2-Different" class="headerlink" title="ASP.NET MVC 5 and ASP.NET WebAPI 2 Different"></a>ASP.NET MVC 5 and ASP.NET WebAPI 2 Different</h3><p>嚴格說起來 MVC 與 WebAPI 理論上是兩個不同需求取向的專案，但有鑒於使用上常常被混淆或被視為同樣的東西(有時候連官方文件也會偷懶把兩個放一起)，所以慢慢的被視為是一體的．</p>
<p>但我們可以把 WebAPI 的專案是為沒有呈現需求的網路服務應用程式, 而因為他本身只有單純的處理 HTTP 請求，所以<em>管線事件(pipeline)處理</em>上都比 MVC 還要再簡化，所以有更好的效能．如果今天是單純提供資料服務的應用程式我會強烈推薦使用 WebAPI 專案而非 MVC 專案．</p>
<p>請求生命週期(request life cycle)比較:</p>
<p><img src="request_life_cycle_all.png" alt="request_life_cycle_all"></p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Q-NET-Core-與-NET-Framework-的差別"><a href="#Q-NET-Core-與-NET-Framework-的差別" class="headerlink" title="Q: .NET Core 與 .NET Framework 的差別"></a>Q: .NET Core 與 .NET Framework 的差別</h3><p>兩者都是 <em>微軟官方</em> 推出的應用程式介面（API）類別庫，可提供開發者基於已提供的 API 作延伸開發．</p>
<p>.NET Framework <em>只能跑在 Windows</em> 的執行環境，.NET Core 可以跑在 <em>跨平台的執行環境</em> : 包含 Windows, macOS 與 Linux 環境．</p>
<p>.NET Core 和 .NET Framework 是子集 (Subset) 與超集 (Superset) 的關係，.NET Core 將會實作出部份的 .NET Framework 功能。未來 .NET Framework 和 .NET Core 也將會是各自發展，但它們也會同時使用彼此的功能，例如 .NET Compiler Platform 與 RyuJIT 等技術。</p>
<h3 id="Q-NET-Core-與-Mono-的差別？"><a href="#Q-NET-Core-與-Mono-的差別？" class="headerlink" title="Q: .NET Core 與 Mono 的差別？"></a>Q: .NET Core 與 Mono 的差別？</h3><p>Mono 是一個已發展許久的 .NET Framework 跨平台開源版本，由社群所維護並成立自成一個生態系統，像Xamarin這樣的跨平台.NET行動應用就是從 Ｍono 計畫開始發展出來的．</p>
<p>.NET Core 是.NET Framework的新一代版本，是微軟官方開發的第一個跨平台 (Windows、Mac OSX、Linux) 的應用程式開發框架（Application Framework）</p>
<p>目前微軟官方表示： <em>.NET Core</em> 與 <em>Mono</em> 未來會是合作的關係，Mono 仍會維持社群力量的維護與發展，而 .NET Core 則會以官方角度來進行發展．</p>
<h3 id="Q-NET-Core-與-ASP-NET-Core-的關係？"><a href="#Q-NET-Core-與-ASP-NET-Core-的關係？" class="headerlink" title="Q: .NET Core 與 ASP.NET Core 的關係？"></a>Q: .NET Core 與 ASP.NET Core 的關係？</h3><p>最早在微軟內部 <em>ASP.NET Core</em> 與 <em>.NET Core</em> 是完全沒有關係的兩個專案．ASP.NET Core 的初期(名稱還為ASP.NET 5時)由於 .NET Core 那時計畫還沒開始執行，所以擁有別於 .NET Core 的獨立執行的 Runtime與工具，該工具與環境稱為 Project K, 前陣子會看到很多 DNX (.NET Execution Environment) 也是他的名稱沒錯．但後來在 整<br>合後的版本將在 1.0 RC2 時釋出的 ASP.NET Core 就已經徹底改用 .NET Core 的 Runtime 與工具，原先的 DNX 計畫則終止了．</p>
<p>而目前來看 ASP.NET Core 是一個開源且跨平台的 framework ，主要是用來建立 Web 應用程式, API 服務, IoT 服務與 手機後台服務等以網路應用為主的應用程式．我們可以選擇要使用 .NET Core 或是 .NET Standard 作為跨平台的底層 API．</p>
<p>使用上要特別注意，目前 .NET Core Runtime 最新版本為 <strong>1.1.1</strong> ，而 .NET Standard 當前的 1.6 版本僅整合到 .NET Core Runtime <strong>1.0.0</strong> ．</p>
<p><img src="dotnet_standard_2_library.gif" alt="dotnet_standard_2_library"></p>
<h3 id="Q-NET-Standard-與-NET-Core-的關係？"><a href="#Q-NET-Standard-與-NET-Core-的關係？" class="headerlink" title="Q: .NET Standard 與 .NET Core 的關係？"></a>Q: .NET Standard 與 .NET Core 的關係？</h3><p>.NET Standard 未來會整合 .NET Core 最新版本並逐漸取代各項原有的底層 API (包括.NET Framework, .NET Core 與 Xamarin)，如果有跨解決方案的共用類別庫開發，建議在 .NET Standard 2 推出時看一下是否符合需求．</p>
<h3 id="Q-現在在用的-ASP-NET-MVC5-amp-WebAPI2-跟-ASP-NET-Core-的差別？"><a href="#Q-現在在用的-ASP-NET-MVC5-amp-WebAPI2-跟-ASP-NET-Core-的差別？" class="headerlink" title="Q: 現在在用的 ASP.NET MVC5 &amp; WebAPI2 跟 ASP.NET Core 的差別？"></a>Q: 現在在用的 ASP.NET MVC5 &amp; WebAPI2 跟 ASP.NET Core 的差別？</h3><p>ASP.NET MVC5 與 WebAPI2 甚至是 ASP.NET Web Form 等專案目前都是跑在 .NET Framework 上面的應用程式框架，而 ASP.NET Core 則是跑在 .NET Core 或 .NET Standard 的框架．</p>
<p>在 ASP.NET Core 上有 mvc 與 webapi 專案來對應 ASP.NET MVC5 與 WebAPI2 這兩個框架應用，因為兩著框架使用上非常雷同，幾乎可以無痛從 .NET Framework 轉移至 .NET Core，但相依的套件可能就要看是否支援 .NET Core 或是 .NET Standard ．</p>
<p>而由於 .NET Core 跨平台的特性，在使用 Container 作為開發與部屬環境時即可不用限制地跑任何一個 Windows 或 macOS 甚至 Linux 的環境，也方便我們部署到任何一個雲端供應商，如：AWS 與 Google Cloud Platform．</p>
<p>另外 ASP.NET Core 有著超高的效能，每秒能處理115萬個請求，是ASP.NET with .NET Framework 4.6 的 23 倍之多，有興趣的可以參考 <a href="http://www.ageofascent.com/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/" target="_blank" rel="external">ASP.NET Core – 2300% More Requests Served Per Second</a></p>
<p><img src="performace.jpg" alt="performace"></p>
<p>對於 web 框架評比有興趣的朋友可以參考<a href="https://www.techempower.com/benchmarks" target="_blank" rel="external">https://www.techempower.com/benchmarks/</a></p>
<p>對於 ASP.NET Core 與 Google Cloud Platform 整合部署有興趣的朋友可以參考 <a href="http://blackie1019.github.io/categories/Google-Cloud-Platform">Google Cloud Platform</a> 系列文章．</p>
<h3 id="Q-C-與-NET-Core-和-ASP-NET-Core-的關係？"><a href="#Q-C-與-NET-Core-和-ASP-NET-Core-的關係？" class="headerlink" title="Q: C# 與 .NET Core 和 ASP.NET Core 的關係？"></a>Q: C# 與 .NET Core 和 ASP.NET Core 的關係？</h3><p>C# 目前是 .NET Core 與 ASP.NET Core 的預設開發語言，而除了 C# 外目前還能使用 <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> 作為開發語言．而如果還在使用 <strong>VB.NET</strong> 開發的朋友可能不用指望 .NET Core 或是 ASP.NET Core 會支援了(雖然不知道為什麼官方一直大聲的說會支援，但已經一年多都沒看到更新的下文或回應)．</p>
<h2 id="Survey-and-Trendy"><a href="#Survey-and-Trendy" class="headerlink" title="Survey and Trendy"></a>Survey and Trendy</h2><p>從前幾天公佈的 <a href="https://insights.stackoverflow.com/survey/2017" target="_blank" rel="external">stackoverflow : Developer Survey Results 2017</a> 也可以看到 C#, ASP.NET Core 與  VSCode 的成長與市佔率其實不小，甚至帶來不少的話題，而滿意度很高一直以來都是這些 .NET 工具與套件的特性，而開源與徹底跨平台的策略更是明顯地帶來更多人的接納．</p>
<p>Programming Languages :</p>
<p><img src="csharp_rank.png" alt="csharp_rank"></p>
<p>Most Popular Frameworks, Libraries, and Other Technologies:</p>
<p><img src="dotnet_popular.png" alt="dotnet_popular"></p>
<p>Most Loved, Dreaded, and Wanted Frameworks, Libraries and Other Technologies:</p>
<p><img src="dotnet_most_loved.png" alt="dotnet_most_loved"></p>
<p>Most Popular Developer Environments by Occupation :</p>
<p><img src="stackoverflow_vscode.png" alt="stackoverflow_vscode"></p>
<p><img src="stackoverflow_vscode_2.png" alt="stackoverflow_vscode_2"></p>
<p>好了，看完這麼多是不是覺得 <em>.NET Core</em> 與 <em>ASP.NET Core</em> 帶給我們很多新的希望呢！</p>
<p>有興趣學習的朋友請參考<a href="http://blackie1019.github.io/2016/11/30/Ironman-30-days-for-ASP-NET-Core/">Ironman for ASP.NET Core</a>系列分享瞜</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blogs.msdn.microsoft.com/cesardelatorre/2016/06/27/net-core-1-0-net-framework-xamarin-the-whatand-when-to-use-it/" target="_blank" rel="external">.NET Core, .NET Framework, Xamarin – The “WHAT and WHEN to use it”</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/articles/standard/library" target="_blank" rel="external">.NET Standard</a></li>
<li><a href="https://blogs.msdn.microsoft.com/msdntaiwan/2016/07/05/announcing-dotnet-core-1-0/" target="_blank" rel="external">.NET Core 1.0 釋出囉！微軟開源跨平台新布局，超越你想像的高效能！</a></li>
<li><a href="https://github.com/dotnet/core/blob/master/roadmap.md" target="_blank" rel="external">.NET Core Roadmap</a></li>
<li><a href="https://andrewlock.net/understanding-net-core-netstandard-and-asp-net-core/" target="_blank" rel="external">Understanding .NET Core, NETStandard, .NET Core applications and ASP.NET Core</a></li>
<li><a href="http://oscarsotorrio.com/2012/09/default.aspx" target="_blank" rel="external">Gestión de errores en ASP.NET MVC</a></li>
<li><a href="http://www.codemag.com/Article/1312051" target="_blank" rel="external">Planning Web Solutions Today: Web Forms, ASP.NET MVC, Web API, and OWIN. Oh My!</a></li>
<li><a href="http://blog.darkthread.net/post-2016-09-27-net-standard-2-0.aspx" target="_blank" rel="external">.NET Standard 2.0 是什麼？可以吃嗎？</a></li>
<li><a href="https://dotblogs.com.tw/aspnetshare/2017/02/26/20170225-netstandardagain" target="_blank" rel="external">再來多聊一點 .Net Standard</a></li>
<li><a href="http://www.c-sharpcorner.com/UploadFile/8c19e8/Asp-Net-5-getting-started-with-Asp-Net-mvc-6/" target="_blank" rel="external">ASP.Net 5: Getting Started With ASP.Net MVC 6</a></li>
<li><a href="http://bartwullems.blogspot.tw/2016/11/aspnet-web-api-2-request-pipeline.html" target="_blank" rel="external">ASP.NET Web API 2 Request Pipeline</a></li>
<li><a href="https://blogs.msdn.microsoft.com/msdntaiwan/2013/12/02/visual-studio-online-visual-studio-online-vs-online/" target="_blank" rel="external">Visual Studio Online 正式發表! Visual Studio Online (VS Online) 是什麼?</a></li>
<li><a href="https://www.slideshare.net/ArunPrasadVidhyaarthi/introduction-to-net-framework" target="_blank" rel="external">Introduction to .net framework</a></li>
<li><a href="https://zh.wikipedia.org/wiki/.NET%E6%A1%86%E6%9E%B6" target="_blank" rel="external">Wiki - .NET Framework</a></li>
<li><a href="https://zh.wikipedia.org/wiki/.NET_Core" target="_blank" rel="external">Wiki - .NET Core</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Mono" target="_blank" rel="external">Wiki - Mono</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹 .NET Core 與 .NET Framework 與 ASP.NET Core的差別&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term="ASP.NET" scheme="https://blackie1019.github.io/tags/ASP-NET/"/>
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term=".NET Framework" scheme="https://blackie1019.github.io/tags/NET-Framework/"/>
    
      <category term=".NET Standard" scheme="https://blackie1019.github.io/tags/NET-Standard/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core MVC play with Google App Engine - Flexible Environment</title>
    <link href="https://blackie1019.github.io/2017/04/28/ASP-NET-Core-MVC-play-with-Google-App-Engine-Flexible-Environment/"/>
    <id>https://blackie1019.github.io/2017/04/28/ASP-NET-Core-MVC-play-with-Google-App-Engine-Flexible-Environment/</id>
    <published>2017-04-28T15:37:07.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>先前為大家介紹了GAE的 Standard Environment ，這次將介紹如何實際將ASP.NET Core MVC專案放置在GAE的 <em>Flexible Environment</em> 環境運行。</p>
<a id="more"></a>
<p>這邊因為還是在GAE的功能範圍，所以本篇只會針對 <em>Flexible Environment</em> 做細節的介紹，有關於GAE的全貌與不同Environment的請參考<a href="http://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/">ASP.NET Core MVC play with Google App Engine - Standard Environment</a></p>
<h2 id="Recap-The-Difference-Between-Standard-Environment-and-Flexible-Environment"><a href="#Recap-The-Difference-Between-Standard-Environment-and-Flexible-Environment" class="headerlink" title="Recap : The Difference Between Standard Environment and Flexible Environment"></a>Recap : The Difference Between Standard Environment and Flexible Environment</h2><p>這邊我們分享一下 GCP 教材幫我們整理的差異:</p>
<p><img src="app_engine_environments_differences.png" alt="app_engine_environments_differences"></p>
<p>簡單來講如果想獲得比較彈性的環境與願意付較多的錢，GAE 的 <em>Standard Environment</em> 給予我們一個最簡單上手的應用程式架設過程，但客製化的程度很低，如.NET Core的版本我們也不能指定．</p>
<p>而另外一個服務 GKE 則是讓你透過 <em>Container</em> ＋ <em>K8S</em> 的方式自己的喜好架設與設定強大的 Container Cluster ，將你的應用程式擺放上去．有興趣的人可以參考先前的<a href="http://blackie1019.github.io/2017/04/15/ASP-NET-Core-MVC-play-with-Goolge-Container-Engine/">ASP.NET Core MVC play with Google Container Engine</a></p>
<p>而相對於GKE自己設定K8S的難度比起來，GAE 的 <em>Flexible Environment</em> 能給予你更大的彈性但依舊免去維運上的負擔，持續專心在主要的應用開發上。架構上他透過下方的方式運作:</p>
<p><img src="gae_flexible_environment.png" alt="gae_flexible_environment"></p>
<p>這邊可以看到有一份 app.yaml 檔案與 Dockerfilec 合作產生 Container 環境做運行，這份 <em>app.yaml</em> 就是 GAE - Flexible Environment 中最重要的設定檔，決定你的容器要在什麼條件下擴展．</p>
<p>接下來就直接來看看怎麼將.NET Core應用程式放置在GAE的 Flexible Environment 中運行．</p>
<h2 id="Flexible-Environment-with-ASP-NET-Core-1-0-1"><a href="#Flexible-Environment-with-ASP-NET-Core-1-0-1" class="headerlink" title="Flexible Environment with ASP.NET Core 1.0.1"></a>Flexible Environment with ASP.NET Core 1.0.1</h2><p>以下環境建置步驟會快速帶過，如果對各指令不懂可以參考先前的<a href="http://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/">ASP.NET Core MVC play with Google App Engine - Standard Environment</a><a href="http://blackie1019.github.io/2016/11/30/Ironman-30-days-for-ASP-NET-Core/">.NET Core 系列</a>．</p>
<p>另外，再次提醒各位．由於 <em>Google Cloud Shell</em> 目前預載的 <em>.NET CLI</em> 是 .NET Core 1.0.0 - Preview 2，而微軟在2017/3發行了最新的.NET Core 1.1.1 ，並包含 .NET Core 1.1.1 與 .NET Core 1.0.1 SDK 版本的更新，所以這邊指令會有點不一樣，而很遺憾的目前沒有辦法幫 Google Cloud Shell 升級．在實作下面範例時請特別注意指令的差異．</p>
<h3 id="Create-New-Project"><a href="#Create-New-Project" class="headerlink" title="Create New Project"></a>Create New Project</h3><p>這邊我們新增一個Google Cloud專案</p>
<p><img src="new_project.png" alt="new_project.png"></p>
<h3 id="Publish-the-ASP-NET-Core-1-0-app"><a href="#Publish-the-ASP-NET-Core-1-0-app" class="headerlink" title="Publish the ASP.NET Core 1.0 app"></a>Publish the ASP.NET Core 1.0 app</h3><p>這邊我們快速的新增一個資料夾並透過 <em>.NET CLI</em> 幫我們建立 mvc 專案，並將其運行起來．</p>
<pre><code>mkdir app;cd app
dotnet new -t web;dotnet restore;dotnet run
</code></pre><p><img src="google_shell_new_project.png" alt="google_shell_new_project"></p>
<p>這邊我們一樣透過google cloud shell左上角的Web Preview可以看到下面的運行畫面:</p>
<p><img src="google_shell_new_web_preview.png" alt="google_shell_new_web_preview"></p>
<h3 id="Package-the-ASP-NET-Core-app-as-a-Docker-container"><a href="#Package-the-ASP-NET-Core-app-as-a-Docker-container" class="headerlink" title="Package the ASP.NET Core app as a Docker container"></a>Package the ASP.NET Core app as a Docker container</h3><p>接著我們離開運行模式(ctrl+c)來將這個app容器化．</p>
<p>首先我們先將該應用程式發佈成正式環境的版本：</p>
<pre><code>dotnet publish -c Release
</code></pre><p><img src="dotnet_release.png" alt="dotnet_release"></p>
<p>這邊我們可以看到，除了會將我們的.NET Core正式用 Release 編譯，還會幫我們做front-end最佳化的處理並將檔案位置發佈到/home/blackie1019/app/bin/Release/netcoreapp1.0/publish 下面．</p>
<p>而我們前往該目錄並新增一份 <em>Dockerfile</em> 來定義容器內的設定．</p>
<pre><code>cd /bin/Release/netcoreapp1.0/publish;touch Dockerfie;vi Dockerfile
</code></pre><p>接著我們將下面內容貼上</p>
<pre><code>FROM microsoft/dotnet:1.0.1-runtime
COPY . /app
WORKDIR /app

EXPOSE 8080/tcp
ENV ASPNETCORE_URLS http://*:8080

ENTRYPOINT [&quot;dotnet&quot;, &quot;app.dll&quot;]
</code></pre><p>這邊我們要注意 <em>FROM</em> 的部份我們要下載的root container image是微軟官方的1.0.1-runtime版本，而 <em>ENTRYPOINT</em> 這邊的dll要指定你的專案名稱的dll，如此處是 <em>app.dll</em> .  而這邊的port指定為 <em>8080</em> 則是 App Engine flexible 的指定要求，其他相關規定可以<a href="https://cloud.google.com/appengine/docs/flexible/custom-runtimes/build" target="_blank" rel="external">參考</a>．</p>
<h3 id="Create-app-yaml-for-App-Engine-flexible-and-Deploy"><a href="#Create-app-yaml-for-App-Engine-flexible-and-Deploy" class="headerlink" title="Create app.yaml for App Engine flexible and Deploy"></a>Create app.yaml for App Engine flexible and Deploy</h3><p>而當我們將container設定準備好後，這邊可以透過 *Google Cloud SDK＊ 的 CLI 來幫我們建立 app.yaml檔案</p>
<pre><code>gcloud beta app gen-config --custom
</code></pre><p><img src="google_shell_create_app_yaml.png" alt="google_shell_create_app_yaml"></p>
<p>而當我們打開該檔案後可以發現其實裡面只有兩個設定如下：</p>
<p><img src="app_yaml_basic.png" alt="app_yaml_basic"></p>
<p>到這邊你已經設定好 Release 版本的dll檔案, Dockerfile 與 app.yaml 後我們就可以將其發佈出去了</p>
<pre><code>gcloud app deploy
</code></pre><p><img src="create_app.png" alt="create_app"></p>
<p>這邊要再次確認後就會開始建置與部屬環境了</p>
<p><img src="create_app_docker_image.png" alt="create_app_docker_image"></p>
<p>當完成後頁面會顯示你的應用程式部署的實際網址在哪邊(這邊用Web Preview的連結是不同的)，或是透過下面指令也可以查詢到：</p>
<pre><code>gcloud app browse
</code></pre><p><img src="success.png" alt="success"></p>
<h3 id="An-Overview-of-App-Engine"><a href="#An-Overview-of-App-Engine" class="headerlink" title="An Overview of App Engine"></a>An Overview of App Engine</h3><p>如此一來我們就成功將我們的環境建置完成了．在看web操作介面前先帶大家瀏覽一下整個 <em>App Engine</em> 的架構</p>
<p><img src="gae_service_vision_instance.svg" alt="gae_service_vision_instance.svg"></p>
<p>這邊我們可以看到我們的應用程式會被當成服務的方式被部署出去，就像是 微服務(microservice) 的架構被建立起來獨立運行，而App Engine也可以包括多個Service來讓不同功能的服務彼此互相溝通．</p>
<p>而每個 service 都包含原始碼(source code)與一份設定檔(configuration file)，當我們每次部署一個service出去時都會帶有一個特定的 version ，而實際運行的 instance 則要指定使用哪一版本的 version ．如此一來我們可以在當前版本有意外時進行退版(roll back)．</p>
<p>接著，我們來看一下Google Cloud Platform的 UI 介面在剛剛的部屬後有什麼變化．</p>
<h4 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h4><p>首先我們先看 App Eninge 下的 <em>Services</em>:</p>
<p><img src="ui_services.png" alt="ui_services"></p>
<p>這邊跟我們剛剛用的  gcloud app browse 指令相同，但我們可以直接點選連結到我們運行的網站</p>
<h4 id="Versions"><a href="#Versions" class="headerlink" title="Versions"></a>Versions</h4><p>這邊可以看到我們當前給他的版本：</p>
<p><img src="ui_versions.png" alt="ui_versions"></p>
<h4 id="Instances"><a href="#Instances" class="headerlink" title="Instances"></a>Instances</h4><p><img src="ui_instances.png" alt="ui_instances"></p>
<p>這邊我們可以看到下方有一個 <em>Instances (autoscaled)</em></p>
<p>主要設定解釋：</p>
<ul>
<li><p>Manual Scaling</p>
<p>  手動調整擴展的Instance</p>
</li>
<li><p>Basic Scaling</p>
<p>  單純根據接收的 request 的量來調整Instance的數量，並會在app 閒置時(idle)關閉Instance．</p>
</li>
<li><p>Automatic Scaling</p>
<p>  根據 request rate, response latencies 與其他應用程式相關的矩陣(metrics)算出是否需要調整Instance，而這也是預設的設定．</p>
</li>
</ul>
<p>詳細的差異與內容請參考官方的<a href="https://cloud.google.com/appengine/docs/standard/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes" target="_blank" rel="external">Scaling types and instance classes說明</a></p>
<h2 id="Flexible-Environment-with-ASP-NET-Core-1-1-1"><a href="#Flexible-Environment-with-ASP-NET-Core-1-1-1" class="headerlink" title="Flexible Environment with ASP.NET Core 1.1.1"></a>Flexible Environment with ASP.NET Core 1.1.1</h2><p>在上面我們示範了如何使用 <em>Google Cloud Shell</em> 的方式幫我們建立一個ASP.NET Core 1.0.1的專案並透過容器化的過程打包整個應用程式成為一個Docker images，再將此發佈至GAE上作Flexible的擴展．但由於專案是我們透過 Google Cloud Shell 建立的，由於內建的SDK僅支援 <em>ASP.NET Core 1.0.1</em> 與 <em>.NET CLI 1.0.0</em> 的版本這讓我們無法透過內建的 <em>.NET CLI</em> 建立最新版的ASP.NET Core專案架構與CLI所提供的功能．</p>
<p>這邊我們可改用本機下載的 ASP.NET Core 1.1.1 SDK 建立一個新版的開發環境．而我們一樣會將起封裝成 Docker Images 後再透過 Google Cloud SDK 將此環境發佈至 App Engine ，接下來就讓我們來實作這樣的過程吧：</p>
<h3 id="Prepare-Your-Environments"><a href="#Prepare-Your-Environments" class="headerlink" title="Prepare Your Environments"></a>Prepare Your Environments</h3><p>接著，不同於 App Engine 我們可以運用Google Cloud Shell直接來開發我們的程式，官方這邊也建議我們在Flexible Environment的開發採用本地端的容器化開發方式(Containerized)，主要就是我們可能想要建立一個不同於 GAE - Standard Environment 版本的環境，而在本機開發方便我們驗證是否成功建立我們想要的容器(Container)。</p>
<p>這邊我們就需要在本機安裝 <a href="https://cloud.google.com/sdk/" target="_blank" rel="external">Google Cloud SDK</a>, <a href="https://go.microsoft.com/fwlink/?linkid=847009" target="_blank" rel="external">.NET Core 1.1 SDK</a> 與選擇性安裝 <a href="https://www.docker.com/community-edition" target="_blank" rel="external">Docker</a> (如果你不要驗證可以不用安裝)．</p>
<p>這邊接下來的步驟與先前的<a href="http://blackie1019.github.io/2017/04/15/ASP-NET-Core-MVC-play-with--Container-Engine/">ASP.NET Core MVC play with Google Container Engine</a> 的部分雷同，如果想看詳細描述可以參考此篇．</p>
<h3 id="Publish-the-ASP-NET-Core-1-1-app"><a href="#Publish-the-ASP-NET-Core-1-1-app" class="headerlink" title="Publish the ASP.NET Core 1.1 app"></a>Publish the ASP.NET Core 1.1 app</h3><p>這邊我們快速成立一個mvc的應用程式, 接著將網站運行起來:</p>
<pre><code>dotnet new mvc;dotnet restore; dotnet run
</code></pre><p>前往<a href="http://localhost:5000" target="_blank" rel="external">http://localhost:5000</a>可以看到下面結果：</p>
<p><img src="ori_index.png" alt="ori_index"></p>
<p>由於 ASP.NET Core 的 Razer頁面變更不用重新建置，所以我們可以直接前往Views&gt;Home&gt;Index.cshtml 做些修改：</p>
<p><img src="netcore_app_1_1.png" alt="netcore_app_1_1"></p>
<p>在回到頁面可看到下方結果：</p>
<p><img src="modify_index.png" alt="modify_index"></p>
<h3 id="Package-the-ASP-NET-Core-1-1-app-as-a-Docker-container"><a href="#Package-the-ASP-NET-Core-1-1-app-as-a-Docker-container" class="headerlink" title="Package the ASP.NET Core 1.1 app as a Docker container"></a>Package the ASP.NET Core 1.1 app as a Docker container</h3><p>接著一樣發佈該應用程式：</p>
<pre><code>dotnet publish -c Release;
</code></pre><p>到該發行的目錄下建立Dockerfile:</p>
<pre><code>cd bin/Release/netcoreapp1.1/publish;touch Docker;vi Dockerfile
</code></pre><p>這邊要注意我們的FROM要改為 <em>microsoft/dotnet:1.1.1-runtime</em> 並修改 ENTRYPOINT 內運行的dll名稱：</p>
<pre><code>FROM microsoft/dotnet:1.1.1-runtime
COPY . /app
WORKDIR /app

EXPOSE 8080/tcp
ENV ASPNETCORE_URLS http://*:8080

ENTRYPOINT [&quot;dotnet&quot;, &quot;GAENetCoreApp.dll&quot;]
</code></pre><p>如果本機有 Docker 則可以建立image：</p>
<pre><code>docker build -t blackie1019/aspnetcoredemo:gae .
</code></pre><p>運行起來後到<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>看看</p>
<pre><code>docker run -d -p 8080:8080 -t blackie1019/aspnetcoredemo:gae
</code></pre><p><img src="gae_local_docker.png" alt="gae_local_docker"></p>
<h3 id="Create-app-yaml-for-App-Engine-flexible"><a href="#Create-app-yaml-for-App-Engine-flexible" class="headerlink" title="Create app.yaml for App Engine flexible"></a>Create app.yaml for App Engine flexible</h3><p>接著我們新增 app.yaml 並添加下面設定：</p>
<pre><code>service: netcore-latest-version
runtime: custom
env: flex
automatic_scaling:
min_num_instances: 1
max_num_instances: 3
cool_down_period_sec: 60 # default value
cpu_utilization:
    target_utilization: 0.5
</code></pre><p>這邊我們設定它的擴展從1個instance開始並且依據CPU的使用率(如果達到50%就開一個新的instance,最多到3個instance)．</p>
<h3 id="Using-Google-Cloud-SDK-to-Deploy"><a href="#Using-Google-Cloud-SDK-to-Deploy" class="headerlink" title="Using Google Cloud SDK to Deploy"></a>Using Google Cloud SDK to Deploy</h3><p>當我們設定好了app.yaml後我們透過gcloud info指令確定一下當前登入的專案是否正確：</p>
<p><img src="gcloud_shell_incorrect_project.png" alt="gcloud_shell_incorrect_project"></p>
<p>這邊我們可以透過下方指令查詢目前的設定：</p>
<pre><code>gcloud config configurations list
</code></pre><p>切換至不同設定：</p>
<pre><code>gcloud config configurations activate &lt;YOUR_CONFIG&gt;
</code></pre><p>接著我們可以幫我們的設定檔案加入不同的屬性，這邊加入 <em>account</em> 與 <em>project</em> :</p>
<pre><code>gcloud config set account blackie1019@gmail.com
gcloud config set project clean-respect-165712
</code></pre><p>其他請參考<a href="https://cloud.google.com/sdk/gcloud/reference/config/set" target="_blank" rel="external">gcloud config set</a></p>
<p>當設定完成，我們就可以部署上去：</p>
<pre><code>gcloud app deploy
</code></pre><p>這邊會用 gcloud 的設定檔與 app.yaml 指定的 service 作部署，所以我們可以回到ＵＩ界面看到我們的 Services 多了一個版本紀錄：</p>
<p><img src="app_engine_serices_update.png" alt="app_engine_serices_update"></p>
<p>這邊也可以看到 Versions 舊的設定已經stopped，啟用的是新的設定．</p>
<p><img src="app_engine_versions_update.png" alt="app_engine_versions_update"></p>
<p>而當我們在回到原本部署出去的頁面<a href="https://clean-respect-165712.appspot.com/" target="_blank" rel="external">https://clean-respect-165712.appspot.com/</a>，可以看到中間的Banner顯示目前的運行版本是ASP.NET Core 1.1 版本．</p>
<p><img src="netcore_latest_result.png" alt="netcore_latest_result"></p>
<h2 id="補充-Why-Google-Cloud-Platform"><a href="#補充-Why-Google-Cloud-Platform" class="headerlink" title="[補充] Why Google Cloud Platform"></a>[補充] Why Google Cloud Platform</h2><p>身為一個.NET的愛好者來說，Azure應該是首選，但為什麼我會積極的介紹GCP呢？理由很簡單：錢與擴充性！</p>
<p>而各個主流 Cloud 的選擇可以參考下面的文章：</p>
<ul>
<li><a href="https://blog.gcp.expert/google-cloud-v-aws/#more-127" target="_blank" rel="external">該選哪朵雲？比較兩大雲端供應商 GCP 與 AWS</a></li>
<li><a href="http://cloudacademy.com/blog/aws-vs-microsoft-azure-google-cloud/" target="_blank" rel="external">An AWS user’s take on AWS vs. Microsoft Azure and Google Cloud Platform</a></li>
<li><a href="https://www.sitepoint.com/a-side-by-side-comparison-of-aws-google-cloud-and-azure/" target="_blank" rel="external">A Side-by-Side Comparison of AWS, Google Cloud and Azure</a></li>
</ul>
<p>一個雲端服務除了一開始的技術與架構門檻跨過後，剩下的大概就是三個問題：錢、錢、錢</p>
<p>雲端的服務使用時間、空間、與用了多少方便的服務都是要錢的，既然如此一開始的考量應該是我們都能達到需求的情況下誰真的能給予最划算的價錢</p>
<p><img src="gcp_good_parts.png" alt="gcp_good_parts"></p>
<p>而這邊不拿Azure出來比較是因為Azure有的服務AWS都有，考量到ASP.NET Core本身就是一個跨平台的技術，如果不能跨<em>雲端平台</em>被綁死在微軟自己體系下豈不是有點可惜？</p>
<p>ASP.NET Core天生就與Azure的整合應該是最好的，而使用AWS的人又佔了雲端50%以上的用戶，不缺與AWS整合的文章或學習資源．</p>
<p>所以為了多元的推廣 <em>ASP.NET Core</em> 這樣一個好技術與雲端平台的其他選擇，我開始了這一系列<a href="http://blackie1019.github.io/categories/Google-Cloud-Platform">Google Cloud Platform</a>的文章．之後我分享更多ASP.NET Core能與GCP服務整合的實務案例，提供整體架構選擇上的一另一種組合！</p>
<p>而擴充性，這邊強調Google的Firebase實在是直得大家研究的工具，他大大減少整個應用程式開發的底層架構，大家都知道要研發汽車，我們不用重複製作輪子，一樣的道理，要製作網站我們也不用所有功能都自己套用套件開發，有些服務或功能在大部分網站或是手機應用程式的服務上都是必備的功能，這邊Firebase就是一個很好的解決方案．</p>
<p>對於Firebase有興趣的朋友可以參考另外一篇的<a href="http://blackie1019.github.io/2017/04/19/ASP-NET-Core-play-with-Firebase/">ASP.NET Core play with Firebase</a>介紹．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://cloud.google.com/appengine/docs/flexible/dotnet/quickstart?hl=zh-TW" target="_blank" rel="external">Quickstart for .NET in the App Engine Flexible Environment</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/cloud-app-engine-aspnetcore/" target="_blank" rel="external">Deploy an ASP.NET Core app to App Engine</a></li>
<li><a href="https://www.google.com.tw/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;ved=0ahUKEwifhLmx583TAhWEXLwKHYgHBOMQjhwIBQ&amp;url=https%3A%2F%2Fwww.slideshare.net%2Fpeihsinsu%2Fgoogle-app-engine-gae&amp;psig=AFQjCNF34tP6rm0UkKN-N0nXTGIZE3mKJg&amp;ust=1493697617594049" target="_blank" rel="external">Google App Engine (GAE) 演進史</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前為大家介紹了GAE的 Standard Environment ，這次將介紹如何實際將ASP.NET Core MVC專案放置在GAE的 &lt;em&gt;Flexible Environment&lt;/em&gt; 環境運行。&lt;/p&gt;
    
    </summary>
    
      <category term="Google Cloud Platform" scheme="https://blackie1019.github.io/categories/Google-Cloud-Platform/"/>
    
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term="GCP" scheme="https://blackie1019.github.io/tags/GCP/"/>
    
      <category term="GAE" scheme="https://blackie1019.github.io/tags/GAE/"/>
    
      <category term="Google App Engine" scheme="https://blackie1019.github.io/tags/Google-App-Engine/"/>
    
      <category term="Container" scheme="https://blackie1019.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core Create New Project Template</title>
    <link href="https://blackie1019.github.io/2017/04/27/ASP-NET-Core-Create-New-Project-Template/"/>
    <id>https://blackie1019.github.io/2017/04/27/ASP-NET-Core-Create-New-Project-Template/</id>
    <published>2017-04-27T10:07:36.000Z</published>
    <updated>2017-05-11T11:24:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何新增一個專案樣板(Project Template)並新增至 .NET CLI 中方便我們重複使用</p>
<a id="more"></a>
<p><img src="header.png" alt="header"></p>
<p>建立一個新專案往往都會有些習慣性會加入的套件或是修改，如果每次都要重複一樣的步驟是很煩人的．如網站開發常常會用到的資料儲存的套件，或是API開發會需要使用到的說明與測試套件等．</p>
<p>而在.NET Core的部份可透過.NET CLI幫忙建立客製化的專案樣板，達到輕鬆重複建立同類型新專案環境的需求．而在.NET Core的部份可透過.NET CLI幫忙建立客製化的專案樣板，達到輕鬆重複建立同類型新專案環境的需求．</p>
<p>這邊我們將示範建立一個Web API專案，並加入 <a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="external">Swashbuckle.AspNetCore</a> , <a href="https://github.com/mongodb/mongo-csharp-driver" target="_blank" rel="external">MongoDB.Driver</a> 與 <a href="https://github.com/StackExchange/StackExchange.Redis" target="_blank" rel="external">StackExchange.Redis</a>．並將這樣的專案設定為的新樣板，透過新樣板在建立新專案．</p>
<h2 id="Create-Customize-Project"><a href="#Create-Customize-Project" class="headerlink" title="Create Customize Project"></a>Create Customize Project</h2><p>這邊我們先用Web API的樣板幫我們成立新專案並加入 <em>Swashbuckle.AspNetCore</em> , <em>MongoDB.Driver</em> 與 <em>StackExchange.Redis</em> :</p>
<pre><code>mkdir app || cd app
dotnet new webapi
dotnet add package Swashbuckle.AspNetCore
dotnet add package MongoDB.Driver
dotnet add package StackExchange.Redis
dotnet restore
</code></pre><p>可以看到我們專案有載入以下packages:</p>
<p><img src="structure_dependency.png" alt="structure_dependency"></p>
<p>這邊我們先將Swagger的環境設定好:</p>
<p>Startup.cs<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</div><div class="line"></div><div class="line"><span class="keyword">using</span> Swashbuckle;</div><div class="line"><span class="keyword">using</span> Swashbuckle.AspNetCore.Swagger;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">NetCoreTemplateDemo</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</div><div class="line">                .SetBasePath(env.ContentRootPath)</div><div class="line">                .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>)</div><div class="line">                .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json"</span>, optional: <span class="literal">true</span>)</div><div class="line">                .AddEnvironmentVariables();</div><div class="line">            Configuration = builder.Build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> IConfigurationRoot Configuration &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Add framework services.</span></div><div class="line">            services.AddMvc();</div><div class="line">            services.AddSwaggerGen(c =&gt;</div><div class="line">            &#123;</div><div class="line">                c.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> Info &#123; Title = <span class="string">"My API"</span>, Version = <span class="string">"v1"</span> &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class="line">        &#123;</div><div class="line">            loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">            loggerFactory.AddDebug();</div><div class="line"></div><div class="line">            app.UseMvc();</div><div class="line">            app.UseSwagger();</div><div class="line">            app.UseSwaggerUI(c =&gt;</div><div class="line">            &#123;</div><div class="line">                c.SwaggerEndpoint(<span class="string">"/swagger/v1/swagger.json"</span>, <span class="string">"My API V1"</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接著將網站運行起來</p>
<pre><code>dotnet run
</code></pre><p>我們就可以透過 <a href="http://localhost:5000/swagger/#/" target="_blank" rel="external">http://localhost:5000/swagger/#/</a> 看到以下畫面：</p>
<p><img src="swagger.png" alt="swagger"></p>
<p>到此專案的框架已經準備好，接著我們透過 <em>.NET CLI</em> 幫我們建立樣板</p>
<h2 id="Build-New-Customize-Project-Template"><a href="#Build-New-Customize-Project-Template" class="headerlink" title="Build New Customize Project Template"></a>Build New Customize Project Template</h2><p>開始前先看一下等等要新增資料夾的結構：</p>
<p><img src="structure_folder.png" alt="structure_folder"></p>
<h3 id="dotnet-new-i"><a href="#dotnet-new-i" class="headerlink" title="dotnet new -i "></a>dotnet new -i <template folder=""></template></h3><p>這邊最簡單的做法是透過 <em>.template.config</em> 資料夾並在裡面新增 <em>template.json</em> 的方式建立新樣板結構:</p>
<p>template.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Blackie Tsai"</span>,</div><div class="line">  <span class="attr">"classifications"</span>: [<span class="string">"BK Templates"</span>,<span class="string">"WebAPI"</span>],</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"WebAPI + Swagger + Redis + MongoDB"</span>,</div><div class="line">  <span class="attr">"tags"</span>: &#123;</div><div class="line">    <span class="attr">"language"</span>: <span class="string">"C#"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"identity"</span>: <span class="string">"BK.WebAPI"</span>,</div><div class="line">  <span class="attr">"shortName"</span>: <span class="string">"bkwebapi"</span>,</div><div class="line">  <span class="attr">"guids"</span>: [ <span class="string">"dc46e9be-12d2-43c5-ac94-5c7019d59196"</span> ],</div><div class="line">  <span class="attr">"sourceName"</span>: <span class="string">"BK.WebAPI"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這邊參數可以參考<a href="https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates" target="_blank" rel="external">官方wiki</a>．</p>
<p>接著透過.NET CLI執行以下指令完成安裝，要注意路徑是你的專案路徑:</p>
<pre><code>dotnet new --install /Users/blackie/Desktop/DEV/blackie1019/NetCoreTemplateDemo
</code></pre><p>完成後即可以查看一下目前的專案樣板是否有新增成功：</p>
<p><img src="templates.png" alt="templates"></p>
<p>新增成功後我們即可透過我們的樣板定義的 <em>shortName</em> 來建立新專案</p>
<p><img src="temaple_new_project.png" alt="temaple_new_project"></p>
<h3 id="Remove-Customize-Project"><a href="#Remove-Customize-Project" class="headerlink" title="Remove Customize Project"></a>Remove Customize Project</h3><p>很遺憾與不方便的是目前 <em>.NET CLI</em> 沒有單獨移除的方法，目前能達到的移除效果的指令只有還原，請參考下面：</p>
<pre><code>dotnet new --debug:reinit
</code></pre><p>再次提醒！這會將我們的設定都還原(原先安裝的其他templates也會因為恢復而被移除)，所以使用上要特別注意一下．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blogs.msdn.microsoft.com/dotnet/2017/04/02/how-to-create-your-own-templates-for-dotnet-new/" target="_blank" rel="external">How to create your own templates for dotnet new</a></li>
<li><a href="http://dotnetthoughts.net/create-a-dot-net-new-project-template-in-dot-net-core/" target="_blank" rel="external">Create a dotnet new project template in dotnet core</a></li>
<li><a href="http://rehansaeed.com/custom-project-templates-using-dotnet-new/" target="_blank" rel="external">Custom Project Templates Using dotnet new</a></li>
<li><a href="https://blogs.msdn.microsoft.com/dotnet/2017/04/02/how-to-create-your-own-templates-for-dotnet-new/" target="_blank" rel="external">.NET Blog : How to create your own templates for dotnet new</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何新增一個專案樣板(Project Template)並新增至 .NET CLI 中方便我們重複使用&lt;/p&gt;
    
    </summary>
    
      <category term=".NET" scheme="https://blackie1019.github.io/categories/NET/"/>
    
    
      <category term="C#" scheme="https://blackie1019.github.io/tags/C/"/>
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term=".NET CLI" scheme="https://blackie1019.github.io/tags/NET-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Quick Implement FullScreen and other controls on HLS.JS with Plyr.JS</title>
    <link href="https://blackie1019.github.io/2017/04/26/Quick-Implement-FullScreen-and-other-controls-on-HLS-JS-with-Plyr-JS/"/>
    <id>https://blackie1019.github.io/2017/04/26/Quick-Implement-FullScreen-and-other-controls-on-HLS-JS-with-Plyr-JS/</id>
    <published>2017-04-26T13:54:44.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Plyr.JS 快速的幫HTML5的 video tag支援更多功能並輕鬆客製化介面</p>
<a id="more"></a>
<p>先前有介紹過 <em>HLS.JS</em> 這個套件來協助瀏覽器支援HTML5的video tag 能正常播放HLS格式的影片，今天要來介紹另外一個樣式漂亮且功能強大的套件</p>
<p><img src="plyr.png" alt="plyr"></p>
<h2 id="Plyr-JS-Introduction"><a href="#Plyr-JS-Introduction" class="headerlink" title="Plyr.JS Introduction"></a>Plyr.JS Introduction</h2><p><a href="https://github.com/selz/plyr" target="_blank" rel="external">Plyr.JS</a>是一個輕巧漂亮的HTML5播放器的 <em>video</em> 標籤，這讓我們可以簡單輕鬆的將套件接到目前的網頁中．而它本身也將樣式呈現都放到自己的css檔案內方便我們做調整跟客製化．</p>
<p>以下節錄官方列出來的功能：</p>
<p>Features:</p>
<ul>
<li><em>Accessible</em> - full support for VTT captions and screen readers</li>
<li><em>Lightweight</em> - under 10KB minified and gzipped</li>
<li><em>Customisable</em> - make the player look how you want with the markup you want</li>
<li><em>Semantic</em> - uses the right elements. <input type="range"> for volume and <progress> for progress and well, <button>s for buttons. There’s no <span> or <a href="#"> button hacks</a></span></button></progress></li>
<li><em>Responsive</em> - works with any screen size</li>
<li>HTML <em>Video</em> &amp; <em>Audio</em> - support for both formats</li>
<li><em>Embedded Video</em> - support for YouTube and Vimeo video playback</li>
<li><em>Streaming</em> - support for hls.js, Shaka and dash.js streaming playback</li>
<li><em>API</em> - toggle playback, volume, seeking, and more</li>
<li><em>Events</em> - no messing around with Vimeo and YouTube APIs, all events are standardized across formats</li>
<li><em>Fullscreen</em> - supports native fullscreen with fallback to “full window” modes</li>
<li><em>Shortcuts</em> - supports keyboard shortcuts</li>
<li><em>i18n support</em> - support for internationalization of controls</li>
<li><em>No dependencies</em> - written in “vanilla” JavaScript, no jQuery required</li>
<li><em>SASS</em> and <em>LESS</em> - to include in your build processes</li>
<li>Works with <strong>Bootstrap</strong>.</li>
</ul>
<p>而這邊我們也提到可以結合HLS.JS讓我們的瀏覽器如：Desktop的Chrome 播放HLS格式的影片並套用此播放器的其他功能．</p>
<h2 id="Pyer-JS-HLS-JS"><a href="#Pyer-JS-HLS-JS" class="headerlink" title="Pyer.JS + HLS.JS"></a>Pyer.JS + HLS.JS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'player'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (Hls.isSupported()) &#123;</div><div class="line">    <span class="keyword">var</span> hls = <span class="keyword">new</span> Hls();</div><div class="line">    hls.loadSource(<span class="string">'http://content.jwplatform.com/manifests/vM7nH0Kl.m3u8'</span>);</div><div class="line">    hls.attachMedia(video);</div><div class="line">    hls.on(Hls.Events.MANIFEST_PARSED, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        video.play();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">plyr.setup(video);</div></pre></td></tr></table></figure>
<p>呈現上與預設的HLS.JS的比較如下：</p>
<p><img src="difference.png" alt="difference.png"></p>
<p>有興趣的可以<a href="https://github.com/blackie1019/PlyrHLSDemo" target="_blank" rel="external">參考這個範例</a>．</p>
<p>至於為什麼還要特別用Plyr.JS呢，當你想要的播放功能（如 全螢幕或是自動播放等功能在<em>當前瀏覽器不支援時</em>)或是樣式需要做些調整或是客製化的時候，非常建議大家<strong>在前人的輪子上面製造車子</strong>!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Plyr.JS 快速的幫HTML5的 video tag支援更多功能並輕鬆客製化介面&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blackie1019.github.io/categories/JavaScript/"/>
    
    
      <category term="Chrome" scheme="https://blackie1019.github.io/tags/Chrome/"/>
    
      <category term="HLS" scheme="https://blackie1019.github.io/tags/HLS/"/>
    
  </entry>
  
  <entry>
    <title>Quick Host Static Web on Node.JS</title>
    <link href="https://blackie1019.github.io/2017/04/25/Quick-Host-Static-Web-on-Node-JS/"/>
    <id>https://blackie1019.github.io/2017/04/25/Quick-Host-Static-Web-on-Node-JS/</id>
    <published>2017-04-25T12:40:51.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹如何使用NodeJS的套件幫我們快速建立靜態網頁的Hosting服務，解決 Cross-Origin Resource Sharing (CORS) 問題</p>
<a id="more"></a>
<p>在本機開發靜態網頁時，常常會遇到本機 <em>Cross-Origin Resource Sharing (CORS)</em> 的問題，而這也讓我們時常需要額外起一個Web Hosting服務如Apach, IIS 或是NodeJS來幫我們將服務請求才可以達到簡單的跨網域的請求開發．而今天要分享如何在3分鐘內透過 <em>NodeJS</em> + <em>node-static</em> 這個套件將一個靜態網站服務建立．</p>
<h2 id="What-is-Cross-Origin-Resource-Sharing-CORS"><a href="#What-is-Cross-Origin-Resource-Sharing-CORS" class="headerlink" title="What is Cross-Origin Resource Sharing (CORS)"></a>What is Cross-Origin Resource Sharing (CORS)</h2><p>跨網站(HTTP)請求是指發出請求所在網域不同於請求所指向之網域的 HTTP 請求，例如網域 A（<a href="http://domain-a.com）的網頁載入一個" target="_blank" rel="external">http://domain-a.com）的網頁載入一個</a> <img> 中的 src 屬性內的資料， 它向網域 B（<a href="http://domain-b.com）請求圖片資源（http://domainb.b/image.jpg）。這是我們在網頁當中時長常常使用的一項技術，可載入其他網站資源，像是" target="_blank" rel="external">http://domain-b.com）請求圖片資源（http://domainb.b/image.jpg）。這是我們在網頁當中時長常常使用的一項技術，可載入其他網站資源，像是</a> CSS 樣式表、影像、程式碼等等資源。</p>
<p><img src="CORS_principle.png" alt="CORS_principle"></p>
<p>但基於安全性考量，程式碼所發出的跨站 HTTP 請求受到相當限制，好比說用 XMLHttpRequest 及 Fetch 發出的請求受限於同源政策（same-origin policy），所以 XMLHttpRequest 或 Fetch 只能發送 HTTP 請求到和其所來自的相同的網域．而國際上也有 <em>OWASP</em>在2007年開始關注這樣的一個安全行為，特別將幾個行為視為要加強預防的重點，對此感興趣的可以到 <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">OWASP 官網</a>看一下相關議題．</p>
<p>而 <em>Chrome</em> 預設也會拒絕此行為，這讓我們本機開發變成很麻煩．但我們可以將此權限打開．對於Chrome該如何開此權限跟為什麼要阻擋此行為可以參考之前的<a href="https://blackie1019.github.io/2016/10/04/No-Access-Control-Allow-Origin-header-is-present-on-the-requested-resource/">No Access-Control-Allow-Origin header is present on the requested resource</a>．</p>
<p>接下來我們就要介紹如何快速的建立一個靜態的網頁服務，幫我們解決本機開發的問題．</p>
<h2 id="Node-Package-node-static"><a href="#Node-Package-node-static" class="headerlink" title="Node Package -  node-static"></a>Node Package -  node-static</h2><p><a href="https://github.com/cloudhead/node-static" target="_blank" rel="external">node-static</a>是一個NodeJS的模組，只需將放置靜態資料的目錄與服務監聽的Port設定好，即可快速的建立靜態網頁的服務．</p>
<p>只需用NPM進行安裝：</p>
<pre><code>npm install --save node-static
</code></pre><p>本身的相依也不多:</p>
<p><img src="dependency.png" alt="dependency"></p>
<p>接著讓我們嘗試用它來解決一個實例．</p>
<h2 id="Facing-Problem-Get-Remote-Video-Resource-from-Local-index-html"><a href="#Facing-Problem-Get-Remote-Video-Resource-from-Local-index-html" class="headerlink" title="Facing Problem : Get Remote Video Resource from Local index.html"></a>Facing Problem : Get Remote Video Resource from Local index.html</h2><p>這邊我們介紹之前的一篇文章<a href="https://blackie1019.github.io/2017/04/02/HLS-js-for-Chrome-Desktop/">hls.js for Chrome Desktop</a>為範例：</p>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">preload</span>=<span class="string">"none"</span> <span class="attr">id</span>=<span class="string">"player"</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/hls.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'player'</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (Hls.isSupported()) &#123;</div><div class="line">                <span class="keyword">var</span> hls = <span class="keyword">new</span> Hls();</div><div class="line">                hls.loadSource(<span class="string">'http://content.jwplatform.com/manifests/vM7nH0Kl.m3u8'</span>);</div><div class="line">                hls.attachMedia(video);</div><div class="line">                hls.on(Hls.Events.MANIFEST_PARSED, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    video.play();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)();</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>這邊我們可以看到本機網頁一打開就可以看到 <em>CORS</em>的相關錯誤：</p>
<p><a href="index_error.png">index_error</a></p>
<p>而我們這邊透過安裝完node-static後，新增一個index.js的檔案並加入以下內容：</p>
<p>index.js:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'node-static'</span>);</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Create a node-static server instance to serve the './public' folder</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> <span class="keyword">static</span>.Server(<span class="string">'./index.html'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    request.addListener(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// Serve files!</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        file.serve(request, response);</div><div class="line">    &#125;).resume();</div><div class="line">&#125;).listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure>
<p>當我們新增完後別忘記要幫 <em>package.json</em> 設定指令去啟動服務:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"plyr-hls-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node index.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"blackie (http://blackie1019.github.io)"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"hls.js"</span>: <span class="string">"^0.7.6"</span>,</div><div class="line">    <span class="attr">"node-static"</span>: <span class="string">"^0.7.9"</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>當建立完成後即可透過透過下方指令啟動靜態網頁服務</p>
<pre><code>node start
</code></pre><p>執行畫面如下:</p>
<p><img src="index_success.png" alt="index_success"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP access control (CORS)</a></li>
<li><a href="https://vaadin.com/blog/-/blogs/using-cors-with-vaadin" target="_blank" rel="external">Using CORS with Vaadin</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹如何使用NodeJS的套件幫我們快速建立靜態網頁的Hosting服務，解決 Cross-Origin Resource Sharing (CORS) 問題&lt;/p&gt;
    
    </summary>
    
      <category term="Development&amp;Coding" scheme="https://blackie1019.github.io/categories/Development-Coding/"/>
    
    
      <category term="Web Hosting" scheme="https://blackie1019.github.io/tags/Web-Hosting/"/>
    
      <category term="NodeJS" scheme="https://blackie1019.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code Find and Replace with New Line</title>
    <link href="https://blackie1019.github.io/2017/04/24/Visual-Studio-Code-Find-and-Replace-with-New-Line-r-or-n/"/>
    <id>https://blackie1019.github.io/2017/04/24/Visual-Studio-Code-Find-and-Replace-with-New-Line-r-or-n/</id>
    <published>2017-04-24T15:38:43.000Z</published>
    <updated>2017-05-11T11:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹使用VSCode如何包括換行(new line)進行查詢</p>
<a id="more"></a>
<p>我們常常會有情況要做大量的文字置換，有可能是一個檔案裡面的多個地方，也有可能是一個特定資料夾內散落的特定副檔名(extension)檔案, 當然有時我們也會不管檔名是什麼只要有包含的內容全部換掉就對了．</p>
<p>VSCode 支援了上述所有情境的工作，而這次要為大家介紹如何在遍尋(find)與置換(replace)時能包含換行(new line)與其他文字．</p>
<p>例如：我們想將下圖 <em>categories</em> 下的 ASP.NET 換成 .NET，但是要避免置換到 <em>tags</em> 下的 ASP.NET</p>
<p><img src="single_file_before.png" alt="single_file_before"></p>
<p>先直接來看結果：</p>
<h2 id="How-To-Do-It"><a href="#How-To-Do-It" class="headerlink" title="How To Do It"></a>How To Do It</h2><p>VSCode 在 <a href="https://code.visualstudio.com/updates/June_2016#_multiline-find" target="_blank" rel="external">1.3</a>支援多行的Regular Expression．</p>
<p>這邊我們可以用下面快速指令開啟單一檔案的遍尋與置換工具列：</p>
<ul>
<li>Windows 按下 <em>Ctrl+e</em></li>
<li>Mac 按下 <em>Cmd+e</em></li>
</ul>
<p>當查詢工具列出來後我們貼上下面內容並將 <em>Use Regular Expression</em> 這選項勾起來進行全文查詢 ：</p>
<pre><code>(categories:)\r?\n- ASP.NET
</code></pre><p><img src="single_file.png" alt="single_file"></p>
<p>當然這個方法我們也能用在右方的Search功能上進行整個目錄的遍尋：</p>
<p><img src="multiple_files.png" alt="multiple_files"></p>
<p>但當我們用上面這個指令更換的時候會發現我們的確更換到我們想要更換的區段，但結果好像不如預期，這此我們可以將指令改為：</p>
<pre><code>(categories:)\n- ASP.NET
</code></pre><p>這邊的\n是因為筆者的mac換行用\n，替換的文字記得也改為\n．如此即可</p>
<pre><code>categories:\n- .NET
</code></pre><p>而目前如果在Search啟用 <em>Use Regular Expression</em> 只能針對有<strong>開啟</strong>的檔案進行查詢，這邊實務上建議大家可以先關閉<em>Use Regular Expression</em>將原本要替換的文字作統一更改，如：<em>- ASP.NET</em> 我們統一改為 <em>- ASP.NET.</em> ，當我們按下更新後 VSCode 會把相關的檔案都開啟並置換，此時我們可以再將文字從 <em>- ASP.NET.</em> 改回 <em>- ASP.NET</em>．</p>
<p>接著再執行上一個段落的指令就可以成功將所有開啟檔案做遍尋了</p>
<p>如此即可有效的更換在專案資料內一次批次做替換了</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/Microsoft/vscode/issues/313" target="_blank" rel="external">VSCode - Find does not match multi-line regex strings</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹使用VSCode如何包括換行(new line)進行查詢&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Google Spreadsheet Detecting Duplicate Item</title>
    <link href="https://blackie1019.github.io/2017/04/23/Google-Spreadsheet-Detecting-Duplicate-Item/"/>
    <id>https://blackie1019.github.io/2017/04/23/Google-Spreadsheet-Detecting-Duplicate-Item/</id>
    <published>2017-04-23T08:48:10.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享如何在 Google Spreadsheet 設定函示，針對Column檢查有無重複的值</p>
<a id="more"></a>
<p>今天假設幫社團開一個表單來讓各位社員填寫籃球球衣球褲的購買登記，其中號碼這個欄位不能重複</p>
<p>先看結果如下:</p>
<p><img src="preview.gif" alt="preview"></p>
<p>實際成品<a href="https://docs.google.com/spreadsheets/d/1zDnU-_eIQJyYhcRvd8kxtUCQ2vM0CvmRxLs-Fh2Gwx0/edit?usp=sharing" target="_blank" rel="external">請參考</a></p>
<h2 id="Add-Dropbox-by-Data-Validation"><a href="#Add-Dropbox-by-Data-Validation" class="headerlink" title="Add Dropbox by Data Validation"></a>Add Dropbox by Data Validation</h2><p>新增下拉資料到Sheet2，如下:</p>
<p><img src="setup_6.png" alt="setup_6"></p>
<p>接著針對要提供下拉的欄位按住滑鼠右鍵新增<em>Data validation</em>:</p>
<p><img src="setup_1.png" alt="setup_1"></p>
<p>在<em>Criteria</em>中下拉選擇<em>List from a range</em>，並填入要提供的下拉資料區間。這可以選擇的填入help text來幫我們提醒使用者:</p>
<p><img src="setup_2.png" alt="setup_2"></p>
<p>在頁面上就可以看到下拉已經出現並會跳出指定的提醒文字:</p>
<p><img src="setup_4.png" alt="setup_4"></p>
<p>接著繼續完成剩下的下拉選項的設定，這可以試著勾選<em>Reject input</em>來禁止使用者輸入:</p>
<p><img src="setup_3.png" alt="setup_3"></p>
<p>完成後即可看到這部分的資料只能從下拉選項中選擇:</p>
<p><img src="setup_5.png" alt="setup_5"></p>
<h2 id="Detecting-Duplicate-Value-in-Column"><a href="#Detecting-Duplicate-Value-in-Column" class="headerlink" title="Detecting Duplicate Value in Column"></a>Detecting Duplicate Value in Column</h2><p>接下來用<em>countif</em>這個函式來幫我判斷特定欄位是否有重複的值:</p>
<pre><code>=countif(C4:C41,C4)&gt;1
</code></pre><p>這邊當放上個寫法後就會去抓指定欄位是否有大於1的累加值，如果答案有重複的則會顯示<em>TRUE</em>，如果沒有重複則會顯示<em>FALSE</em></p>
<h2 id="Add-Conditional-Formatting-for-Column"><a href="#Add-Conditional-Formatting-for-Column" class="headerlink" title="Add Conditional Formatting for Column"></a>Add Conditional Formatting for Column</h2><p>這邊將顯示加上樣式以便區分不同的狀態:</p>
<p><img src="setup_7.png" alt="setup_7"></p>
<p>在這邊可以透過<em>Format cells if</em>選擇該欄資料(cell)的判斷規則:</p>
<p><img src="setup_8.png" alt="setup_8"></p>
<p>下拉選擇<em>Text contains</em>就會針對有包含該特定文字的cell進行該樣式的套用:</p>
<p><img src="setup_9.png" alt="setup_9"></p>
<p>完成後看一下剛剛的設定，如下(值為TRUE時給予紅色代表錯誤):</p>
<p><img src="setup_10.png" alt="setup_10"></p>
<p>接著重複剛剛的步驟把正確時(值為FALSE給予湖水綠色代表正確)的樣式也新增套用上去，即可看到無重複資料時的結果:</p>
<p><img src="setup_11.png" alt="setup_11"></p>
<p>有重複資料時的結果</p>
<p><img src="setup_12.png" alt="setup_12"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://support.google.com/docs/answer/3256550?hl=zh-Hant" target="_blank" rel="external">COUNTIFS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享如何在 Google Spreadsheet 設定函示，針對Column檢查有無重複的值&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="Google Spreadsheet" scheme="https://blackie1019.github.io/tags/Google-Spreadsheet/"/>
    
  </entry>
  
  <entry>
    <title>Visaul Studio Code Quick Blame with GitLens</title>
    <link href="https://blackie1019.github.io/2017/04/22/Visaul-Studio-Code-Quick-Blame-with-GitLens/"/>
    <id>https://blackie1019.github.io/2017/04/22/Visaul-Studio-Code-Quick-Blame-with-GitLens/</id>
    <published>2017-04-22T00:47:04.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用GitLens套件，讓你的VSCode一秒看懂現在的程式碼是充滿靈性還是充滿鬼話</p>
<a id="more"></a>
<p>現在多半我們在寫程式或是文件的時候都是多人協同工作或是使用版本管控系統(Version Control System)，檔案內容多又雜就不用多說了，常常會發生有一段程式碼或是文章區塊你怎麼看都看不懂，當下只有一種<em>這是誰寫的啊</em>的感覺，而後我們通常都一段謾罵或是嘈諷後才發現好像是自己種下的希望種子(QQ)．</p>
<p>為了讓我們可以快速Blame到目前程式碼是誰在什麼時候commit的，理由又是什麼，今天就來介紹<em>GitLens</em>這個套件給大家</p>
<h2 id="GitLens-for-VSCode"><a href="#GitLens-for-VSCode" class="headerlink" title="GitLens for VSCode"></a>GitLens for VSCode</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="external">GitLens</a> 的安裝請參考之前的文章，或是 VS Code Quick Open (⌘+P)輸入<em>ext install gitlens</em> 即可．</p>
<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><p>此套件主要是建立在<em>git blame</em>的功能上，而當我們使用Git作為我們版本管控的工具後，你可以用 git blame 來檢視標注該檔案，查看檔案的每一行分別是由哪一位人員在哪一天修改的commit進去版控的。</p>
<pre><code>git blame &lt;targetfile&gt;
</code></pre><p><img src="git_blame.png" alt="git_blame"></p>
<p>如上我們就可以看出各別誰commit的，但這真的很難一目了然…</p>
<h2 id="How-to-Use-GitLens"><a href="#How-to-Use-GitLens" class="headerlink" title="How to Use GitLens"></a>How to Use GitLens</h2><p>而如果我們安裝了GitLens則變成簡單多了，我們先看還沒安裝前這篇文章的在VSCode的呈現</p>
<p><img src="before.png" alt="before"></p>
<p>安裝後</p>
<p><img src="after.png" alt="after"></p>
<p>是不是Magic! </p>
<p>安裝完後，我們編輯器的每個file的右上角也會多出一個<em>Toggle Blame Annotation</em>來幫助我們展開各行詳細的commit區塊:</p>
<p><img src="test.gif" alt="test"></p>
<p>當然還有更多功能，就麻煩上官網去發掘並給予五星回饋肯定作者的貢獻吧!</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://git-scm.com/book/zh-tw/v1/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E5%81%9A-Debug" target="_blank" rel="external">Git 工具 - 使用 Git 做 Debug</a></li>
<li><a href="http://www.cnblogs.com/lanxuezaipiao/p/3552805.html" target="_blank" rel="external">每一行代码都有记录—如何用git一步步探索项目的历史</a></li>
<li><a href="https://www.youtube.com/watch?v=_uOpqobNzWY" target="_blank" rel="external">強大的 Git Extension: GitLens - VS Code Extension | How-To | Editor 編輯者 #5</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用GitLens套件，讓你的VSCode一秒看懂現在的程式碼是充滿靈性還是充滿鬼話&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://blackie1019.github.io/categories/Tool/"/>
    
    
      <category term="VSCode" scheme="https://blackie1019.github.io/tags/VSCode/"/>
    
      <category term="Git" scheme="https://blackie1019.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core MVC play with Google App Engine - Standard Environment</title>
    <link href="https://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/"/>
    <id>https://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/</id>
    <published>2017-04-21T12:44:48.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>先前為大家介紹了Google Cloud Platform，這次將介紹如何實際將ASP.NET Core MVC專案放置在Google App Engine(GAE)的Standard環境運行。</p>
<a id="more"></a>
<p>先前分享過一篇<a href="http://blackie1019.github.io/2017/04/11/Google-Cloud-Platform-Introduction/">Google Cloud Platform Introduction</a>為大家介紹了整個GCP家族的架構與建立一個基本的 Google Compute Engine 並在上面透過 Virtual Machine(VM)的方式運行的Windows Server + IIS + ASP.NET Framework的網頁應用程式。</p>
<p>不同於前一篇我們使用VM的方式將應用程式環境整個架設起來，我們這次將透過 Google Cloud Shell 與 Google App Engine(GAE) 架設一個輕量環境的 ASP.NET Core 網頁應用程式。</p>
<h2 id="Google-App-Engine"><a href="#Google-App-Engine" class="headerlink" title="Google App Engine"></a>Google App Engine</h2><p>GCP的服務基本上從需要較多環境/設備管理控制的IaaS到平台服務開通就可以使用的PaaS都有提供對應的服務:</p>
<p><img src="Iaas_Paas.png" alt="Iaas_Paas"></p>
<p>這邊我們先簡單看一下IaaS, PaaS甚至SaaS的差別:</p>
<ul>
<li><p><em>IaaS</em>: Infrastructure as a Service - 基礎設施即服務</p>
<p>  提供基礎架構的雲端服務，包含硬體資源給客戶，包括：運算 技術、儲存、網路、…等等資源。用於安全的使用環境並給予合理的運算機性能、儲存機能、網路環境等基礎建設。</p>
</li>
<li><p><em>PaaS</em>: Platform as a Service - 平台即服務</p>
<p>  PaaS在網上提供各種開發和分發應用的解決方案，比如虛擬伺服器和作業系統。這節省了在硬體上的費用，也讓之間的合作變得更加容易。包括網頁應用管理，應用設計，應用虛擬主機，存儲，安全以及應用開發協作工具等。</p>
</li>
<li><p><em>SaaS</em>：Software-as-a-Service - 軟體即服務</p>
<p>  一種通過Internet提供軟體的模式，用戶不用再購買軟體，而改用向提供商租用基於Web的軟體，如<a href="https://gsuite.google.com/intl/zh-tw/" target="_blank" rel="external">G Suit</a></p>
</li>
</ul>
<p>但本篇討論只會談到GCP上的PaaS的Google App Engine(GAE)。</p>
<p>Google在2008年推出GAE，讓開發者可以在遵循一定的開發原則/規則後，可以透過App Engine的工具來部署到GCP上，讓開發者可以不用受到開發以外其他雜事的煩惱(如部署、監控、維運等等的)。</p>
<p>目前 GAE 服務面向已經可以整合開發者整個完整的開發生命流程，包含開發、測試、部署，甚至協市場的AB測試、版本更新的發佈等動作，都可以完整的在GAE上運作。</p>
<p>GAE本身可以分為兩個, <em>Standard Environment</em> 與 <em>Flexible Environment</em>:</p>
<ul>
<li><p><em>Standard Environment</em></p>
<p>  Standard Environment是延續GAE一開始推出的語言與功能持續加強各項功能的PaaS服務，目前支援Java 7, Python 2.7, PHP 5.5, Go 1.6 等四種程式語言與版本，透過Google建置好的平台可以快速的達到自動的橫向擴展，並提供即時的監控資料。</p>
<p>  另外，<strong>Standard Environment提供每天28個instance hour(s)的免費額度</strong>，還有其他的的免費額度優惠，讓開發者可以在免費的範圍內開發與測試自己的應用程式，其他詳情請參考<a href="https://cloud.google.com/appengine/quotas" target="_blank" rel="external">https://cloud.google.com/appengine/quotas</a></p>
</li>
<li><p><em>Flexible Environment</em></p>
<p>  Flexible Environment主要是想要提供有別於標準環境(Standard Environment)的限制，但是又具備大部份標準環境的自動化功能，透過Flexible Environment還可以進一步的區分成Standard Runtime以及Custom Runtime彈性的配置我們的環境。</p>
<p>  這邊無論是哪一個Runtime，都是以Container的方式來運行，並將環境封裝後可以透過GCP來運行.</p>
</li>
</ul>
<p>簡單來講Standard提供了一個封裝好的環境，提供相對便宜的價格，而Flexible則提供了我們自己可以克制的環境，但價格上面會稍微貴一點。</p>
<p>這邊價格都以US來做比較可以參考下圖:</p>
<ul>
<li><em>Standard environment instances</em>:</li>
</ul>
<table>
<thead>
<tr>
<th>Instance class</th>
<th>Cost per hour per instance</th>
</tr>
</thead>
<tbody>
<tr>
<td>B1</td>
<td>$0.05</td>
</tr>
<tr>
<td>B2</td>
<td>$0.10</td>
</tr>
<tr>
<td>B4</td>
<td>$0.20</td>
</tr>
<tr>
<td>B4_1G</td>
<td>$0.30</td>
</tr>
<tr>
<td>B8</td>
<td>$0.40</td>
</tr>
<tr>
<td>F1</td>
<td>$0.05</td>
</tr>
<tr>
<td>F2</td>
<td>$0.10</td>
</tr>
<tr>
<td>F4</td>
<td>$0.20</td>
</tr>
<tr>
<td>F4_1G</td>
<td>$0.30</td>
</tr>
</tbody>
</table>
<ul>
<li><em>Flexible environment instances</em>:</li>
</ul>
<table>
<thead>
<tr>
<th>Resource</th>
<th>Unit</th>
<th>Unit cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>vCPU</td>
<td>per core hour</td>
<td>$0.0526</td>
</tr>
<tr>
<td>Memory</td>
<td>per GB hour</td>
<td>$0.0071</td>
</tr>
<tr>
<td>Persistent disk</td>
<td>per GB per month</td>
<td>$0.0400</td>
</tr>
</tbody>
</table>
<p>這邊可以看到Standard的計算就很簡單了，單看你在什麼規模執行多久，但Flexible就需要針對使用的資源做計算了。</p>
<p>詳細的計算可以參考<a href="https://cloud.google.com/products/calculator/#tab=app-engine" target="_blank" rel="external">Google Cloud Platform Pricing Calculator</a>。</p>
<h2 id="Standard-Environment-with-ASP-NET-Core"><a href="#Standard-Environment-with-ASP-NET-Core" class="headerlink" title="Standard Environment with ASP.NET Core"></a>Standard Environment with ASP.NET Core</h2><h3 id="Google-Cloud-Shell"><a href="#Google-Cloud-Shell" class="headerlink" title="Google Cloud Shell"></a>Google Cloud Shell</h3><p><em>Google Cloud Shell</em>是一個協助開發者在任何瀏覽器中使用命令行管理基礎設施和應用的<em>免費工具</em>。有了Google Cloud Shell我們就不用擔心當我們起一個App Engine時需要先安裝什麼工具才可以將我們的程式部屬上去，因為他支援了我們常見的命令列工具。</p>
<p>除了Google Cloud SDK已經幫我們載入:</p>
<p><img src="used-console.png" alt="used-console"></p>
<p>其他我們會用到的也幫忙我們準備好了:</p>
<p><img src="shell_support.png" alt="shell_support"></p>
<p>以下是他的特色:</p>
<ul>
<li>是一個暫時的Compute Engine <a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#virtual_machine_instance" target="_blank" rel="external">virtual machine instance</a></li>
<li>支援網頁瀏覽器直接開啟使用</li>
<li>Cloud Shell保留5G的空間來讓我們放資料在Home資料夾內</li>
<li>預先裝載了Google Cloud SDK 與<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#tools" target="_blank" rel="external">其他tools</a></li>
<li>預先裝載了<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#language_support" target="_blank" rel="external">多種語言的SDK</a>，包含Java, Go, Python, Node.js, PHP, Ruby與ASP.NET Core(Beta)</li>
<li>提供<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#web_preview" target="_blank" rel="external">Web Perview</a>功能可直接連接至該Instance當前對外的IP</li>
<li>內建 <a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#authorization" target="_blank" rel="external">authorization</a> 去整合 Cloud Platform Console 專案(projects) and 資源(resources)</li>
</ul>
<p>其他細節可以參考官方文件<a href="https://cloud.google.com/shell/docs/?hl=zh-TW" target="_blank" rel="external">Google Cloud Shell</a>，而當前開發工具與語言支援可以參考<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#tools" target="_blank" rel="external">Available tools</a>與<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#language_support" target="_blank" rel="external">Language support</a>。以下節錄目前當前的內容:</p>
<h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p>目前預載的工具:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Tool</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linux shell interpreters</td>
<td>bash, sh</td>
</tr>
<tr>
<td>Linux utilities</td>
<td>Standard Debian system utilities</td>
</tr>
<tr>
<td>Google SDKs and tools</td>
<td>Google App Engine SDK, Google Cloud SDK including the gcloud command-line tool, gsutil for Cloud Storage</td>
</tr>
<tr>
<td>Text editors</td>
<td>Emacs, Vim, Nano</td>
</tr>
<tr>
<td>Build and package tools</td>
<td>Gradle, Make, Maven, npm, nvm, pip</td>
</tr>
<tr>
<td>Source control tools</td>
<td>Git, Mercurial</td>
</tr>
<tr>
<td>Additional tools</td>
<td>Dockerm, iPython, MySQL client, gRPC compiler</td>
</tr>
</tbody>
</table>
<h4 id="SDKs"><a href="#SDKs" class="headerlink" title="SDKs"></a>SDKs</h4><p>是目前支援的SDK:</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java</td>
<td>JRE/JDK 1.7 and 1.8</td>
</tr>
<tr>
<td>Go</td>
<td>1.5</td>
</tr>
<tr>
<td>Python</td>
<td>2.7</td>
</tr>
<tr>
<td>Node.js</td>
<td>v0.12.2, v4.7.0 and v6.9.2 (use nvm to switch versions)</td>
</tr>
<tr>
<td>Ruby</td>
<td>2.2.3</td>
</tr>
<tr>
<td>PHP</td>
<td>5.6.14</td>
</tr>
<tr>
<td>.NET</td>
<td>1.0.0-preview2</td>
</tr>
</tbody>
</table>
<h3 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h3><p><a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="external">ASP.NET Core</a> 是一個新的跨平台的開源專案可以讓我們用C#建置各種應用程式，包含網頁應用, API服務與執行在不同平台的一般應用程式等。</p>
<h4 id="NET-Core-Command-Line-Interface-CLI"><a href="#NET-Core-Command-Line-Interface-CLI" class="headerlink" title=".NET Core Command Line Interface(CLI)"></a>.NET Core Command Line Interface(CLI)</h4><p><a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/" target="_blank" rel="external">.NET Core CLI</a> 是新的跨平台工具，協助我們開發與建置ASP.NET Core的應用程式，透過該工具我們就可以輕鬆地建立專案,還原專案套件,執行測試案例與發佈專案。<br>這邊我們將在Google Cloud Shell 上面透過 <em>dotnet</em> 這樣的指令幫我們呼叫相關功能，建置一個MVC網站。對於 <em>dotnet</em> 想了解更多可以在輸入dotnet -h來查看:</p>
<p><img src="google_cloud_shell_dotnet.png" alt="google_cloud_shell_dotnet.png"></p>
<p>細節可以參考官方社群介紹<a href="https://docs.microsoft.com/zh-tw/dotnet/articles/core/tools/" target="_blank" rel="external">.NET Core 命令列介面 (CLI) 工具</a>。</p>
<h3 id="Create-First-App-in-App-Engine-Standard-Environment"><a href="#Create-First-App-in-App-Engine-Standard-Environment" class="headerlink" title="Create First App in App Engine Standard Environment"></a>Create First App in App Engine Standard Environment</h3><p>這邊我們快速地開啟Google Cloud Shell後可以輸入以下指令建置一個ASP.NET Core MVC專案:</p>
<pre><code>mkdir app ; cd app
dotnet new -t web
</code></pre><p><img src="new_project.png" alt="new_project"></p>
<p>這邊將專案建置後我們可以透過nuget將我們ASP.NET Core的所有相依套件重新載入至目前目錄中:</p>
<pre><code>dotnet restore
</code></pre><p><img src="new_project_restore.png" alt="new_project_restore"></p>
<p>當還原完成後我們即可啟動該程式</p>
<pre><code>dotnet run
</code></pre><p>透過Google Shell的左上角的Web Preview功能立刻連結至該頁面看我們建置的MVC網站</p>
<p><img src="new_project_run.png" alt="new_project_run"></p>
<p><img src="shell_web_preview.png" alt="shell_web_preview"></p>
<p>最後呈現的頁面與網址如下:</p>
<p><img src="web_preview.png" alt="web_preview.png"></p>
<p>這邊我們可以透過Google Cloud Shell預設的編輯器(editor)來調整檔案內容:</p>
<p><img src="editor_1.png" alt="editor_1"></p>
<p>接著我們可以嘗試修改下面的內容</p>
<p><img src="editor_2.png" alt="editor_2"></p>
<p>由於ASP.NET Core MVC的頁面修改不用重新編譯，所以我們直接刷新頁面就可以看到以下修改:</p>
<p><img src="editor_3.png" alt="editor_3"></p>
<h2 id="補充說明-GAE-Standard-Environment-Support-ASP-NET-Core-1-0-1-Only"><a href="#補充說明-GAE-Standard-Environment-Support-ASP-NET-Core-1-0-1-Only" class="headerlink" title="[補充說明] GAE - Standard Environment Support ASP.NET Core 1.0.1 Only"></a>[補充說明] GAE - Standard Environment Support ASP.NET Core 1.0.1 Only</h2><p>這邊要特別說明一下GCP上的App Engine目前僅支援 <a href="https://github.com/dotnet/core/releases/tag/1.0.1" target="_blank" rel="external">1.0.1</a>而這個版本的對應是.NET Core 1.0.0 與 .NET Core 1.0.0 SDK - Preview 2，是在2016年的9月推出的，有賴於社群的積極貢獻與回饋，在短短的7個月官方就推出了新版的<a href="https://github.com/dotnet/core/releases/tag/1.1.1" target="_blank" rel="external">.NET Core 1.1.1</a>包含了.NET Core 1.1.1 與 .NET Core 1.0.1 SDK．</p>
<p>很遺憾的目前還沒找到可以幫App Engine升級的方法，而支援.NET Core這部分也由於還在Beta所以已經請求官方upgrade到1.1之後的版本．如果想用新版開發的話可以嘗試 GAE的 - Flexible Environment，這部分也會在之後的文章為大家介紹與分享。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2015/12/Google-Cloud-Shell-2016" target="_blank" rel="external">Google Cloud Shell继续免费到2016年底</a></li>
<li><a href="https://cloud.google.com/appengine/pricing" target="_blank" rel="external">App Engine Pricing</a></li>
<li><a href="https://cloud.google.com/appengine/docs" target="_blank" rel="external">Google : App Engine</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/cloud-aspnetcore-cloudshell/#0" target="_blank" rel="external">Build and Launch an ASP.NET Core app from Google Cloud Shell</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前為大家介紹了Google Cloud Platform，這次將介紹如何實際將ASP.NET Core MVC專案放置在Google App Engine(GAE)的Standard環境運行。&lt;/p&gt;
    
    </summary>
    
      <category term="Google Cloud Platform" scheme="https://blackie1019.github.io/categories/Google-Cloud-Platform/"/>
    
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="GCP" scheme="https://blackie1019.github.io/tags/GCP/"/>
    
      <category term="GAE" scheme="https://blackie1019.github.io/tags/GAE/"/>
    
      <category term="Google App Engine" scheme="https://blackie1019.github.io/tags/Google-App-Engine/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core play with Firebase</title>
    <link href="https://blackie1019.github.io/2017/04/20/ASP-NET-Core-play-with-Firebase/"/>
    <id>https://blackie1019.github.io/2017/04/20/ASP-NET-Core-play-with-Firebase/</id>
    <published>2017-04-19T23:55:14.000Z</published>
    <updated>2017-05-11T11:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>介紹GCP上的Firebase服務，並介紹實作如何與ASP.NET Core整合</p>
<a id="more"></a>
<p>Firebase原本是2011年開始提供雲端服務的一間公司，主要是考慮到建立網頁或手持裝置的軟體需要後端的搭配才能正式推出，為了降低後端的依賴並提供幾乎相同的基本功能而誕生的一個產品。</p>
<p>隨著行動化開發的風潮在2014年被Google收購，在2016年5月的Google IO大會上推出收購新版網頁管理介面與新的SDK類別庫，並推出多項新的功能，如分析、雲端訊息、檔案儲存、測試平台等創新功能，讓我們開發Mobile APP更加方便。</p>
<p>今天在介紹Firebase的同時，也會透過<em>FirebaseDatabase.net</em>實作與<em>ASP.NET Core</em>的整合來感受一下Firebase的<em>Realtime Database</em>功能</p>
<p><img src="header.png" alt="header.png"></p>
<h2 id="Firebase-Introduction"><a href="#Firebase-Introduction" class="headerlink" title="Firebase Introduction"></a>Firebase Introduction</h2><p>Firebase 是一個同時支援 Android、iOS 及網頁的 app 雲端開發平台，協助 app 開發者在雲端快速建置後端服務，提供即時資料庫，有效縮短應用程式的開發時間，並幫助開發者更專注在本身應用程式(前端網頁與行動應用程式或是任何獨立且面相使用者的應用程式)的優化．</p>
<p><img src="firebase_intro.jpg" alt="firebase_intro"></p>
<p>Google目前免費開放使用Firebase的服務，不論是網頁、應用系統或目前最熱門的手機，都能透過Firebase所提供的API儲存或讀取在雲端上的資料，開發人員不需要自己建置資料庫與設計伺服器端的程式，就能快速地讓自己的應用程式能夠將資料儲存在雲端上。</p>
<p><img src="Firebase_mobile.png" alt="Firebase_mobile"></p>
<p>想知道透過Firebase能實際做到什麼功能可以參考官方的<a href="https://firebase.google.com/customers/" target="_blank" rel="external">Case Studies</a></p>
<p>Firebase<a href="https://firebase.google.com/docs/" target="_blank" rel="external">目前提供的功能</a>，依據不同層面可以分為以下功能：</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ul>
<li>Analytics<br>  提供行動數據分析。</li>
</ul>
<p>而這邊很有趣的一點，如果你的app有使用<em>Google Analytics(GA)</em>的朋友，Google 官方則是<a href="https://support.google.com/analytics/answer/2587087?hl=en" target="_blank" rel="external">建議改用Firebase來取代Google Analytics</a>，兩者的比較可以參考下表整理:</p>
<table>
<thead>
<tr>
<th>Firebase Analytics</th>
<th>Google Analytics 360</th>
</tr>
</thead>
<tbody>
<tr>
<td>Event-based data collection model, designed specifically for apps</td>
<td>Screenview/pageview data collection model</td>
</tr>
<tr>
<td>Free, unlimited event reporting</td>
<td>Analytics 360 hit volume limits and pricing apply to all data that is sent to Analytics 360 from websites or apps.</td>
</tr>
<tr>
<td>Integrated feature of Firebase, Google’s mobile developer platform</td>
<td>Standalone analytics product, part of Google Analytics 360 Suite</td>
</tr>
<tr>
<td>Automatic measurement of “first open”, in-app purchase, and other key events</td>
<td>Developer must explicitly initialize screenview tracking and manually instrument events in the app</td>
</tr>
<tr>
<td>No roll-up of multiple apps</td>
<td>Roll-up properties (including roll-up of both web and mobile app properties)</td>
</tr>
<tr>
<td>Not covered under Analytics 360 SLAs</td>
<td>Covered under Analytics 360 SLAs</td>
</tr>
</tbody>
</table>
<p>如果有興趣感受一下差異的可以看看這個：</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/tb2GZ3Bh4p8" frameborder="0" allowfullscreen></iframe>

<p>至於選擇上的推薦，小弟是覺得還是要秉持<em>基金投資有賺有賠，申辦前請先詳讀公開說明書</em>的方式建議大家再次看看Firebase的<a href="https://firebase.google.com/pricing/" target="_blank" rel="external">收費方式</a>與<a href="https://firebase.google.com/docs/analytics/" target="_blank" rel="external">SDK細節</a>才做決定。</p>
<p><em>但如果沒有價格或細節的考量，當然是趕快換去Firebase Analytics!</em></p>
<h3 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h3><p>除了行動分析，Firebase這邊也提供了web, mobile app或任一面向使用者的應用程式可能所需的基礎功能:</p>
<ul>
<li><p>Cloud Messaging</p>
<p>  在網頁上即可送出雲端通知或訊息至裝置中(Push notification)，可用在測試或是對所有上線的裝置送出通知或訊息。</p>
</li>
<li><p>Authentication</p>
<p>  提供身分驗證的功能</p>
</li>
<li><p>Realtime Database</p>
<p>  一個雲端 NoSQL 資料庫，使用 JSON 格式來儲存，當各裝置連上資料庫時可進行同步也可支援APP離線使用，等到連上線時才做更新(Offline)。</p>
</li>
<li><p>Cloud Storage</p>
<p>  儲存實體資料，可以把實體資料(圖檔，設定檔，文字檔或影音檔等等)存放置雲端</p>
</li>
<li><p>Cloud Functions</p>
<p>  可以動態的執行一段你的後段程式碼，這服務其實就是Serverless的實作，你不用管理或是考量何時需要擴充硬體，只需要將程式碼放上即可使用。有興趣的朋友可以參考這個<a href="https://youtu.be/vr0Gfvp5v1A" target="_blank" rel="external">影片介紹</a></p>
</li>
<li><p>Hosting Web</p>
<p>  一個CDN服務，可以將我們的靜態網頁放置全球各地的Edge Location，提升我們連結至該網頁時的速度。</p>
</li>
<li><p>Test Lab</p>
<p>  可以透過雲端服務連結實體裝置來測試你的應用程式，Test Lab已經在主機端接好一大堆一大堆一大堆實體Android 應用程式，並透過雲端服務的方式讓你將應用程式可以以服務的方式在上面進行測試，並同時取得你的測試結果與執行的log紀錄等。此服務如同<a href="https://aws.amazon.com/tw/device-farm/" target="_blank" rel="external">AWS Device Farm</a>的功能，但Test Lab目前尚未提供iOS裝置是比較尷尬的。</p>
</li>
</ul>
<h3 id="Grow"><a href="#Grow" class="headerlink" title="Grow"></a>Grow</h3><ul>
<li><p>Notifications</p>
<p>  不同於Cloud Messaging有提供client與server APIs來呼叫使用。Notification就是一個工具來幫我們排程的發送推播訊息並作相對的管理。這邊從<a href="http://stackoverflow.com/questions/37338560/whats-the-difference-between-firebase-cloud-messaging-firebase-notifications" target="_blank" rel="external">Stack Overflow</a>上面找到一篇不錯的解釋:</p>
<ul>
<li><em>Firebase Cloud Messaging</em> is the library that you need to use in your application to receive cloud messages. It includes client APIs (multi-platform) to receive messages, and server APIs (HTTP and XMPP) to send messages.</li>
<li><em>Firebase Notifications</em> is the tool integrated in the Firebase Console to schedule cloud messages. This also includes the integration with Firebase Analytics to target analytics-based audiences and track opening and conversion events.</li>
</ul>
</li>
<li><p>Remote Config</p>
<p>  可以讓我們用config來控制app的呈現與flow，達到更新config但不用重新下載的功能。</p>
</li>
<li><p>App Indexing</p>
<p>  幫助你將APP整合Google Search，協助你的App在Google Search上面可以正確地被查詢到且直接下載。透過這樣的方式可以提升你的Google Search Indexing(SEO強化)</p>
</li>
<li><p>Dynamic Links</p>
<p>  提供你產生一個單一網址(deep link)，你可以將你的原本的URL透過該單一網址做操作。Dynamic Links 可根據其打開的平台而呈現不同的内容。此外，Dynamic Links還可以跨應用程式的安装工作。例如:用户打開一個Dynamic Link但没有安装指定的App，系统則會提示該用户安装指定的應用，並在應用完成安裝之后自動啟動原先訪問該連結該呈現之內容。</p>
</li>
<li><p>Invites</p>
<p>  一個referrals code服務提供給email或是簡訊(SMS)分享使用。而這個服務也能跟Dynamic Links整合，例如:開啟一個特定的連結，他會偵測你有沒有下載該App並在你第一次登入的時候寄送一個通知給你告訴你可以透過email或是SMS分享一個referrals code給你朋友來獲得更多回饋點數。</p>
</li>
<li><p>AdWords</p>
<p>  連結 Firebase 與 AdWords 就能使用各項工具掌握 AdWords 預算帶來應用程式安裝和應用程式內動作的成效。</p>
</li>
</ul>
<h3 id="Earn"><a href="#Earn" class="headerlink" title="Earn"></a>Earn</h3><ul>
<li><p>AdMob</p>
<p>  Google的AdMob 是一個行動廣告聯播服務。如果你想要透過 App 盈利，通常有兩種方式，一種就是將你的 App 設定為付費模式，使用者要下載你的 App 要先付費（例如定價為 30 元或 120 元），而另外一種方式就是免費使用但會有廣告然後放置聯播網廣告賺錢。 </p>
</li>
</ul>
<p>如果對Firebase這邊對於產品營運與大資料分析有什麼幫助可以參考<em>Steven Hsieh</em>的<a href="https://speakerdeck.com/peikangh/intro-to-firebase-analytics" target="_blank" rel="external">Intro to Firebase Analytics</a>與<a href="https://speakerdeck.com/peikangh/firebase-and-bigquery-shi-zhan-fen-xiang" target="_blank" rel="external">Firebase &amp; BigQuery 實戰分享</a></p>
<h2 id="SDK-Support"><a href="#SDK-Support" class="headerlink" title="SDK Support"></a>SDK Support</h2><p>而目前官方支援的SDK分為五種:</p>
<ul>
<li>iOS</li>
<li>Android</li>
<li>Web(RESTful格式)</li>
<li>C++</li>
<li>Unity</li>
</ul>
<p>前面提到的功能也針對不同的SDK有不同的支援，有些服務是不適用全部SDK的。</p>
<p>官方這邊很貼心的幫大家整理了可以使用的framework來讓各領域的專家透入開發，細節可以參考<a href="https://firebase.google.com/docs/libraries/" target="_blank" rel="external"></a></p>
<p>很不幸的是Google還是照舊遺漏了ASP.NET的同胞們(QQ，勿忘我)，所以接下來我們就來介紹實戰Firebase如何與ASP.NET Core使用<em>Web</em>整合的方式來嘗鮮。</p>
<h2 id="Integration-with-ASP-NET-Core"><a href="#Integration-with-ASP-NET-Core" class="headerlink" title="Integration with ASP.NET Core"></a>Integration with ASP.NET Core</h2><p>這邊示範如何讓ASP.NET Core取得Firebase Realtime Database的資料</p>
<h3 id="Firebase-Project-Setup"><a href="#Firebase-Project-Setup" class="headerlink" title="Firebase Project Setup"></a>Firebase Project Setup</h3><p>首先你需要申請一個帳號，這邊帳號我是用GCP的流程申請，請至<a href="https://cloud.google.com/" target="_blank" rel="external">官網</a>申請。</p>
<h4 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h4><p>前往Firebase Console下，並選取指定專案或是透過專案連結進入<a href="https://console.firebase.google.com/project/" target="_blank" rel="external">https://console.firebase.google.com/project/{project-id}}</a></p>
<p><img src="create_01.png" alt="create_01"></p>
<p><img src="create_02.png" alt="create_02"></p>
<p>這邊的專案是GCP專案，所以你可以成立一個獨立的專案或是沿用既有的</p>
<h4 id="Project-Setting-and-Database-Secrets"><a href="#Project-Setting-and-Database-Secrets" class="headerlink" title="Project Setting and Database Secrets"></a>Project Setting and Database Secrets</h4><p>當我們建立新專案以後就可以看到有一個Overview的Project Settings來看專案的相關設定</p>
<p><img src="setting_01.png" alt="setting_01"></p>
<p>Project ID與Database Secrets</p>
<p><img src="setting_02.png" alt="setting_02"></p>
<p><img src="setting_03.png" alt="setting_03"></p>
<p>當我們有這些資料後我們就可以使用framework+ASP.NET Core來對資料做存取</p>
<h4 id="Create-Database-and-Data"><a href="#Create-Database-and-Data" class="headerlink" title="Create Database and Data"></a>Create Database and Data</h4><p>我們可以到Database那邊看一下連結位置與目前資料狀態</p>
<p><img src="firebase_data.png" alt="firebase_data"></p>
<h3 id="ASP-NET-Core-Integration"><a href="#ASP-NET-Core-Integration" class="headerlink" title="ASP.NET Core Integration"></a>ASP.NET Core Integration</h3><p>這邊介紹使用<a href="https://github.com/step-up-labs/firebase-database-dotnet" target="_blank" rel="external">FirebaseDatabase.net</a>這個framework來幫我們<em>ASP.NET Core</em>與<em>ASP.NET</em>透過RESTful的方式操作Firebase上的Realtime Database資源。基本上他已經將Web這層的SDK多做了一層的包裹(wrap)，讓.NET開發的朋友們更好上手。目前有提供ASP.NET Core與ASP.NET的支援。</p>
<h4 id="Create-Solution-and-Projects"><a href="#Create-Solution-and-Projects" class="headerlink" title="Create Solution and Projects"></a>Create Solution and Projects</h4><p>這邊我們一樣建立兩個專案並透過一個.sln檔案把兩個專案連結起來</p>
<pre><code>mkdir FirebaseDemo ; cd FirebaseDemo
mkdir app ; mkdir app.test
dotnet new classlib -f netcoreapp1.1 -o .\app ; dotnet new xunit -o .\app.test
dotnet new sln ; dotnet sln add 
dotnet sln add .\app\app.csproj;dotnet sln add .\app.test\app.test.csproj
</code></pre><h4 id="Add-FirebaseDatabase-net-Reference"><a href="#Add-FirebaseDatabase-net-Reference" class="headerlink" title="Add FirebaseDatabase.net Reference"></a>Add FirebaseDatabase.net Reference</h4><p>再將兩個專案分別加入FirebaseDatabase.net的參考，並執行還原(將第三方套件載入)</p>
<pre><code>dotnet add .\app\app.csproj package FirebaseDatabase.net -v 3.0.0-alpha6
dotnet add .\app.test\app.test.csproj package FirebaseDatabase.net -v 3.0.0-alpha6
dotnet restore
</code></pre><p>並針對測試專案加入app專案參考</p>
<pre><code>cd app.test ; dotnet add reference ..\app\app.csproj
</code></pre><p>當我們執行到這邊基本上專案已經成形如下:</p>
<p><img src="sln.png" alt="sln"></p>
<p>這邊要提醒一下FirebaseDatabase.net的參考要指定版本(因為正式版比較舊不提供當前ASP.NET Core的版本)</p>
<p><img src="nuget_version.png" alt="nuget_version"></p>
<h4 id="Update-Files-Content-and-Add-more-Files"><a href="#Update-Files-Content-and-Add-more-Files" class="headerlink" title="Update Files Content and Add more Files"></a>Update Files Content and Add more Files</h4><p>然後我們再將app\class.cs更名MemberRepository.cs，並加入下面程式碼到檔案中</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"></div><div class="line"><span class="keyword">using</span> Firebase.Database;</div><div class="line"></div><div class="line"><span class="keyword">using</span> app.Model;</div><div class="line"><span class="keyword">using</span> Newtonsoft.Json;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemberRepository</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;MemberRepository&gt; lazy = <span class="keyword">new</span> Lazy&lt;MemberRepository&gt;(() =&gt; <span class="keyword">new</span> MemberRepository());</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> MemberRepository Instance &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> lazy.Value; &#125; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> FirebaseClient Firebase &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MemberRepository</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> auth = <span class="string">"&lt;auth&gt;"</span>;</div><div class="line">            <span class="keyword">var</span> baseUrl = <span class="string">"&lt;url&gt;"</span>;</div><div class="line">            <span class="keyword">var</span> option = <span class="keyword">new</span> FirebaseOptions()</div><div class="line">            &#123;</div><div class="line">                AuthTokenAsyncFactory = () =&gt; Task.FromResult(auth)</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.Firebase = <span class="keyword">new</span> FirebaseClient(baseUrl, option);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">GetDataAsync</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.Firebase</div><div class="line">                .Child(key)</div><div class="line">                .OnceAsync&lt;<span class="keyword">string</span>&gt;();</div><div class="line"></div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)&#123;</div><div class="line">                Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Get Async Data from key(&#123;0&#125;) = &#123;1&#125;:&#123;2&#125;"</span>,</div><div class="line">                    key,</div><div class="line">                    item.Key,</div><div class="line">                    item.Object));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SetDataAsync</span>(<span class="params"><span class="keyword">string</span> key, KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; data</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.Firebase</div><div class="line">                .Child(key)</div><div class="line">                .PostAsync(JsonConvert.SerializeObject(<span class="keyword">new</span> Member()&#123; </div><div class="line">                    Name = data.Key,</div><div class="line">                    Tag = data.Value</div><div class="line">                    &#125;));</div><div class="line"></div><div class="line">            Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Post Async Data to key(&#123;0&#125;) = &#123;1&#125;"</span>, result.Key, result.Object));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著新增目錄Model，並在該目錄下新增Member.cs並添加以下內容:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Newtonsoft.Json;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app.Model</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></div><div class="line">    &#123;</div><div class="line">        [JsonProperty(<span class="string">"Name"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</div><div class="line"></div><div class="line">        [JsonProperty(<span class="string">"Tag"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Tag &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到這邊我們程式的部分完成，接著到app.test目錄底下的UnitTest1.cs內容作以下修改:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> Xunit;</div><div class="line"></div><div class="line"><span class="keyword">using</span> app;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app.test</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></div><div class="line">    &#123;</div><div class="line">        [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Test_MemberRepository_Basic_GetDataAsync</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> key = <span class="string">"-KiUSqrMni578d--QjYz"</span>;</div><div class="line">            <span class="keyword">await</span> MemberRepository.Instance.GetDataAsync(key);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Test_MemberRepository_SetDataAsync</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> key = DateTime.Now.ToString(<span class="string">"yyymmsshhmmss"</span>);</div><div class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">new</span> Random(DateTime.Now.Millisecond).Next().ToString();</div><div class="line">            <span class="keyword">var</span> memberData = <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">string</span>,<span class="keyword">string</span>&gt;(key, <span class="keyword">value</span>);</div><div class="line"></div><div class="line">            <span class="keyword">await</span> MemberRepository.Instance.SetDataAsync(<span class="string">"Member"</span>,memberData);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Run-Test"><a href="#Run-Test" class="headerlink" title="Run Test"></a>Run Test</h4><p>接著我們在測試專案底下執行:</p>
<pre><code>dotnet test
</code></pre><p>可看到這樣的結果:</p>
<p><img src="result.png" alt="result"></p>
<p>這邊GetDataAsync的帶入值比較奇怪是因為這是Firebase自動產生的:</p>
<p><img src="insert_result.png" alt="insert_result"></p>
<p>到這邊我們就完成了ASP.NET Core與Firebase的溝通!</p>
<h4 id="Security-Rules"><a href="#Security-Rules" class="headerlink" title="Security Rules"></a>Security Rules</h4><p>Firebase預設只有已經驗證過的帳號才能夠讀取(read)或寫入(write)記錄到指定資料庫，因此，在目前的設定下是無法讓後續開發的應用程式讀取聯絡資料的，為了測試，筆者暫時將讀寫開放為任何對象都可存取，<strong>但請在設計產品APP時訂定符合安全原則的規則</strong>，請將read與write的值都更改為「true」後，按下「發佈」，即可套用新的規則。</p>
<p>這邊針對專案的相關設定檢查可以參考<a href="https://f這邊針對專案的相關設定檢查可以參考" target="_blank" rel="external">Firebase Dynamic Links</a></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>總結一下，Firebase 提供了Mobile App 完整的基本需求，透過一個很棒的即時資料處理與其他相關功能，加速與協助縮短整個行動應用開發的週期</p>
<p>這邊解釋一下為什麼Firebase還是需要跟ASP.NET Core做整合透過這樣的中介層，而不是如官方所說得直接給我們Mobile App或是Web App等應用程式端直接呼叫。</p>
<p>以我們真實的開發上常常會遇到有權限/授權/登入等功能的需求為例:<br>我們以往大多都要額外開發後端的API程式與前端(web, mobile app or any others)的應用程式做token交換，後端程式還需要這樣的token儲存起來並做對應的時間內失效處理。整個開發繁瑣與同性質不同產品的功能又大同小異，這邊我們就可以透過Firebase來幫我們加速開發:</p>
<ol>
<li>透過自行開發的後端應用程式產生token的機制</li>
<li>前端應用程式傳入識別帳號從後端應用程式取得必要權限的token</li>
<li>前端應用程式找Firebase確認可授予的權限</li>
<li>提供權限對應的功能</li>
</ol>
<p><img src="firebase_third_party.png" alt="firebase_third_party"></p>
<p>以上架構簡單轉換成流程如下:</p>
<ul>
<li>首先你會取得 User 的登入資訊(帳號名稱/密碼)並交給你的伺服器產生Authentication Token</li>
<li>將資訊傳給 Firebase Authentication SDK 來驗證</li>
<li>驗證成功你就可以取得 User 所提供的資訊，預設情況下</li>
<li>User 驗證成功後可以讀寫 Firebase Realtime Database 和 Firebase Storage</li>
</ul>
<p>所以上面就可以看到其實我們還是需要一個 <em>service</em> 或<em>api</em>提供驗證 Authentication Token。</p>
<p>而除此之外如果對Firebase的應用感興趣也可以上官方<a href="https://codelabs.developers.google.com/?cat=Firebase" target="_blank" rel="external">CodeLab</a>來練習一下，而筆者也會再陸續更新Firebase與ASP.NET Core上面的實戰整合跟各位分享。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://firebase.google.com/docs/" target="_blank" rel="external">Google - Firebase</a></li>
<li><a href="https://www.slideshare.net/ApaichonPunopas/firebase-slide" target="_blank" rel="external">Firebase slide</a></li>
<li><a href="https://medium.com/step-up-labs/firebase-c-library-5c342989ad18" target="_blank" rel="external">Firebase C# library</a></li>
<li><a href="http://jasonchiucc.github.io/2016/07/20/firebase-tutorial-realtime-database/" target="_blank" rel="external">Firebase 心得（Realtime Database）</a></li>
<li><a href="https://www-staging.firebase.com/blog/2013-08-23-firebase-is-your-products-api.html" target="_blank" rel="external">Firebase is Your Product’s API</a></li>
<li><a href="http://www.ithome.com.tw/news/106045" target="_blank" rel="external">新版Firebase來了！Google要為App開發者打造一套萬用雲端後臺</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介紹GCP上的Firebase服務，並介紹實作如何與ASP.NET Core整合&lt;/p&gt;
    
    </summary>
    
      <category term="Google Cloud Platform" scheme="https://blackie1019.github.io/categories/Google-Cloud-Platform/"/>
    
    
      <category term="ASP.NET Core" scheme="https://blackie1019.github.io/tags/ASP-NET-Core/"/>
    
      <category term=".NET Core" scheme="https://blackie1019.github.io/tags/NET-Core/"/>
    
      <category term="GCP" scheme="https://blackie1019.github.io/tags/GCP/"/>
    
      <category term="Firebase" scheme="https://blackie1019.github.io/tags/Firebase/"/>
    
  </entry>
  
</feed>
