<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Google Compute Engine Default Password for Windows Instances]]></title>
      <url>https://blackie1019.github.io/2017/05/11/Google-Compute-Engine-Default-Password-for-Windows-Instances/</url>
      <content type="html"><![CDATA[<p>解決在 Google Compute Engine 啟用 Windows Server VM 需要 RDP 登入時的預設密碼問題</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>當我們在 Google Compute Engine 透過 <em>cloud launcher</em> 快速啟用 ASP.NET + Windows Server + SQL Server 的 VM Instance ：</p>
<p><img src="gcp_aspnet_launcher.png" alt="gcp_aspnet_launcher"></p>
<p>過程中服務會一一啟動，在全部完成前無法連線至遠端或是開啟該主機的 80 port 網頁：</p>
<p><img src="gcp_windows_doing.png" alt="gcp_windows_doing"></p>
<p>當成功完成所有啟用，會有下面的畫面：</p>
<p><img src="gcp_windows_create_pw.png" alt="gcp_windows_create_pw"></p>
<p>而我們可以在 Chrome 安裝<a href="https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm?utm_source=chrome-ntp-launcher" target="_blank" rel="external">Chrome RDP for Google Cloud Platform</a> 或是其他的 RDP 套件都可以幫我們做登入．</p>
<p>這邊我們就可以點選 RDP 登入遠端主機：</p>
<p><img src="gcp_rdp.png" alt="gcp_rdp"></p>
<p>但當我們點下去的那一剎那應該會有點慌掉：</p>
<p><img src="gcp_windows_rdp_login.png" alt="gcp_windows_rdp_login"></p>
<p>而回到剛剛的完成介面卻只看到 reset password 而非 create password :</p>
<p><img src="gcp_windows_first_login_fake.png" alt="gcp_windows_first_login_fake"></p>
<p>還在回想 Windows Server 有預設什麼密碼的時候，決定先去官方看了一次文件才發現第一次登入是可以安心按下重設密碼的：</p>
<p><img src="gcp_windows_first_login.png" alt="gcp_windows_first_login"></p>
<p>後我們成功的登入主機，這邊確定一下 ip 是一樣的：</p>
<p><img src="gcp_windows_rdp.png" alt="gcp_windows_rdp"></p>
<p>提醒一下，密碼更換會導致該帳號的安全性相關設定重設，所以如果不是真的忘記密碼要稍微注意一下．</p>
<p><img src="gcp_windows_rdp_warning.png" alt="gcp_windows_rdp_warning"></p>
<p>結論 ： Windows Server 是沒有預設密碼的，請第一次登入的朋友請安心<strong>重設密碼</strong></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://cloud.google.com/compute/docs/instances/windows/creating-passwords-for-windows-instances" target="_blank" rel="external">Creating Passwords for Windows Instances</a></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code Integrate with macOS Finder]]></title>
      <url>https://blackie1019.github.io/2017/05/08/Visual-Studio-Code-Integrate-with-macOS-Finder/</url>
      <content type="html"><![CDATA[<p>分享如何將VSCode 整合進入 Finder，提供快速開啟 <em>VSＣode</em> 的功能 </p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>使用 macOS 的開發者一定都有一樣的問題：可以讓 VSCode 跟 Finder 更方便地打開資料夾或檔案嗎？今天就要分享這樣的一個小技巧．</p>
<p>這邊我們使用網路上熱心人士提供的解決辦法：</p>
<p>先至<img src="https://github.com/cnstntn-kndrtv/open-in-buttons-for-finder-toolbar" alt="&#39;open in&#39; buttons for MacOS X Finder toolbar">下載整個專案．解壓所後可以看到下面的資料夾：</p>
<p><img src="folder.png" alt="folder"></p>
<p>接著進入 app 資料夾然後按住 <strong>⌘cmd</strong> 並將 <em>Open in Code</em> 拖曳進 Finder 的 Toolbar 即可：</p>
<p><img src="instruction.png" alt="instruction"></p>
<p>而以後要在 Finder 內開啟 VSCode 只要針對要開啟的檔案或資料夾選擇後按下該按鈕即可</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EC6Xhh1bEWc?ecver=2" frameborder="0" allowfullscreen></iframe> 

<p>是不是簡單很多啊，趕快下載來使用吧！記得不要吝嗇到 Github 給作者回應感謝摟～</p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code Snippet and Tab Completion]]></title>
      <url>https://blackie1019.github.io/2017/05/07/Visual-Studio-Code-Snippet-and-Tab-Completion/</url>
      <content type="html"><![CDATA[<p>分享如何增添 Visual Studio Code 的 Snappit 功能與開啟 Tab Completion 加速完成文件編輯</p>
<a id="more"></a>
<p>現代的編輯器大多有支援 snippet 功能，當然 VSCode 也不意外得具備這樣的功能，這次介紹如何透過 VSCode 的 Tab Completion 來加強 snippet 的使用</p>
<h2 id="Insert-Existed-Snippet"><a href="#Insert-Existed-Snippet" class="headerlink" title="Insert Existed Snippet"></a>Insert Existed Snippet</h2><p>要在當前檔案插入已經建立的 Snippet ，可於 <em>Command Palette</em> 輸入 <strong>insert snippet</strong> ，VSCode 就會針對你的副檔名(file extension) 開啟對應的 Snippet 清單，下方示範 .md 檔案的 snippet 該如何插入:</p>
<p><img src="Insert.gif" alt="Insert"></p>
<h2 id="Create-New-Snippet"><a href="#Create-New-Snippet" class="headerlink" title="Create New Snippet"></a>Create New Snippet</h2><p>眼尖的朋友會發現我們上面的示範所插入的是一個 <strong>md-iframe</strong> 的 snippet，這是一個客製的 snippet，專門負責在 <a href="https://hexo.io/zh-tw/" target="_blank" rel="external">hexo</a> 的 <em>.md</em> 內嵌入其他網頁，例如：youtube 影片．</p>
<p>而要新增一個 snippet 我們一樣要透過 <em>Command Palette</em> 輸入 <strong>Preferences: Open User Snippets</strong> ，接者選擇你的副檔名格式後就會開啟該語言的設定，此範例選則 <em>markdown</em> ：</p>
<p>markdown.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">/*</div><div class="line">	// Place your snippets for Markdown here. Each snippet is defined under a snippet name and has a prefix, body and </div><div class="line">	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</div><div class="line">	// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </div><div class="line">	// same ids are connected.</div><div class="line">	// Example:</div><div class="line">	"Print to console": &#123;</div><div class="line">		"prefix": "log",</div><div class="line">		"body": [</div><div class="line">			"console.log('$1');",</div><div class="line">			"$2"</div><div class="line">		],</div><div class="line">		"description": "Log output to console"</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">*/</div><div class="line">	"snippet-md-iframe": &#123;</div><div class="line">		"prefix": "md-iframe",</div><div class="line">		"body": "&lt;iframe width='560' height='315' src='$0' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;",</div><div class="line">		"description": "md-iframe"</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這邊要稍微解說一下裡面有一個 <strong>$0</strong> 的用意是讓我們再插入 snippet 之後，當前的滑鼠指標就會移到該區塊，我們就可以接著輸入網址，不用滑鼠再點選一次位置．</p>
<h2 id="Enable-editor-tabCompletion"><a href="#Enable-editor-tabCompletion" class="headerlink" title="Enable editor.tabCompletion"></a>Enable editor.tabCompletion</h2><p>這邊我們可以搭配開啟 editor.tabCompletion 這個功能，可以幫我們透過 tab 的方式直接插入對應的 snippet．開啟該設定的方式如下：</p>
<p><img src="setup.png" alt="setup"></p>
<p>而當我們開啟該設定後就可以透過 tab 的方式幫我們快速插入：</p>
<p><img src="vscode_tab_demo.gif" alt="vscode_tab_demo"></p>
<h2 id="補充-Snippet-Generator"><a href="#補充-Snippet-Generator" class="headerlink" title="[補充] Snippet Generator"></a>[補充] Snippet Generator</h2><p>如果你除了VSCode 之外還有用其他編輯器，如 <a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a> 或 <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 也想建立一樣的 <em>snippet</em> 指令，可以參考<a href="https://Snippet.now.sh/" target="_blank" rel="external">Snippet Generator</a> 一次幫你產生三個不同版本的 Snippet ，我們只要複製貼上就好．</p>
<p><img src="snippet-generator.png" alt="snippet-generator"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/editor/userdefinedSnippet" target="_blank" rel="external">Creating your own Snippet</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core Develop with VSCode and Workspace Recommended Extension Configuration to Build up Project/Team Editor]]></title>
      <url>https://blackie1019.github.io/2017/05/06/ASP-NET-Core-Develop-with-VSCode-and-Workspace-Recommended-Extension-Configuration-to-Build-up-Development-Editor/</url>
      <content type="html"><![CDATA[<p>介紹如何使用 VSCode 中 Workspace Recommended Extension Configuration 這項功能來幫我們迅速的建立 VSCode 的開發環境．</p>
<a id="more"></a>
<p>今天看到 <a href="https://www.youtube.com/watch?v=zzon9KS90Dk&amp;lc=z125zvf5swr2itnc123silawimnzwhwht04" target="_blank" rel="external">本週的Editor 編輯者#9</a>的影片，介紹了 VSCode 中 <strong>Workspace Recommended Extension Configuration</strong> 這項功能，而本篇將接續分享如何透過這項功能來幫我們迅速的建立 VSCode 的開發環境．</p>
<p>建議對 <em>VSCode</em> 有興趣的朋友一定要去看一下影片！</p>
<h2 id="VSCode-Extensions-and-Recommended-Extension-feature"><a href="#VSCode-Extensions-and-Recommended-Extension-feature" class="headerlink" title="VSCode Extensions and Recommended Extension feature"></a>VSCode Extensions and Recommended Extension feature</h2><p>VSCode 的 Extension 功能與 <a href="https://marketplace.visualstudio.com/" target="_blank" rel="external">Extension Marketplace</a> 補足了 VSCode 上許多的好用的功能，也同時帶給我們安裝上極佳的方便性．</p>
<p><img src="vs_marketplace.png" alt="vs_marketplace"></p>
<p>在編輯器的 Activity Bar 最下方的 Extension 功能中其實還保留幾個快速的導覽功能，點擊 Extension 後可在視窗的右上方的 <strong>…</strong> 圖示透過滑鼠右鍵點擊後看到更多的選項：</p>
<p><img src="vscode_extension_features.png" alt="vscode_extension_features"></p>
<p>其中 Show Popular Extension 等同我們用下載量做排序．而排序總共有三種：</p>
<ul>
<li><p>依下載量排序</p>
<p>@sort:installs</p>
</li>
<li><p>依評分排序</p>
<p>@sort:rating</p>
</li>
<li><p>依名稱排序</p>
<p>@sort:name</p>
</li>
</ul>
<p>如果我們有一個關鍵字做查詢，也可以透過排序功能將我們的查詢結果從新整理，如：關鍵字 git,依評分排序：</p>
<p>  git @sort:rating</p>
<p><img src="vscode_extension_sorting.png" alt="vscode_extension_sorting"></p>
<p>而另外一個選項 Recommended Extension 則是可以直接看當前推薦的套件有哪些．</p>
<h2 id="Workspace-Recommended-Extension-Configuration"><a href="#Workspace-Recommended-Extension-Configuration" class="headerlink" title="Workspace Recommended Extension Configuration"></a>Workspace Recommended Extension Configuration</h2><p>Recommended Extension 也可以分別運作在不同的專案，依據專案設定不同的 Workspace Recommended Extension ，如此一來當該團隊有新成員加入的時候，就可以第一時間把編輯器的安裝說明快速帶著新人上手．</p>
<p>我們可以透過在 <em>Command Palette</em> 中輸入 Recommended Extension 作過濾找到 <strong>Extensions : Configure Recommended Extensions(Workspace)</strong> ：</p>
<p><img src="vscode_extensions_config.png" alt="vscode_extensions_config"></p>
<p>接著將套件的識別名稱貼入及可，請參考下方取得名稱方式：</p>
<p><img src="vscode_recommended_setup.png" alt="vscode_recommended_setup"></p>
<p>當完成加入後，點擊 Extension 右上方的 <strong>…</strong> 圖示選擇 <em>Show Workspace Recommended Extensions</em> :</p>
<p><img src="vscode_show_workspace_recommended_extensions.png" alt="vscode_show_workspace_recommended_extensions"></p>
<p>即可看到我們剛剛給當前專案加入的推薦套件：</p>
<p><img src="vscode_show_workspace_recommended_extensions_2.png" alt="vscode_show_workspace_recommended_extensions"></p>
<p>再次提醒，新增專案推薦套件會在當前的專案底下的新增一個資料夾與一個 <em>extensions.json</em> 檔案，以自身在中間規模圖隊(100人上下)服務的經驗，請務必要將該檔案加入版控(Vision Control)才會方便大家互相支援．</p>
<h2 id="Build-up-ASP-NET-Core-Development-Editor"><a href="#Build-up-ASP-NET-Core-Development-Editor" class="headerlink" title="Build up ASP.NET Core Development Editor"></a>Build up ASP.NET Core Development Editor</h2><p>而這邊就來分享小編在 ASP.NET Core 開發的環境所需要 Extensions ，有興趣的請直接拿去用摟．</p>
<p>載點：<a href="https://github.com/blackie1019/dot-net-core-vscode-extensions" target="_blank" rel="external">dot-net-core-vscode-extensions</a></p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp" target="_blank" rel="external">C#</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions" target="_blank" rel="external">C# Extensions</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=josephwoodward.vscodeilviewer" target="_blank" rel="external">C# IL Viewer</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jmrog.vscode-nuget-package-manager" target="_blank" rel="external">NuGet Package Manager</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=spywhere.guides" target="_blank" rel="external">Guides</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer" target="_blank" rel="external">Output Colorizer</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="external">Settings Sync</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="external">Git Lens</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore" target="_blank" rel="external">gitignore</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=samverschueren.yo" target="_blank" rel="external">yo</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-docker" target="_blank" rel="external">Docker</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker" target="_blank" rel="external">Code Spellchecker</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=emilast.logfilehighlighter" target="_blank" rel="external">Log File Highlighter</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify" target="_blank" rel="external">Beautify</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="external">markdownlint</a></li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://code.visualstudio.com/docs/editor/extension-gallery" target="_blank" rel="external">VS Code Extension Marketplace</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code Customize your Own Edit Theme]]></title>
      <url>https://blackie1019.github.io/2017/05/05/Visual-Studio-Code-Customize-your-Activity-Bar-Color/</url>
      <content type="html"><![CDATA[<p>介紹如何修改 VSCode 整個 Editor 配色．</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>在 April 2017 Microsoft 發佈了新版的 VScode (Version 1.12.1 ) 增添了 <em>Workbench theming</em> 的功能，可以讓我們客製化整個編輯器的配色．</p>
<p><img src="vscode_latest_version.png" alt="vscode_latest_version"></p>
<p>有美感且有興趣完全打造自己風格的編輯器請參考官方說明：<a href="https://code.visualstudio.com/docs/getstarted/theme-color-reference" target="_blank" rel="external">Theme Color Reference</a>.</p>
<p>如果你沒有美感也關係，也可以直接套用預設的幾個 Theme :</p>
<p><img src="vscode_plate.png" alt="vscode_plate"></p>
<p><img src="vscode_default_theme.png" alt="vscode_default_theme"></p>
<p>或是下載別人的 Theme Extension:</p>
<p><img src="vscode_theme_download.png" alt="vscode_theme_download"></p>
<p>這邊帶大家看幾個修改就好：</p>
<h2 id="How-to-Customize-Your-Activity-Bar-Color"><a href="#How-to-Customize-Your-Activity-Bar-Color" class="headerlink" title="How to Customize Your Activity Bar Color"></a>How to Customize Your Activity Bar Color</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"workbench.colorCustomizations": &#123;</div><div class="line">    "activityBar.background": "#cd9731"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改前：</p>
<p><img src="customize_activity_Bar.png" alt="customize_activity_Bar"></p>
<p>修改後：</p>
<p><img src="customize_activity_Bar_after.png" alt="customize_activity_Bar_after"></p>
<h2 id="How-to-Customize-Editor-Active-Tab-Color"><a href="#How-to-Customize-Editor-Active-Tab-Color" class="headerlink" title="How to Customize Editor Active Tab Color"></a>How to Customize Editor Active Tab Color</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"workbench.colorCustomizations": &#123;</div><div class="line">  "tab.activeBackground": "#cd9731"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改前：</p>
<p><img src="customize_tab.png" alt="customize_tab"></p>
<p>修改後：</p>
<p><img src="customize_tab_after.png" alt="customize_tab_after"></p>
<h2 id="How-to-Switch-to-different-Theme"><a href="#How-to-Switch-to-different-Theme" class="headerlink" title="How to Switch to different Theme"></a>How to Switch to different Theme</h2><p>如何切換不同 Theme 請參考下方影片：</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/0L47rFf8JhU?ecver=2" frameborder="0" allowfullscreen></iframe>

<h2 id="VSCode-Theme-Generator"><a href="#VSCode-Theme-Generator" class="headerlink" title="VSCode Theme Generator"></a>VSCode Theme Generator</h2><p>如果你已經有想要呈現的色彩風格的色碼，也可以使用官方的<a href="https://github.com/Tyriar/vscode-theme-generator" target="_blank" rel="external">vscode-theme-generator</a></p>
<p>使用與安裝很簡單，只需先下載官方的原始碼：</p>
<pre><code>git clone https://github.com/Tyriar/vscode-theme-generator-quick-start
cd vscode-theme-generator-quick-start
npm install
</code></pre><p>然後透過下方程式碼修改 <em>index.ts</em> ：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; generateTheme, IColorSet &#125; <span class="keyword">from</span> <span class="string">'vscode-theme-generator'</span>;</div><div class="line"><span class="keyword">const</span> colorSet: IColorSet = &#123;</div><div class="line">  <span class="attr">base</span>: &#123;</div><div class="line">    <span class="attr">background</span>: <span class="string">'#12171F'</span>,</div><div class="line">    <span class="attr">foreground</span>: <span class="string">'#EFEFEF'</span>,</div><div class="line">    <span class="attr">color1</span>: <span class="string">'#399EF4'</span>,</div><div class="line">    <span class="attr">color2</span>: <span class="string">'#DA6771'</span>,</div><div class="line">    <span class="attr">color3</span>: <span class="string">'#4EB071'</span>,</div><div class="line">    <span class="attr">color4</span>: <span class="string">'#FFF099'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">generateTheme(<span class="string">'Blackie Theme'</span>, colorSet, path.join(__dirname, <span class="string">'theme.json'</span>));</div></pre></td></tr></table></figure>
<p>接著我們透過下方指令即可快速產生 <em>theme.json</em> 檔案</p>
<pre><code>npm start
</code></pre><p><img src="theme_generator_result.png" alt="theme_generator_result"></p>
<p>套用的 Theme 結果如下：</p>
<p><img src="theme_example.png" alt="theme_example"></p>
<h2 id="補充-Color-Palette"><a href="#補充-Color-Palette" class="headerlink" title="[補充] Color Palette"></a>[補充] Color Palette</h2><p>如果不太會選擇顏色也沒關係，可以參考一些調色盤工具，如 <a href="https://color.adobe.com/" target="_blank" rel="external">Adobe Color CC</a></p>
<p>這類型的工具已經幫我們配好色差應該是多少，我們只要給予基準色與選擇想呈現的色差風格即可：</p>
<p><img src="adobe_cc.png" alt="adobe_cc"></p>
<p>對於這類型調色盤的工具選擇可以參考：</p>
<p><a href="http://htmlcolorcodes.com/resources/best-color-palette-generators/" target="_blank" rel="external">Best Color Palette Generators</a></p>
<h2 id="補充-vscode-icons"><a href="#補充-vscode-icons" class="headerlink" title="[補充] vscode-icons"></a>[補充] vscode-icons</h2><p>眼尖的朋友有詢問影片中左邊的檔案與資料夾為什麼也有 icon 圖示 與資料夾分類的顏色與圖示呢？</p>
<p><img src="icons.png" alt="icons"></p>
<p>其實這是另外一個套件 <a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a> 所帶來的效果</p>
<p><img src="preview.gif" alt="preview"></p>
<p>有興趣的朋友可以參考先前的<a href="https://blackie1019.github.io/2017/04/04/Visual-Studio-Code-Icons-Extension/">Visual Studio Code Icons Extension
</a>安裝與設定</p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Prepack - A tool for making JavaScript code run faster]]></title>
      <url>https://blackie1019.github.io/2017/05/04/Prepack-A-tool-for-making-JavaScript-code-run-faster/</url>
      <content type="html"><![CDATA[<p>介紹 Prepack 如何透過預先處理與編譯的方式幫助 js 加速。</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<h2 id="Prepack-Introduction"><a href="#Prepack-Introduction" class="headerlink" title="Prepack Introduction"></a>Prepack Introduction</h2><p><a href="https://github.com/facebook/prepack" target="_blank" rel="external">Prepack</a> 主要是可以幫我們處理一下可在編譯階段就預先進行計算的 js 函式或初始賦予值等動作，好處是可以幫我們省下很多處理與運算的時間，在透過全域變數(global variable)的方式來取用這些值來大幅度的增加效能。</p>
<p>例如原始碼這樣的程式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt;= <span class="number">1</span> ? x : fib(x - <span class="number">1</span>) + fib(x - <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> x = <span class="built_in">Date</span>.now();</div><div class="line">  <span class="keyword">if</span> (x * <span class="number">2</span> &gt; <span class="number">42</span>) x = fib(<span class="number">10</span>);</div><div class="line">  global.result = x;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>經過 Prepack 編譯處理後變成簡單的三元運算子(:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _$<span class="number">0</span> = <span class="built_in">Date</span>.now();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> _$<span class="number">0</span> !== <span class="string">"number"</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Prepack model invariant violation: "</span> + _$<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  result = _$<span class="number">0</span> * <span class="number">2</span> &gt; <span class="number">42</span> ? <span class="number">55</span> : _$<span class="number">0</span>;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>這邊在看一個例子: </p>
<p>編譯前:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> valueA = <span class="number">123</span>,</div><div class="line">      valueB = <span class="number">234</span>,</div><div class="line">      result = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">50</span>; j++) &#123;</div><div class="line">          result = i * j;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  global.result = result * valueA % valueB + result * valueB % valueA;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>編譯後:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = <span class="number">108</span>;</div></pre></td></tr></table></figure></p>
<p>這邊可以看到所有的迴圈計算都直接編譯並執行了，而產生的最後結果108則是被我們存到全域變數result裡面。</p>
<p>以目前本人使用的結果看來， Prepack 的功能還是很有限，對於 module.exports 與 參數展開的功能沒有支援，另外連 const 也會被忽略。</p>
<p>如果真的有比較偏向靜態函式,啟動參數或是前端資源檔(resource file)需求的朋友倒是可以參考，但程式碼也要將這部分抽離得很乾淨不然應該會發生錯誤而產生不出來檔案。</p>
<p>有興趣的朋友可以來這邊玩玩看，<a href="https://prepack.io/repl.html" target="_blank" rel="external">Try it</a></p>
<h2 id="How-to-Use"><a href="#How-to-Use" class="headerlink" title="How to Use"></a>How to Use</h2><p>安裝 Prepack CLI</p>
<pre><code>npm install -g prepack
</code></pre><p>安裝完成後即可透過 <em>prepack</em> 指令編譯我們的 js 檔案:</p>
<pre><code>prepack test.js
</code></pre><p>如果要設定產出的檔案名稱可以透過 –out 參數</p>
<p>  prepack test.js –out test-processed.js</p>
<p>我們也可以將其套件載入後交給 Webpack 或是Gulp 等套件做處理，如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Prepack = <span class="built_in">require</span>(<span class="string">"prepack"</span>);</div><div class="line"><span class="keyword">import</span> &#123; prepack, prepackFileSync &#125; <span class="keyword">from</span> <span class="string">'prepack'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Prepack <span class="keyword">from</span> <span class="string">'prepack'</span>;</div></pre></td></tr></table></figure>
<p>這邊可以考慮跟 Webpack 做整合的朋友可以參考<a href="https://github.com/gajus/prepack-webpack-plugin" target="_blank" rel="external">prepack-webpack-plugin</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Front-End Optimized </tag>
            
            <tag> Prepack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code adding Color Highlighting to log files]]></title>
      <url>https://blackie1019.github.io/2017/05/03/Visual-Studio-Code-color-highlighting-to-log-files/</url>
      <content type="html"><![CDATA[<p>介紹如何透過 Log File Highlighter 增強 VSCode 呈現 *.log 檔案</p>
<a id="more"></a>
<p><img src="cover.png" alt="conver"></p>
<p>先前有篇介紹了 <a href="http://blackie1019.github.io/2017/05/02/ASP-NET-Core-play-with-Log4Net/">log4net 與 ASP.NET Core 的整合</a>，但無論今天是用哪一個套件來產生日誌檔案，我們在閱讀時往往都希望能 <strong>一目瞭然</strong>．</p>
<p>但很可惜的，如果使用 VSCode 打開 *.log 檔案，雖然有部分 Highlight 的支援，閱讀起來還是很吃力．所以今天要為大家介紹 VSCode 上面閱讀日誌檔必備的 <a href="https://marketplace.visualstudio.com/items?itemName=emilast.LogFileHighlighter" target="_blank" rel="external">Log File Highlighter</a>．</p>
<p>在介紹功能前我們先來看一個安裝套件前，VSCode 預設呈現的樣子：</p>
<p><img src="before.png" alt="before.png"></p>
<p>這邊我們可以看到雖然有 Highlight ，但後面內容中帶到 Warning 或是 Error 的字樣就呈現錯誤的顏色來提示．</p>
<p>而當我們用 <em>Log File Highlighter</em> 這個套件呈現就正確了：</p>
<p><img src="after.png" alt="after.png"></p>
<p>這邊除了支援 log4net 的 Log Level ，其他針對資料格式的 Highlight 還包括：</p>
<ul>
<li><p>Dates and times in ISO format, such as</p>
<p>  2015-12-09<br>  2015-12-09 09:29<br>  2015-12-09 09:29:02,258</p>
</li>
<li><p>Dates and times in some culture specific formats</p>
<p>  12/09/2016<br>  12.09.2016<br>  12-09-2016<br>  12-09-2015 09:29<br>  12-09-2015 09:29:02,258</p>
</li>
<li><p>Log level, such as</p>
<p>  DEBUG<br>  INFO, INFORMATION<br>  WARN, WARNING<br>  ERROR, FAIL, FAILURE</p>
</li>
<li><p>Numeric constants, such as</p>
<p>  1<br>  234</p>
</li>
<li><p>Standard .Net constants</p>
<p>  null<br>  true<br>  false</p>
</li>
<li><p>String constants, enclosed in single or double quotes. Examples:</p>
<p>  “lorem ipsum”<br>  ‘lorem ipsum’</p>
</li>
<li><p>GUIDs. Example:</p>
<p>  859A4209-A82D-4CA1-8468-C2606A3501EE</p>
</li>
<li><p>.Net exception type names, i.e. word ending with Exception, such as</p>
<p>  ArgumentNullException<br>  HttpException</p>
</li>
<li><p>.Net exception stack traces, i.e. lines starting with whitespace characters, followed by at, for example:</p>
<p>  System.NullReferenceException: Object reference not set to an instance of an object.</p>
<pre><code>at MyClass.DoSomethingElse(string foo)
at MyClass.DoSomething()
</code></pre></li>
<li><p>Url:s</p>
<p>  <a href="http://www.meadow.se/wordpress/" target="_blank" rel="external">http://www.meadow.se/wordpress/</a></p>
</li>
<li><p>Namespaces (sequences of alpanumeric and dot characters). Useful to identity namespace qualified type names, for example.</p>
<p>  MyApp.MyNameSpace.MyClass</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with log4net]]></title>
      <url>https://blackie1019.github.io/2017/05/02/ASP-NET-Core-play-with-Log4Net/</url>
      <content type="html"><![CDATA[<p>介紹如何在 ASP.NET Core 使用 log4net 幫我們強化 Log 相關功能</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<p>ASP.NET Core 本身有提供 Logging 的延伸套件 <em>Microsoft.Extensions.Logging</em> 協助我們透過 (dependency injection (DI)](dependency injection) 的方式在程式中加入 ILoggerFactory 的實體(instance)．如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app,</span></span></div><div class="line">    IHostingEnvironment env,</div><div class="line">    ILoggerFactory loggerFactory)</div><div class="line">&#123;</div><div class="line">    loggerFactory</div><div class="line">        .AddConsole()</div><div class="line">        .AddDebug();</div></pre></td></tr></table></figure>
<p>而今天我們則是要介紹另外一套在 .NET 開發中必備的 Logging 套件 - log4net，來協助我們建立 Logging 機制．</p>
<p>接下來就讓我們先簡單介紹 log4net 是什麼．</p>
<h2 id="log4net-Introduction"><a href="#log4net-Introduction" class="headerlink" title="log4net Introduction"></a>log4net Introduction</h2><p>log4net 是 Apache Logging Services 專案的其中一部分，是由 Apache log4j 移轉制 .NET Runtime 上所開源的日誌紀錄套件，可協助我們快速的開發 Logging 相關功能．</p>
<p><img src="apace_logging_services.png" alt="apace_logging_services"></p>
<p>幾乎所有的大型應用都需要有一套強大的日誌系統來診斷和修復功能上的問題，而log4net就是小編這幾年(2012 - 2017) 在 .NET 開發上所採用的Logging 套件，目前運用在全部經手過的各大小專案上，在繁重的應用程式中(每秒接受並處理五萬筆以上的 transaction 請求與每秒10萬筆的 API 請求) 都能有不錯的效能處理與豐富的資料格式與分檔寫入的效果．</p>
<h3 id="The-structure-of-log4net"><a href="#The-structure-of-log4net" class="headerlink" title="The structure of log4net"></a>The structure of log4net</h3><p>log4net 有五種主要的組件:</p>
<ul>
<li><p>ILog</p>
<p>  是我們日誌記錄實體的介面(interface)，這邊我們要透過 LogManager 內的函式與傳入的類型來建立實體．</p>
</li>
<li><p>LogManager</p>
<p>  可以幫我們建立 Repository 與 ILog 的實體</p>
</li>
<li><p>Appender</p>
<p>  是一個幫我們處理寫入日誌記錄的物件(object)</p>
</li>
<li><p>Filter</p>
<p>  是一個幫我們依據設定的條件限制寫入日誌記錄的條件式(condition)</p>
</li>
<li><p>Layout</p>
<p>  日誌記錄的呈現風格(display)</p>
</li>
<li><p>Repository</p>
<p>  是一個為了儲放 log4net 設定與 LogManager 內實體的集中的儲存槽(store)</p>
</li>
</ul>
<p>執行上的順序為：</p>
<p><a href="log4net_objects.gif">log4net_objects</a></p>
<h3 id="Log-Level"><a href="#Log-Level" class="headerlink" title="Log Level"></a>Log Level</h3><p>我們可以給予不同的 Log Level 來方便我們解讀與觀看，層級如下：</p>
<p><img src="log4net_tag.jpg" alt="log4net_tag.jpg"></p>
<p>當然 log 不是銀彈，千萬不要因為偷懶就在一開始打了一堆根本不會用到的 log ，因為<strong>每個 log 的處理與寫入檔案都是成本</strong>，好的 log 帶你上天堂(快速的顯示問題或是我們要找的資料)，壞的 log 讓你住套房(很難找到我們的資料或是導致應用程式效能不佳)</p>
<p>而當我們有了足夠的 log 後，我們就可以考慮採用 ELK 的架構幫我們建立起強大的分析與監控機制，有興趣的可以參考好友的文章：<a href="https://blog.johnwu.cc/article/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-centos-red-hat.html" target="_blank" rel="external">ELK 教學 - 從無到有安裝 ELK (CentOS/Red Hat)</a>．而筆者之後也會分享 <em>ELK</em> 與 <em>ASP.NET Core</em> 這塊的整合與做法．</p>
<h2 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h2><p><a href="https://github.com/blackie1019/DEMO-AspNETCore-Log4Net" target="_blank" rel="external">Demo Source Code</a></p>
<p>這邊我們可以透過新增一個 ASP.NET Core MVC 專案</p>
<pre><code>mkdir app; dotnet new mvc
</code></pre><p>專案建立後可以透過先前介紹的nuget套件幫我們加入 log4net 至當前專案：</p>
<p><img src="nuget_add.png" alt="nuget_add"></p>
<p>加入完成後可以看到專案多了一個相依的 framework :</p>
<p><img src="nuget_add_project.png" alt="nuget_add_project"></p>
<p>接著使用還原所有相依套件:</p>
<pre><code>dotnet restore
</code></pre><p>接著我們加入 <em>log4net.config</em> 至專案內</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- This section contains the log4net configuration settings --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">log4net</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ConsoleAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.ConsoleAppender"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger - %message%newline"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FileAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.FileAppender"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">file</span> <span class="attr">value</span>=<span class="string">"log-file.log"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appendToFile</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger [%property&#123;NDC&#125;] - %message%newline"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"RollingLogFileAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">file</span> <span class="attr">value</span>=<span class="string">"logfile/"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appendToFile</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rollingStyle</span> <span class="attr">value</span>=<span class="string">"Composite"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">staticLogFileName</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">datePattern</span> <span class="attr">value</span>=<span class="string">"yyyyMMdd'.log'"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">maxSizeRollBackups</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">maximumFileSize</span> <span class="attr">value</span>=<span class="string">"1MB"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"%date [%thread] %-5level %logger [%property&#123;NDC&#125;] - %message%newline"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Setup the root category, add the appenders and set the default level --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ALL"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ConsoleAppender"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FileAppender"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingLogFileAppender"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接著我們在程式當中加入下面日誌紀錄：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.IO;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</div><div class="line"></div><div class="line"><span class="keyword">using</span> log4net;</div><div class="line"><span class="keyword">using</span> log4net.Repository;</div><div class="line"><span class="keyword">using</span> log4net.Config;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">DEMO_AspNETCore_Log4Net</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ILoggerRepository repository &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">readonly</span> ILog log;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</div><div class="line">                .SetBasePath(env.ContentRootPath)</div><div class="line">                .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>)</div><div class="line">                .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json"</span>, optional: <span class="literal">true</span>)</div><div class="line">                .AddEnvironmentVariables();</div><div class="line">            Configuration = builder.Build();</div><div class="line">            repository = LogManager.CreateRepository(<span class="string">"NETCoreRepository"</span>);</div><div class="line">            XmlConfigurator.Configure(repository, <span class="keyword">new</span> FileInfo(<span class="string">"log4net.config"</span>));</div><div class="line"></div><div class="line">            log = LogManager.GetLogger(repository.Name,<span class="keyword">typeof</span>(Startup));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> IConfigurationRoot Configuration &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Add framework services.</span></div><div class="line">            log.Info(<span class="string">"Doing ConfigureServices..."</span>);</div><div class="line">            services.AddMvc();</div><div class="line">            log.Info(<span class="string">"Done ConfigureServices..."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// loggerFactory.AddConsole(Configuration.GetSection("Logging"));</span></div><div class="line">            <span class="comment">// loggerFactory.AddDebug();</span></div><div class="line"></div><div class="line">            log.Info(<span class="string">"Doing Configure..."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (env.IsDevelopment())</div><div class="line">            &#123;</div><div class="line">                app.UseDeveloperExceptionPage();</div><div class="line">                app.UseBrowserLink();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                app.UseExceptionHandler(<span class="string">"/Home/Error"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            app.UseStaticFiles();</div><div class="line"></div><div class="line">            app.UseMvc(routes =&gt;</div><div class="line">            &#123;</div><div class="line">                routes.MapRoute(</div><div class="line">                    name: <span class="string">"default"</span>,</div><div class="line">                    template: <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            log.Info(<span class="string">"Done Configure..."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著啟用網站:</p>
<pre><code>dotnet run
</code></pre><p>我們即可看到專案下多了一份log-file.log，內容如下：</p>
<p><img src="log_file.png" alt="log_file"></p>
<p>詳細的config設定可以參考<a href="http://logging.apache.org/log4net/release/config-examples.html" target="_blank" rel="external">Apache log4net™ Config Examples</a></p>
<h2 id="Alternative-for-Logging"><a href="#Alternative-for-Logging" class="headerlink" title="Alternative for Logging"></a>Alternative for Logging</h2><p>除了 ASP.NET Core 自身的 Logging 機制與 本篇介紹的 log4net 外，還有其他可以用在 ASP.NET Core 的 Logging 套件：</p>
<ul>
<li><a href="https://github.com/elmahio/Elmah.Io.Extensions.Logging" target="_blank" rel="external">elmah.io</a></li>
<li><a href="https://github.com/imobile3/Loggr.Extensions.Logging" target="_blank" rel="external">Loggr</a></li>
<li><a href="https://github.com/NLog/NLog.Extensions.Logging" target="_blank" rel="external">NLog</a></li>
<li><a href="https://github.com/serilog/serilog-framework-logging" target="_blank" rel="external">Serilog</a></li>
</ul>
<p>這邊會在之後再介紹各相關套件與優劣/適合的使用時機．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://logging.apache.org/log4net/" target="_blank" rel="external">What is Apache log4net</a></li>
<li><a href="http://logging.apache.org/log4net/release/manual/configuration.html" target="_blank" rel="external">Apache log4net™ Manual - Configuration</a></li>
<li><a href="http://logging.apache.org/log4net/release/config-examples.html" target="_blank" rel="external">Apache log4net™ Config Examples</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging" target="_blank" rel="external">Introduction to Logging in ASP.NET Core</a></li>
<li><a href="https://www.codeproject.com/Articles/19207/log-net-XmlConfigurator-Simplified" target="_blank" rel="external">log4net XmlConfigurator Simplified</a></li>
<li><a href="http://www.programering.com/a/MjN1EjNwATI.html" target="_blank" rel="external">Log4Net full range tracking program</a></li>
<li><a href="https://jonhilton.net/2016/09/14/troubleshoot-your-asp-net-core-web-app-using-logging/" target="_blank" rel="external">Troubleshoot your ASP.NET Core web app using logging</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Log </tag>
            
            <tag> log4net </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mobile Testing with AWS Device Farm - Built-in Fuzz Test]]></title>
      <url>https://blackie1019.github.io/2017/05/01/Mobile-Testing-with-AWS-Device-Farm-Built-in-Fuzz-Test/</url>
      <content type="html"><![CDATA[<p>介紹 AWS Device Farm 的 Built-in Fuzz Test，並透過它完成手機上的 Monkey Testing</p>
<a id="more"></a>
<p><img src="cover.jpg" alt="cover"></p>
<p>這次要介紹 AWS Device Farm 的 Built-in Fuzz Test 如何可以幫我們快速地進行手機應用程式測試。但在開始前我們先提提 <em>Monkey Testing</em> 與 <em>Fuzz testing</em></p>
<h2 id="Monkey-Testing-and-Fuzz-testing"><a href="#Monkey-Testing-and-Fuzz-testing" class="headerlink" title="Monkey Testing and Fuzz testing"></a>Monkey Testing and Fuzz testing</h2><p>Monkey Testing = no test case + no test plan + no test requirement (即沒有測試案例、沒有測試計畫、也不知道測試透過需求)</p>
<p><img src="monkey testing.jpg" alt="monkey testing"></p>
<p>往往我們的測試都是以正常的商務流程與系統功能(Happy Path)為主去做測試，而異常測試不可能有所有的例外流程去包裹，<em>因為人能想出來的意外絕對不是意外</em>。</p>
<p>而 <em>Monkey Testing</em> 的概念，就是當下完全沒有想法的亂點整個應用程式，看會跑出什麼結果出來的沒有特定目標與範圍的測試，這類測試通常都是亂數隨機組成的，有可能開開按一下音量大小，然後回到桌面再打開隨便點點或是輸入一些奇怪的數值，製造出一切有可能的結果。</p>
<p>而網路上你打Monkey Testing 應該找到的資料不多，因為在軟體測試方面這樣的測試我們稱為 <strong>Fuzzing</strong> 或 <strong>Fuzz testing</strong>。 但有不少人認為兩者還是不一樣的，Fuzz testing　重視的是資料的變異(輸入合理範圍外的資料格式或數值)，Monkey Testing 則是行為的變異(不按標準或是沒有方向的操作行為)。</p>
<p><img src="fuzz_testing.jpg" alt="fuzz_testing"></p>
<h2 id="Built-in-Fuzz-Test"><a href="#Built-in-Fuzz-Test" class="headerlink" title="Built-in Fuzz Test"></a>Built-in Fuzz Test</h2><p>AWS Device Farm 提供 Built-in Fuzz Test 可以讓我們透過實體的行動裝置來進行該 Monkey Testing 。 我們僅需上傳待測試的 APP 或是開啟網頁，透過幾個簡單的設定即可馬上進行這類型的測試。</p>
<h2 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h2><p>這邊讓我們來實際操作一次，一開始需要先建立一個新的 Device Farm 專案(Project):</p>
<p><img src="aws_device_farm_new_project.png" alt="aws_device_farm_new_project"></p>
<p>而後開始選擇要做 Automation Testing 還是 Remote Access:</p>
<p><img src="aws_device_farm_new_project_success.png" alt="aws_device_farm_new_project_success"></p>
<p>選擇 Automation Testing 後即可上傳你的測試類型，這邊選擇 <em>iOS</em> ：</p>
<p><img src="aws_device_farm_built_in_fuzz_create.png" alt="aws_device_farm_built_in_fuzz_create"></p>
<p>然後上傳你封裝好的apk檔案，這邊要注意一下記得要給AdHoc的版本：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_upload.png" alt="aws_device_farm_built_in_fuzz_create_upload"></p>
<p>上傳完成且透過驗證即可以看到旁邊步驟都亮了綠燈，接著我們就可以來指定要測試的類型，這邊選擇 <em>Built-in:Fuzz</em> 作為我們的類型：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_type.png" alt="aws_device_farm_built_in_fuzz_create_type"></p>
<p>我們可以開始選擇要用哪個指定的 <em>Device Pool</em> 或是再次挑選該次要跑的實機：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_select_devices.png" alt="aws_device_farm_built_in_fuzz_create_select_devices"></p>
<p><img src="aws_device_farm_built_in_fuzz_create_select_devices_detail.png" alt="aws_device_farm_built_in_fuzz_create_select_devices_detail"></p>
<p>如果我們的測試有些環境設定或是相依的App也可以從這邊傳入：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_device_state.png" alt="aws_device_farm_built_in_fuzz_create_device_state"></p>
<p>最後在執行前會讓你選擇你這要運行的時間(最少五分鐘)，這邊選擇的時間要乘上你先前設定的機器書量才會是計價的 <strong>Device Minutes</strong>，所以要特別注意：</p>
<p><img src="aws_device_farm_built_in_fuzz_create_review_run.png" alt="aws_device_farm_built_in_fuzz_create_review_run"></p>
<p>這邊直接看實際使用 Built-in Fuzz Test 測試一個 Hybrid App (React Native) 的過程:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GmY3LmHP6cY" frameborder="0" allowfullscreen></iframe>

<p>當運行完成就會提供我們該次測試的測試影片(如上)，並包含下面每台實體機的各行為測試紀錄與報告：</p>
<p><img src="aws_device_farm_built_in_fuzz_report_devices.png" alt="aws_device_farm_built_in_fuzz_report_devices"></p>
<p><img src="aws_device_farm_built_in_fuzz_report_files.png" alt="aws_device_farm_built_in_fuzz_report_files"></p>
<p><img src="aws_device_farm_built_in_fuzz_report_screen.png" alt="aws_device_farm_built_in_fuzz_report_screen"></p>
<p>這邊要注意的一下，我們上傳到AWS的 Mobile APP 會在 <em>30天</em> 後自動移除，而所有的測試報告與紀錄會保留 <em>15 個月</em>。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.zhihu.com/question/34939418/answer/107543574" target="_blank" rel="external">猴子测试是什么？</a></li>
<li><a href="https://qualitytaiwan.wordpress.com/2013/09/25/%E6%90%9E%E6%80%AA%E6%B8%AC%E8%A9%A6-monkey-test/" target="_blank" rel="external">Quality Taiwan 中文品質筆記 - 搞怪測試 (Monkey Test)</a></li>
<li><a href="http://stackoverflow.com/questions/10241957/difference-between-fuzz-testing-and-monkey-test" target="_blank" rel="external">Difference between “fuzz testing” and “monkey test”</a></li>
<li><a href="https://www.tutorialspoint.com/software_testing_dictionary/monkey_testing.htm" target="_blank" rel="external">tutorialspoint - Monkey Testing</a></li>
<li><a href="https://www.tutorialspoint.com/software_testing_dictionary/fuzz_testing.htm" target="_blank" rel="external">tutorialspoint - Fuzz Testing</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Automation Testing </tag>
            
            <tag> AWS </tag>
            
            <tag> AWS Device Farm </tag>
            
            <tag> Behavior Testing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mobile Testing with AWS Device Farm - Introduction and Remote Access]]></title>
      <url>https://blackie1019.github.io/2017/04/30/Mobile-Testing-with-AWS-Device-Farm-Introduction-and-Remote-Access/</url>
      <content type="html"><![CDATA[<p>介紹 AWS Device Farm 如何在雲端中透過實際的行動裝置進行測試，以改善您的 iOS、Android 以及 Web 應用程式的品質。 並實際使用 Remote Access 功能測試你的應用程式在實機的運行狀況。</p>
<a id="more"></a>
<p>行動裝置上的應用程式測試，往往碰到最大的困擾就是手機的種類太多、太雜、甚至作業系統與相關應用程式還有版本問題，而以往在進行測試後，最常遇到客戶的反應就是：某某牌沒辦法安裝、另外一個牌沒辦法登入、還有不同作業系統一開就閃退等等奇怪的問題。但這些在QA測試過程中並不一定會發現，因為QA手上有的機種是有限的，有些甚至還在 <strong>人工</strong>測試的階段，根本不要提機器不夠了，這些主要測試的工人也不夠…。但別提公司根本沒有提供足夠的行動裝置給開發人員或是測試人員可以安心地交付產品，因為這些裝置是買不完的。但今天做手機應用程式真的要這麼徒法煉鋼嗎？</p>
<p>今天就來看看 <em>AWS Device Farm</em> 如何協助我們脫離這樣困境吧。</p>
<p><img src="cover.png" alt="cover"></p>
<p>AWS Device Farm 是AWS 在2015年推出的服務，提供 Mobile App 與 Web 於實體的行動載具上的進行遠端測試的服務，讓我們可以一次在無數個真實的裝置上測試 Android、iOS 或 Web 應用程式並與其做真實的互動，或問題重現。</p>
<p>而最令人高興的是，AWS 目前提供每個帳戶每個月 <strong>1,000</strong> <em>device minute</em> 的 Free Trail Service 來試用，這邊試用的範圍是跟正式的功能一模一樣的。</p>
<p>而本篇文章將會介紹AWS Device Farm 並實際操作 <em>Remote Access</em> 來達到遠端實體機器測試作者用 ReactNative 所開發的 <em>iOS App</em></p>
<h2 id="AWS-Device-Farm-Overview"><a href="#AWS-Device-Farm-Overview" class="headerlink" title="AWS Device Farm Overview"></a>AWS Device Farm Overview</h2><p>AWS Device Farm 透過在實際裝置運行時所側錄的完整測試影片、Log、資源與效能紀錄、以及裝置實際運行的截圖我們能在開發完後即時的對市面上所有既有的裝置進行實機測試，而不用先花錢買大量的行動裝置來達到實機測試的效果。</p>
<p>在目前的裝置清單上已經具備超過300種(型號與作業系統版本)，而它也有提供客製化需求，為你量身購買你想要的機型、硬體規格與搭載的作業系統。</p>
<p>透過該服務我們就不用一直重複購買機器、APP 測試環境安裝與OS設定升降版的動作，我們可以選擇上傳APP後測試 Native App或是 Hybrid App ，也可以直接透過手機內的瀏覽器測試 Web 應用程式。開好帳號就可以透過瀏覽器直接遠端進實體機器中操作觀看結果。或是，我們可以撰寫可重複執行的自動測試將其測試案例在上百台以上的實體機器中執行，如此我們便可以快速且方便的地拿到測試結果。</p>
<p><img src="aws_device_farm_hld_overview.jpg" alt="aws_device_farm_hld_overview"></p>
<p>而 Mobile App　的 CI與CD 也是可以跟 Web 或是 Desktop　應用程式一樣更聰明的自動化被建立與整合的：</p>
<p><img src="cicd_testing.png" alt="cicd_testing"></p>
<p>接下來介紹一些相關名詞。</p>
<h3 id="Device-Pools"><a href="#Device-Pools" class="headerlink" title="Device Pools"></a>Device Pools</h3><p>Device Pools 是將多個實體機器建立測試群組的概念，透過 Device Pools 我們可以建立特定的機器群組並指派要執行的測試行為，這方便我們在職行測試時不用每次都一個一個點選加入，可以將常用的機器建立 Device Pools ，並直接下拉選即可。</p>
<p><img src="device-pools.png" alt="device-pools"></p>
<p>這邊是新增一組 Device Pools 的畫面:</p>
<p><img src="project_device_pool.png" alt="project_device_pool"></p>
<p>這邊要注意由於 Device Pools 是在 Test Project 之下，所以是無法跨 Project 使用的。 但同一個 Test Project 不同的 Run&amp;Sessions 則可以共用已建立的 Device Pools。</p>
<p>而系統這邊也幫我們建立了一組預設的Device Pools 叫做 <em>Top Devices</em> 則在新增測試案例時會從下拉看到:</p>
<p><img src="device_pools_default.png" alt="device_pools_default"></p>
<h2 id="AWS-Device-Farm-Remote-Access"><a href="#AWS-Device-Farm-Remote-Access" class="headerlink" title="AWS Device Farm - Remote Access"></a>AWS Device Farm - Remote Access</h2><p><img src="aws_device_farm_remote_access_hld.png" alt="aws_device_farm_remote_access_hld"></p>
<p>使用上我們需要至 <a href="https://console.aws.amazon.com/console/" target="_blank" rel="external">AWS Management Console</a> 前往 Device Farm 服務，這邊要稍微注意一下 Device Farm 目前是沒有分 Region 的服務 :</p>
<p><img src="aws_management_console.png" alt="aws_management_console"></p>
<p>而近來服務會呈現各專案最後的測試狀態:</p>
<p><img src="aws_device_farm_overview.png" alt="aws_device_farm_overview"></p>
<p>目前的有支援的瀏覽器可操作 AWS Device Farm 的有:</p>
<ul>
<li>Internet Explorer 9 or later</li>
<li>Latest versions of Chrome, Firefox, and Safari. </li>
</ul>
<p>而我們在 AWS Device Farm 內的實體測試機器所安裝好的瀏覽器包含:</p>
<ul>
<li>Android : Chrome  </li>
<li>iOS : Safari</li>
</ul>
<h3 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h3><p>這邊讓我們來實際操作一次，一開始需要先建立一個新的 Device Farm 專案(Project):</p>
<p><img src="aws_device_farm_new_project.png" alt="aws_device_farm_new_project"></p>
<p>而後開始選擇要做 Automation Testing 還是 Remote Access:</p>
<p><img src="aws_device_farm_new_project_success.png" alt="aws_device_farm_new_project_success"></p>
<p>當點選 Remote Access Tab 後則可以開始選擇要測試的實體機器:</p>
<p><img src="aws_device_farm_new_project_remote.png" alt="aws_device_farm_new_project_remote"></p>
<p><img src="aws_device_farm_new_project_remote_device.png" alt="aws_device_farm_new_project_remote_device"></p>
<p>這邊我們直接看實際使用 Remote Access 的過程:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GmY3LmHP6cY" frameborder="0" allowfullscreen></iframe>

<p>當我們想要結束使用則點選右上角中止即可:</p>
<p><img src="aws_device_farm_recycle.png" alt="aws_device_farm_recycle"></p>
<p>都結束可以回到Project &gt; Setting 去看目前剩餘的小時與相關的執行報告等:</p>
<p><img src="aws_device_farm_setting_remain.png" alt="aws_device_farm_setting_remain"></p>
<p>這邊要注意的一下，我們上傳到AWS的 Mobile APP 會在 <em>30天</em> 後自動移除，而所有的測試報告與紀錄會保留 <em>15 個月</em>。</p>
<h3 id="Supported-Devices"><a href="#Supported-Devices" class="headerlink" title="Supported Devices"></a>Supported Devices</h3><p><em>並非所有機型都支援 Remote Access 功能</em> ， 但如果有想要的機型不支援可以寫信至客服開啟特定機器做測試。</p>
<p>目前有的機型與版本列表如下:</p>
<table>
<thead>
<tr>
<th>Android</th>
<th>iOS</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTC One M8 (AT&amp;T) (4.4.4)</td>
<td>Apple iPad Air (9.1)</td>
</tr>
<tr>
<td>LG G Flex (AT&amp;T) (4.2.2)</td>
<td>Apple iPad Air (9.2)</td>
</tr>
<tr>
<td>LG G2 (AT&amp;T) (4.4.2)</td>
<td>Apple iPad Air (9.2.1)</td>
</tr>
<tr>
<td>LG G3 (Sprint) (4.4.2)</td>
<td>Apple iPad Mini 1st Gen (9.2)</td>
</tr>
<tr>
<td>LG G3 (Sprint) (5.0.1)</td>
<td>Apple iPad Mini 2 (9.0)</td>
</tr>
<tr>
<td>LG Optimus L70 (MetroPCS) (4.4.2)</td>
<td>Apple iPad Mini 2 (9.1)</td>
</tr>
<tr>
<td>Motorola DROID Ultra (Verizon) (4.4.4)</td>
<td>Apple iPad Mini 2 (9.2)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 3 (AT&amp;T) (4.4.2)</td>
<td>Apple iPad Mini 2 (9.2.1)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 3 (Verizon) (4.4.4)</td>
<td>Apple iPhone 5c (9.0)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 4 (AT&amp;T) (5.0.1)</td>
<td>Apple iPhone 5c (9.1)</td>
</tr>
<tr>
<td>Samsung Galaxy Note 4 (Verizon) (5.0.1)</td>
<td>Apple iPhone 5c (9.2)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 (Sprint) (4.4.2)</td>
<td>Apple iPod Touch 6th Gen (9.1)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 (T-Mobile) (4.3)</td>
<td>Apple iPod Touch 6th Gen (9.2)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 (Verizon) (4.4.2)</td>
<td>Apple iPod Touch 6th Gen (9.2.1)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 LTE (T-Mobile) (4.3)</td>
<td>Apple iPod Touch 6th Gen (9.3)</td>
</tr>
<tr>
<td>Samsung Galaxy S3 Mini (AT&amp;T) (4.4.2)</td>
<td>Apple iPod Touch 6th Gen (9.3.1)</td>
</tr>
<tr>
<td>Samsung Galaxy S4 (AT&amp;T) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S4 (T-Mobile) (4.4.4)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S4 (Verizon) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S4 Tri-band (Sprint) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S5 (AT&amp;T) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S5 (AT&amp;T) (4.4.4)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S5 (Verizon) (4.4.4)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy S6 (Verizon) (5.0.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy Tab 3 10.1” (WiFi) (4.2.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy Tab 3 10.1” (WiFi) (4.4.2)</td>
<td></td>
</tr>
<tr>
<td>Samsung Galaxy Tab 3 7.0” (T-Mobile) (4.4.4)</td>
</tr>
</tbody>
</table>
<p>但這邊很殘酷的對比一下Microsoft的 <em>Xamarin Test Cloud</em> 目前所提供測試的機器數量，完全比不上…</p>
<p>目前 AWS Device Farm 與 Xamarin Test Cloud 的裝置數量比為 397 : <strong> 2613 </strong> </p>
<h4 id="AWS-Device-Farm"><a href="#AWS-Device-Farm" class="headerlink" title="AWS Device Farm"></a>AWS Device Farm</h4><p><img src="device_list_aws.png" alt="device_list_aws"></p>
<p><a href="http://awsdevicefarm.info/" target="_blank" rel="external">Device List</a></p>
<p>以小米品牌的手機為例:</p>
<p>AWS 上找不到:</p>
<p><img src="xiaomi_aws.png" alt="xiaomi_aws"></p>
<h4 id="Xamarin-Test-Cloud"><a href="#Xamarin-Test-Cloud" class="headerlink" title="Xamarin Test Cloud"></a>Xamarin Test Cloud</h4><p><img src="device_list_xamarin.png" alt="device_list_xamarin"></p>
<p><a href="https://testcloud.xamarin.com/devices" target="_blank" rel="external">Device List</a></p>
<p>以小米品牌的手機為例:</p>
<p>Xamarin 上找到6台不同型號 :</p>
<p><img src="xiaomi_xamarin.png" alt="xiaomi_xamarin"></p>
<h3 id="Limits-in-AWS-Device-Farm"><a href="#Limits-in-AWS-Device-Farm" class="headerlink" title="Limits in AWS Device Farm"></a>Limits in AWS Device Farm</h3><ul>
<li>每個上傳測試的 Mobile App 不能大於 <em>4 GB</em> .</li>
<li>單次執行測試<em>無機器數量的限制</em>. </li>
<li>可測試執行回合<em>無上限</em></li>
<li>每次 <em>Remote Access</em> 的 Session 最多只能使用 <strong>60</strong> 分鐘</li>
<li>每次執行測試，預設的 Automated Testing 執行時間不能超過 <strong>60</strong> 分鐘 ，但此時間可寫信至官方服務單位請求延長最多至 <strong>150</strong> 分鐘</li>
</ul>
<h3 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h3><p>看完功能，最後來看一下一個服務的重點 - <strong>價錢</strong></p>
<p><img src="aws_device_farm_price.png" alt="aws_device_farm_price"></p>
<h4 id="Device-Minute"><a href="#Device-Minute" class="headerlink" title="Device Minute"></a>Device Minute</h4><p>要注意一下，基本的計價的方式是用 <em>device minute</em> 來計算。這時間的算法包含 : 單一機器 install, execute, 與 uninstall app所需的所有時間。所以每台機器除了啟動不用算錢，到完成測試並將該機器關閉時。所以如果我們有五個機器要做一個循環的測&amp;&amp;試從環境開始運行到關閉總共需要五分鐘，那這樣計算出來的總時數就是25分鐘。 目前  <strong>$0.17 per device minute</strong> 。</p>
<p>基本的 Automated Tests 或是 Remote Access 都是用這樣的計價方式。而這邊前 <em>1000 minutes</em> 是免費的!</p>
<h4 id="Unmetered-Plans"><a href="#Unmetered-Plans" class="headerlink" title="Unmetered Plans"></a>Unmetered Plans</h4><p>而 Automated Tests 除了上面的以分計費，還有包月專案~</p>
<p>Unmetered plans 是讓我們可以無限量的執行我們的測試，不用考慮使用時間。但這邊計價的方式則是看我們使用的 <em>Device Slot</em>。</p>
<p>Device Slot 是指機器同時執行數量，例如我們買10個單位的 Device Slot ，那就代表我們同時能跑的機器數量為10個。因為我們都是可以一個月可以跑無限量次的測試，如果同時能執行的機器越多，能幫我們越快完成測試。</p>
<p>這邊的 Device Slot 依樣可以在每次執行測試時從你定義的 Device Pool 或是 Device List 中逐一挑選。當你覺得當前的執行需要增減 Device Slot 時，也可以任意新增或降低當前的 Device Slot。</p>
<h4 id="Private-Device"><a href="#Private-Device" class="headerlink" title="Private Device"></a>Private Device</h4><p>AWS 還能針對客製化的需求(CPU, RAM, OS或是其他設定)的 <em>Private Device</em> 選項。 Private Device 與 Public Device 是可以混合使用的，每個 Private Device 一個月是 $200 的費用，但我們可以隨時將起停用避免帳單多出費用。</p>
<p>這邊要在強調一個雲端服務的重點，那就是:</p>
<p><img src="pay_as_you_using.jpg" alt="pay_as_you_using"></p>
<p>軟體開發沒有特效藥(silver bullet)，如果有這樣的體悟跟知道要測試的範圍，就來體驗每個月免費的1000 device minute，來試試實機測試的另一種選擇吧!</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://aws.amazon.com/tw/device-farm/" target="_blank" rel="external">AWS Device Farm</a></li>
<li><a href="https://aws.amazon.com/device-farm/faq/" target="_blank" rel="external">AWS Device Farm FAQs</a></li>
<li><a href="http://docs.aws.amazon.com/devicefarm/latest/developerguide/limits.html" target="_blank" rel="external">Limits in AWS Device Farm</a></li>
<li><a href="https://www.slideshare.net/AmazonWebServices/aws-reinvent-2016-test-and-debug-your-mobile-apps-on-real-android-and-ios-devices-in-the-cloud-with-aws-device-farm-mbl205" target="_blank" rel="external">AWS re:Invent 2016: Test and Debug Your Mobile Apps on Real Android and iOS Devices in the Cloud with AWS Device Farm (MBL205)</a></li>
<li><a href="https://www.youtube.com/watch?v=Y0WbKMJ6M6I" target="_blank" rel="external">AWS re:Invent 2016: Test and Debug Your Apps on Real Android and iOS Devices in the Cloud (MBL205)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Automation Testing </tag>
            
            <tag> AWS </tag>
            
            <tag> AWS Device Farm </tag>
            
            <tag> Behavior Testing </tag>
            
            <tag> Mobile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET and ASP.NET Core, .NET Framework and .NET core and .NET Standard]]></title>
      <url>https://blackie1019.github.io/2017/04/29/ASP-NET-and-ASP-NET-Core-NET-Framework-and-NET-core-and-NET-Standard/</url>
      <content type="html"><![CDATA[<p>介紹 .NET Core 與 .NET Framework 與 ASP.NET Core的差別</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover.png"></p>
<p>最近在推廣與學習 .NET Core 上最常遇到的幾個問題：</p>
<ul>
<li>.NET Core 與 .NET Framework 的差別？</li>
<li>.NET Core 與 Mono 的差別？</li>
<li>.NET Core 與 ASP.NET Core 的差別？</li>
<li>什麼是 .NET Standard?</li>
<li>.NET Standard 與 .NET Core 的關係？</li>
<li>現在在用的 ASP.NET MVC5 &amp; WebAPI2 跟 ASP.NET Core 的差別？</li>
<li>C# 與 .NET Core 和 ASP.NET Core 的關係？</li>
</ul>
<p>因為這個些問題是學習 .NET Core 的必要知識，所以就整理了一篇與大家分享．</p>
<p>先說明，以下內容大多都是整理已有資訊的重點，如果有興趣了解這些內容請點選 <em>References</em> 閱讀細節，並給予原作者肯定與鼓勵！</p>
<p>其中推薦兩篇：</p>
<ul>
<li><a href="https://dotblogs.com.tw/aspnetshare/2016/04/10/20160409-netcore-netstandard" target="_blank" rel="external">ASP.NET Core 與 .Net Core, .Net Platform Standard, 以及 Shared Runtime 之間的關係</a></li>
<li><a href="https://dotblogs.com.tw/aspnetshare/2017/02/26/20170225-netstandardagain" target="_blank" rel="external">再來多聊一點 .Net Standard</a></li>
</ul>
<h2 id="NET-Overview"><a href="#NET-Overview" class="headerlink" title=".NET Overview"></a>.NET Overview</h2><p>2014 年11月微軟新任 CEO <em>Satya Nadella</em> 決心下，釋出了的.NET原始碼包含了伺服器部份的核心，如.NET Framework Libraries、.NET Core Framework Libraries 和 RyuJit VM，以上都正式對外開放原始碼．其他包含 Visual Studio Code 也是完全開源的計畫！</p>
<p>更多 Microsoft Open Source Project 可以參考 <a href="https://opensource.microsoft.com/" target="_blank" rel="external">Open Source at Microsoft</a></p>
<p>整個.NET 的開發我們可以從下面這兩張圖來看到這幾年到未來的一個趨勢：</p>
<p><img src="pre-overview.png" alt="pre-overview"></p>
<p>上面這張是<strong>目前</strong>整個 .NET 生態的分類．可以簡單地看到微軟在三個領域()由不同的底層 Framework 所支援，這樣的好處是我們對應特定領域/用途的開發可以透過這些分開的 Framework 達到 Cross-platform．但這三個領域本身並不是共用同一個底層 Framework ，這導致在 ASP.NET MVC 上用的套件，ASP.NET Core MVC 上可能不能用．</p>
<p>為了讓 Cross-solution 的專案能沿用既有的這些第三方套件(Packages)達到一個底層 Framework 即可 Cross-platform 與 Cross-solution 的目標， .NET Standard 就這樣誕生了．</p>
<p><img src="future-innovation_detail.png" alt="future-innovation_detail.png"></p>
<p>上面這張是<strong>未來</strong>整個 .NET 生態的分類．</p>
<p>可以很明顯地看到，微軟在未來想透過 <em>.NET Standard</em> 做到完整的 Cross-platform 與 Cross-solution．</p>
<p>而當我們加入了開發工具來看整個微軟針對開發的佈局就如下圖：</p>
<p><img src="future-innovation.jpg" alt="future-innovation"></p>
<p>從右邊的開發工具我們可以看到除了傳統號稱<em>地表最強IDE</em>的 Visual Studio 外， Visual Studio 其實還有一個線上版本的整合開發環境(IDE) Visual Studio Online 讓我們可以不用安裝任何東西，透過瀏覽器即可開始開發，而這邊要稍微注意的是 Visual Studio Online 以功能與定位來看，它其實是線上版的 <strong>Team Foundation Service</strong>．線上編輯<em>只是輔助</em>的功能．而Visual Studio Online 已於 2015/11 月改名為 Visual Studio Team Services – VSTS．</p>
<p>而從 2016 開始微軟也公開 macOS 版本的 <a href="https://www.visualstudio.com/zh-hant/vs/visual-studio-mac/" target="_blank" rel="external">Visual Studio for mac</a>，目前雖然還在 preview 中，但會在 2017 年上市．</p>
<p>另外，這幾年成長速度最快廣受各社群與開發者歡迎的免費且跨平台開源編輯器 <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>，不同於 Visual Studio 定位為 IDE，Visual Studio Code 定位為編輯器，但透過其開源與強大的社群功能，在各種不同套件的整合下，漸漸的可變成各語言的輕量IDE．</p>
<h3 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h3><p>.NET Framework 有兩個主要的元件 ：<em>Common Language Runtime</em> 和 <em>.NET Framework類別庫</em> 。</p>
<ul>
<li>Common Language Runtime則是.NET Framework的基礎，可視為程式執行期間管理程式碼的代理程式，提供記憶體的管理、執行緒的執行、程式碼的執行、程式碼安全驗證及編譯等服務。</li>
<li>Microsoft .NET Framework類別庫是作業系統層級的物件導向類別庫，與Common Language Runtime緊密整合，可供程式語言呼叫。所有支援.NET的程式語言都可以使用.NET Framework類別庫，減少學習新語言的時間。</li>
</ul>
<p><img src="introduction-to-net-framework.jpg" alt="introduction-to-net-framework"></p>
<p>最為人詬病的兩點：只能跑在 <em>Ｗindows</em> 平台與<em>各版本的套件不一定相容</em>，後著問題在 .NET Framework 4.0 開始已經逐漸達到向前相容了 (相容 2.0 到 當前下載的版本，但不包括 1.1 版本)．</p>
<p>這邊我們可以參考 Wiki 整理好的各版本 <strong>.NET Framework</strong> 的重點功能：</p>
<p><img src="DotNet_library.png" alt="DotNet_library.png"></p>
<p>而這邊要提醒一下 C# 版本與 .NET Framework 版本不一定要一致，但.NET Framework 版本會限制能使用的 C# 版本．</p>
<p>對於這些版本的關係可參考 <a href="http://blog.miniasp.com/post/2015/07/28/Clarify-the-versions-between-CLR-NET-CSharp-Visual-Studio-and-ASPNET.aspx" target="_blank" rel="external">釐清 CLR、.NET、C#、Visual Studio、ASP.NET 各版本之間的關係</a></p>
<h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><p>Mono 是一個目前由 Xamarin 公司 所主導的開放原始碼專案，該專案的目標是建立一系列符合ECMA標準的.NET工具．Mono專案不僅可以執行於Windows系統上，還可以執行於Linux，FreeBSD，Unix，OS X和Solaris，甚至一些遊戲平台，例如：Playstation 3，Wii或XBox 360．</p>
<p><img src="mono.png" alt="mono"></p>
<p>Mono程式的執行包含一個程式碼運作引擎，它會將ECMA CIL的byte code轉譯為原生碼（Native Code），它支援了以下處理器：ARM, MIPS（只有32位元模式）, SPARC, PowerPC, S390（64位元模式）, x86, x86-64以及IA-64 64位元模式。<br>程式的轉譯有三種模式：</p>
<ul>
<li><p>Just-in-time (JIT)編譯</p>
<p>  在程式執行當中將ECMA CIL的byte code轉譯為原生碼。</p>
</li>
<li><p>Ahead-of-Time (AOT)編譯：</p>
<p>  ECMA CIL的byte code（通常在.exe檔或.dll檔中）會轉譯出原生碼並儲存在作業系統中、以及CPU架構設定檔（例如在Linux上，如果是foo.exe，就會產生foo.exe.so檔）。通常，此種模式可產生出絕大部份前種模式所產生的原生碼，部份的例外是trampolines或是控管監督相關的碼（仍舊需要JIT來執行），由此可知AOT影像檔並非可以完全獨立執行的。</p>
</li>
<li><p>完全靜態編譯：</p>
<p>  這個模式只支援少數平台，它基於AOT編譯模式上，更進一步產生所有的trampoline、wrappers以及proxies，這幾樣東西是用於靜態連結出靜態檔案時所需。完全靜態編譯模式可以讓程式的執行期完全不需要用到JIT，這個做法適用於Apple iOS作業系統、Sony PlayStation 3以及微軟的XBox 360等作業系統。</p>
</li>
</ul>
<p>這邊可以看到在目前與早先推廣的框架裡面 Xamarin 還是使用 Mono 作為開發的底層 API :</p>
<p><img src="dotnet_mono_dotnetcore.png" alt="dotnet_mono_dotnetcore"></p>
<p>而 Mono 目前也是 <a href="https://dotnetfoundation.org/" target="_blank" rel="external">.NET Foundation</a> 下的其中一個開源計畫，看來應該還可以繼續保持下去．</p>
<h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p><a href="https://www.microsoft.com/net/core/platform" target="_blank" rel="external">.NET Core</a> 是.NET Framework的新一代版本，是微軟官方開發的第一個跨平台 (Windows、Mac OSX、Linux) 的應用程式開發框架（Application Framework）有著下列的特性：</p>
<ul>
<li>Cross-platform</li>
<li>Unified</li>
<li>Fast</li>
<li>Lightweight</li>
<li>Modern</li>
<li>Open Source</li>
</ul>
<p>而目前的版本為 .NET Core 1.1.1，近期更新計畫：</p>
<table>
<thead>
<tr>
<th>Milestone</th>
<th>Release Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>.NET Core 2.0 Preview</td>
<td>Q2 2017</td>
</tr>
<tr>
<td>.NET Core 2.0</td>
<td>Q3 2017</td>
</tr>
</tbody>
</table>
<p>.NET Core 1.0 支援的作業系統環境：</p>
<table>
<thead>
<tr>
<th>OS</th>
<th>Version</th>
<th>Architectures</th>
<th>Configurations</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Client</td>
<td>7 SP1 - 10</td>
<td>x64, x86</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Server</td>
<td>2008 R2 SP1 - 2016</td>
<td>x64, x86</td>
<td>Full, Server Core, Nano (2016 only)</td>
<td></td>
</tr>
<tr>
<td>Red Hat Enterprise Linux</td>
<td>7.2</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Debian</td>
<td>8.2</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ubuntu</td>
<td>14.04 LTS, 16.04 LTS</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Linux Mint</td>
<td>17</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Centos</td>
<td>7.1</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Oracle Linux</td>
<td>7.1</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Mac OS X</td>
<td>10.11, 10.12</td>
<td>x64</td>
<td></td>
<td>10.12 added in 1.0.2</td>
</tr>
</tbody>
</table>
<p>.NET Core 2.0 支援的作業系統環境：</p>
<table>
<thead>
<tr>
<th>OS</th>
<th>Version</th>
<th>Architectures</th>
<th>Configurations</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Client</td>
<td>7 SP1+</td>
<td>x64, x86</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Server</td>
<td>2008 R2 SP1+</td>
<td>x64, x86</td>
<td>Full, Server Core, Nano</td>
<td></td>
</tr>
<tr>
<td>Red Hat Enterprise Linux</td>
<td>7.3+</td>
<td>x64</td>
<td></td>
<td>This includes Centos and Oracle Linux</td>
</tr>
<tr>
<td>Fedora</td>
<td>25+</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Debian</td>
<td>8.7+</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ubuntu</td>
<td>14.04+</td>
<td>x64, arm32 [C]</td>
<td></td>
<td>This includes Linux Mint 17 for x64</td>
</tr>
<tr>
<td>openSUSE</td>
<td>42.2+</td>
<td>x64</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Tizen</td>
<td>4+</td>
<td>arm32 [S]</td>
<td></td>
<td>Tizen .NET Developer Preview</td>
</tr>
<tr>
<td>Mac OS X</td>
<td>10.12+</td>
<td>x64</td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>[S] This is supported by Samsung.</li>
<li>[C] This is supported by the Community</li>
</ul>
<h3 id="NET-Standard"><a href="#NET-Standard" class="headerlink" title=".NET Standard"></a>.NET Standard</h3><p>.NET Standard 是.NET 的新一代版本，是微軟開發的第一個跨平台 (Windows、Mac OSX、Linux) 並且跨應用程式開發框架（Application Framework）的底層API．.NET Standard 是重新了規範一套標準基礎程式庫 API 介面，未來可以在上面開發 ASP.NET, ASP.NET Core, Xamarin 等應用程式．</p>
<p>過去針對跨平台共用程式庫的主推做法是PCL（Portable Class Library），取出各平台不同 API 的交集(Intersection)，並透過適度的篩選保留對彼此平台都支援的 API．這樣的做法可以讓但開發者 <em>無痛</em> (不需知道不同平台的差異來呼叫或是發佈對應版本)。</p>
<p>而 .NET Standard 目的在提供微軟在解決方案的底層 API 可依此介面實作出一致的程式庫，如此程式碼不需修改即可針對不同平台編譯、執行，達到真正的 <em>Ｗrite one, Run everywhere</em> 。.Net Standard 的製做想法跟 PCL 不同．.Net Standard 先規範出了一些 API intersection 內容，把不同的 intersection 定義出不同的版本編號，然後再看每個 platform 能支援到什麼版本．</p>
<p>當前的 .NET Standard 還在 1.6 版本，而預計 2017 的 Q3 會有一個更完整的 .NET Standard 2 的版本，該版本整合了目前微軟所有主流的底層 API ．換句話說，或許從這版開始以後就只需要知道 .NET Standard 即可了．官方<a href="https://docs.microsoft.com/en-us/dotnet/articles/standard/library" target="_blank" rel="external">支援參考</a>或是<a href="https://github.com/dotnet/standard/blob/master/docs/versions.md" target="_blank" rel="external">Github - .NET Standard Versions</a>．</p>
<p><img src="dotnet_standard_2_overview.png" alt="dotnet_standard_2_overview"></p>
<p>而.NET Standard 2 則是有下面的既定目標:</p>
<p><img src="dotnet_standard_2_library.gif" alt="dotnet_standard_2_library"></p>
<p>補上與 .NET Core 的更新發佈時間：</p>
<table>
<thead>
<tr>
<th>Milestone</th>
<th>Release Date</th>
</tr>
</thead>
<tbody>
<tr>
<td>.NET Core 2.0 Preview</td>
<td>Q2 2017</td>
</tr>
<tr>
<td>.NET Standard 2.0 Preview</td>
<td>Q2 2017</td>
</tr>
<tr>
<td>.NET Core 2.0</td>
<td>Q3 2017</td>
</tr>
<tr>
<td>.NET Standard 2.0</td>
<td>Q3 2017</td>
</tr>
</tbody>
</table>
<h4 id="ASP-NET-Web-Implementation-Overview"><a href="#ASP-NET-Web-Implementation-Overview" class="headerlink" title="ASP.NET Web Implementation Overview"></a>ASP.NET Web Implementation Overview</h4><p>大致上我們可以將 ASP.NET 於 Web 開發的應用(不以效能來看)以下圖來解釋：</p>
<p><img src="Web_Overview.bmp" alt="Web_Overview"></p>
<h4 id="ASP-NET-Web-Form-and-ASP-NET-MVC-Different"><a href="#ASP-NET-Web-Form-and-ASP-NET-MVC-Different" class="headerlink" title="ASP.NET Web Form and ASP.NET MVC Different"></a>ASP.NET Web Form and ASP.NET MVC Different</h4><p>ASP.NET Web Form 是微軟早期主打的 Web 應用程式服務框架，這也是很多人不懂 ASP.NET 的人所大多停留的映像：<strong>ASP.NET 的 Web Form 只要拖拉就可以完成頁面開發</strong>．</p>
<p>而在 ASP.NET MVC 框架推出後，我強烈建議不要在使用 Web Form 框架，因為不合宜的請求生命週期以及太好用的 toolkit 都導致整個效能只有 <em>慢</em> 跟 <em>很慢</em> 的差別，基本上我找不到繼續用 Web Form的任何理由，所以我也不打算介紹了．撇開效能跟不一樣的請求處理流程，直接看應用的時機與差別：</p>
<p><img src="WebForms_WebMVC.gif" alt="WebForms_WebMVC.gif"></p>
<p>這邊補上與 ASP.NET Core 的應用差別：</p>
<p><img src="dotnetframework_dotnet_application.png" alt="dotnetframework_dotnet_application"></p>
<h3 id="ASP-NET-MVC-5-and-ASP-NET-WebAPI-2-Different"><a href="#ASP-NET-MVC-5-and-ASP-NET-WebAPI-2-Different" class="headerlink" title="ASP.NET MVC 5 and ASP.NET WebAPI 2 Different"></a>ASP.NET MVC 5 and ASP.NET WebAPI 2 Different</h3><p>嚴格說起來 MVC 與 WebAPI 理論上是兩個不同需求取向的專案，但有鑒於使用上常常被混淆或被視為同樣的東西(有時候連官方文件也會偷懶把兩個放一起)，所以慢慢的被視為是一體的．</p>
<p>但我們可以把 WebAPI 的專案是為沒有呈現需求的網路服務應用程式, 而因為他本身只有單純的處理 HTTP 請求，所以<em>管線事件(pipeline)處理</em>上都比 MVC 還要再簡化，所以有更好的效能．如果今天是單純提供資料服務的應用程式我會強烈推薦使用 WebAPI 專案而非 MVC 專案．</p>
<p>請求生命週期(request life cycle)比較:</p>
<p><img src="request_life_cycle_all.png" alt="request_life_cycle_all"></p>
<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="Q-NET-Core-與-NET-Framework-的差別"><a href="#Q-NET-Core-與-NET-Framework-的差別" class="headerlink" title="Q: .NET Core 與 .NET Framework 的差別"></a>Q: .NET Core 與 .NET Framework 的差別</h3><p>兩者都是 <em>微軟官方</em> 推出的應用程式介面（API）類別庫，可提供開發者基於已提供的 API 作延伸開發．</p>
<p>.NET Framework <em>只能跑在 Windows</em> 的執行環境，.NET Core 可以跑在 <em>跨平台的執行環境</em> : 包含 Windows, macOS 與 Linux 環境．</p>
<p>.NET Core 和 .NET Framework 是子集 (Subset) 與超集 (Superset) 的關係，.NET Core 將會實作出部份的 .NET Framework 功能。未來 .NET Framework 和 .NET Core 也將會是各自發展，但它們也會同時使用彼此的功能，例如 .NET Compiler Platform 與 RyuJIT 等技術。</p>
<h3 id="Q-NET-Core-與-Mono-的差別？"><a href="#Q-NET-Core-與-Mono-的差別？" class="headerlink" title="Q: .NET Core 與 Mono 的差別？"></a>Q: .NET Core 與 Mono 的差別？</h3><p>Mono 是一個已發展許久的 .NET Framework 跨平台開源版本，由社群所維護並成立自成一個生態系統，像Xamarin這樣的跨平台.NET行動應用就是從 Ｍono 計畫開始發展出來的．</p>
<p>.NET Core 是.NET Framework的新一代版本，是微軟官方開發的第一個跨平台 (Windows、Mac OSX、Linux) 的應用程式開發框架（Application Framework）</p>
<p>目前微軟官方表示： <em>.NET Core</em> 與 <em>Mono</em> 未來會是合作的關係，Mono 仍會維持社群力量的維護與發展，而 .NET Core 則會以官方角度來進行發展．</p>
<h3 id="Q-NET-Core-與-ASP-NET-Core-的關係？"><a href="#Q-NET-Core-與-ASP-NET-Core-的關係？" class="headerlink" title="Q: .NET Core 與 ASP.NET Core 的關係？"></a>Q: .NET Core 與 ASP.NET Core 的關係？</h3><p>最早在微軟內部 <em>ASP.NET Core</em> 與 <em>.NET Core</em> 是完全沒有關係的兩個專案．ASP.NET Core 的初期(名稱還為ASP.NET 5時)由於 .NET Core 那時計畫還沒開始執行，所以擁有別於 .NET Core 的獨立執行的 Runtime與工具，該工具與環境稱為 Project K, 前陣子會看到很多 DNX (.NET Execution Environment) 也是他的名稱沒錯．但後來在 整<br>合後的版本將在 1.0 RC2 時釋出的 ASP.NET Core 就已經徹底改用 .NET Core 的 Runtime 與工具，原先的 DNX 計畫則終止了．</p>
<p>而目前來看 ASP.NET Core 是一個開源且跨平台的 framework ，主要是用來建立 Web 應用程式, API 服務, IoT 服務與 手機後台服務等以網路應用為主的應用程式．我們可以選擇要使用 .NET Core 或是 .NET Standard 作為跨平台的底層 API．</p>
<p>使用上要特別注意，目前 .NET Core Runtime 最新版本為 <strong>1.1.1</strong> ，而 .NET Standard 當前的 1.6 版本僅整合到 .NET Core Runtime <strong>1.0.0</strong> ．</p>
<p><img src="dotnet_standard_2_library.gif" alt="dotnet_standard_2_library"></p>
<h3 id="Q-NET-Standard-與-NET-Core-的關係？"><a href="#Q-NET-Standard-與-NET-Core-的關係？" class="headerlink" title="Q: .NET Standard 與 .NET Core 的關係？"></a>Q: .NET Standard 與 .NET Core 的關係？</h3><p>.NET Standard 未來會整合 .NET Core 最新版本並逐漸取代各項原有的底層 API (包括.NET Framework, .NET Core 與 Xamarin)，如果有跨解決方案的共用類別庫開發，建議在 .NET Standard 2 推出時看一下是否符合需求．</p>
<h3 id="Q-現在在用的-ASP-NET-MVC5-amp-WebAPI2-跟-ASP-NET-Core-的差別？"><a href="#Q-現在在用的-ASP-NET-MVC5-amp-WebAPI2-跟-ASP-NET-Core-的差別？" class="headerlink" title="Q: 現在在用的 ASP.NET MVC5 &amp; WebAPI2 跟 ASP.NET Core 的差別？"></a>Q: 現在在用的 ASP.NET MVC5 &amp; WebAPI2 跟 ASP.NET Core 的差別？</h3><p>ASP.NET MVC5 與 WebAPI2 甚至是 ASP.NET Web Form 等專案目前都是跑在 .NET Framework 上面的應用程式框架，而 ASP.NET Core 則是跑在 .NET Core 或 .NET Standard 的框架．</p>
<p>在 ASP.NET Core 上有 mvc 與 webapi 專案來對應 ASP.NET MVC5 與 WebAPI2 這兩個框架應用，因為兩著框架使用上非常雷同，幾乎可以無痛從 .NET Framework 轉移至 .NET Core，但相依的套件可能就要看是否支援 .NET Core 或是 .NET Standard ．</p>
<p>而由於 .NET Core 跨平台的特性，在使用 Container 作為開發與部屬環境時即可不用限制地跑任何一個 Windows 或 macOS 甚至 Linux 的環境，也方便我們部署到任何一個雲端供應商，如：AWS 與 Google Cloud Platform．</p>
<p>另外 ASP.NET Core 有著超高的效能，每秒能處理115萬個請求，是ASP.NET with .NET Framework 4.6 的 23 倍之多，有興趣的可以參考 <a href="http://www.ageofascent.com/asp-net-core-exeeds-1-15-million-requests-12-6-gbps/" target="_blank" rel="external">ASP.NET Core – 2300% More Requests Served Per Second</a></p>
<p><img src="performace.jpg" alt="performace"></p>
<p>對於 web 框架評比有興趣的朋友可以參考<a href="https://www.techempower.com/benchmarks" target="_blank" rel="external">https://www.techempower.com/benchmarks/</a></p>
<p>對於 ASP.NET Core 與 Google Cloud Platform 整合部署有興趣的朋友可以參考 <a href="http://blackie1019.github.io/categories/Google-Cloud-Platform">Google Cloud Platform</a> 系列文章．</p>
<h3 id="Q-C-與-NET-Core-和-ASP-NET-Core-的關係？"><a href="#Q-C-與-NET-Core-和-ASP-NET-Core-的關係？" class="headerlink" title="Q: C# 與 .NET Core 和 ASP.NET Core 的關係？"></a>Q: C# 與 .NET Core 和 ASP.NET Core 的關係？</h3><p>C# 目前是 .NET Core 與 ASP.NET Core 的預設開發語言，而除了 C# 外目前還能使用 <a href="http://fsharp.org/" target="_blank" rel="external">F#</a> 作為開發語言．而如果還在使用 <strong>VB.NET</strong> 開發的朋友可能不用指望 .NET Core 或是 ASP.NET Core 會支援了(雖然不知道為什麼官方一直大聲的說會支援，但已經一年多都沒看到更新的下文或回應)．</p>
<h2 id="Survey-and-Trendy"><a href="#Survey-and-Trendy" class="headerlink" title="Survey and Trendy"></a>Survey and Trendy</h2><p>從前幾天公佈的 <a href="https://insights.stackoverflow.com/survey/2017" target="_blank" rel="external">stackoverflow : Developer Survey Results 2017</a> 也可以看到 C#, ASP.NET Core 與  VSCode 的成長與市佔率其實不小，甚至帶來不少的話題，而滿意度很高一直以來都是這些 .NET 工具與套件的特性，而開源與徹底跨平台的策略更是明顯地帶來更多人的接納．</p>
<p>Programming Languages :</p>
<p><img src="csharp_rank.png" alt="csharp_rank"></p>
<p>Most Popular Frameworks, Libraries, and Other Technologies:</p>
<p><img src="dotnet_popular.png" alt="dotnet_popular"></p>
<p>Most Loved, Dreaded, and Wanted Frameworks, Libraries and Other Technologies:</p>
<p><img src="dotnet_most_loved.png" alt="dotnet_most_loved"></p>
<p>Most Popular Developer Environments by Occupation :</p>
<p><img src="stackoverflow_vscode.png" alt="stackoverflow_vscode"></p>
<p><img src="stackoverflow_vscode_2.png" alt="stackoverflow_vscode_2"></p>
<p>好了，看完這麼多是不是覺得 <em>.NET Core</em> 與 <em>ASP.NET Core</em> 帶給我們很多新的希望呢！</p>
<p>有興趣學習的朋友請參考<a href="http://blackie1019.github.io/2016/11/30/Ironman-30-days-for-ASP-NET-Core/">Ironman for ASP.NET Core</a>系列分享瞜</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blogs.msdn.microsoft.com/cesardelatorre/2016/06/27/net-core-1-0-net-framework-xamarin-the-whatand-when-to-use-it/" target="_blank" rel="external">.NET Core, .NET Framework, Xamarin – The “WHAT and WHEN to use it”</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/articles/standard/library" target="_blank" rel="external">.NET Standard</a></li>
<li><a href="https://blogs.msdn.microsoft.com/msdntaiwan/2016/07/05/announcing-dotnet-core-1-0/" target="_blank" rel="external">.NET Core 1.0 釋出囉！微軟開源跨平台新布局，超越你想像的高效能！</a></li>
<li><a href="https://github.com/dotnet/core/blob/master/roadmap.md" target="_blank" rel="external">.NET Core Roadmap</a></li>
<li><a href="https://andrewlock.net/understanding-net-core-netstandard-and-asp-net-core/" target="_blank" rel="external">Understanding .NET Core, NETStandard, .NET Core applications and ASP.NET Core</a></li>
<li><a href="http://oscarsotorrio.com/2012/09/default.aspx" target="_blank" rel="external">Gestión de errores en ASP.NET MVC</a></li>
<li><a href="http://www.codemag.com/Article/1312051" target="_blank" rel="external">Planning Web Solutions Today: Web Forms, ASP.NET MVC, Web API, and OWIN. Oh My!</a></li>
<li><a href="http://blog.darkthread.net/post-2016-09-27-net-standard-2-0.aspx" target="_blank" rel="external">.NET Standard 2.0 是什麼？可以吃嗎？</a></li>
<li><a href="https://dotblogs.com.tw/aspnetshare/2017/02/26/20170225-netstandardagain" target="_blank" rel="external">再來多聊一點 .Net Standard</a></li>
<li><a href="http://www.c-sharpcorner.com/UploadFile/8c19e8/Asp-Net-5-getting-started-with-Asp-Net-mvc-6/" target="_blank" rel="external">ASP.Net 5: Getting Started With ASP.Net MVC 6</a></li>
<li><a href="http://bartwullems.blogspot.tw/2016/11/aspnet-web-api-2-request-pipeline.html" target="_blank" rel="external">ASP.NET Web API 2 Request Pipeline</a></li>
<li><a href="https://blogs.msdn.microsoft.com/msdntaiwan/2013/12/02/visual-studio-online-visual-studio-online-vs-online/" target="_blank" rel="external">Visual Studio Online 正式發表! Visual Studio Online (VS Online) 是什麼?</a></li>
<li><a href="https://www.slideshare.net/ArunPrasadVidhyaarthi/introduction-to-net-framework" target="_blank" rel="external">Introduction to .net framework</a></li>
<li><a href="https://zh.wikipedia.org/wiki/.NET%E6%A1%86%E6%9E%B6" target="_blank" rel="external">Wiki - .NET Framework</a></li>
<li><a href="https://zh.wikipedia.org/wiki/.NET_Core" target="_blank" rel="external">Wiki - .NET Core</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Mono" target="_blank" rel="external">Wiki - Mono</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> .NET Framework </tag>
            
            <tag> .NET Standard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core MVC play with Google App Engine - Flexible Environment]]></title>
      <url>https://blackie1019.github.io/2017/04/28/ASP-NET-Core-MVC-play-with-Google-App-Engine-Flexible-Environment/</url>
      <content type="html"><![CDATA[<p>先前為大家介紹了GAE的 Standard Environment ，這次將介紹如何實際將ASP.NET Core MVC專案放置在GAE的 <em>Flexible Environment</em> 環境運行。</p>
<a id="more"></a>
<p>這邊因為還是在GAE的功能範圍，所以本篇只會針對 <em>Flexible Environment</em> 做細節的介紹，有關於GAE的全貌與不同Environment的請參考<a href="http://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/">ASP.NET Core MVC play with Google App Engine - Standard Environment</a></p>
<h2 id="Recap-The-Difference-Between-Standard-Environment-and-Flexible-Environment"><a href="#Recap-The-Difference-Between-Standard-Environment-and-Flexible-Environment" class="headerlink" title="Recap : The Difference Between Standard Environment and Flexible Environment"></a>Recap : The Difference Between Standard Environment and Flexible Environment</h2><p>這邊我們分享一下 GCP 教材幫我們整理的差異:</p>
<p><img src="app_engine_environments_differences.png" alt="app_engine_environments_differences"></p>
<p>簡單來講如果想獲得比較彈性的環境與願意付較多的錢，GAE 的 <em>Standard Environment</em> 給予我們一個最簡單上手的應用程式架設過程，但客製化的程度很低，如.NET Core的版本我們也不能指定．</p>
<p>而另外一個服務 GKE 則是讓你透過 <em>Container</em> ＋ <em>K8S</em> 的方式自己的喜好架設與設定強大的 Container Cluster ，將你的應用程式擺放上去．有興趣的人可以參考先前的<a href="http://blackie1019.github.io/2017/04/15/ASP-NET-Core-MVC-play-with-Goolge-Container-Engine/">ASP.NET Core MVC play with Google Container Engine</a></p>
<p>而相對於GKE自己設定K8S的難度比起來，GAE 的 <em>Flexible Environment</em> 能給予你更大的彈性但依舊免去維運上的負擔，持續專心在主要的應用開發上。架構上他透過下方的方式運作:</p>
<p><img src="gae_flexible_environment.png" alt="gae_flexible_environment"></p>
<p>這邊可以看到有一份 app.yaml 檔案與 Dockerfilec 合作產生 Container 環境做運行，這份 <em>app.yaml</em> 就是 GAE - Flexible Environment 中最重要的設定檔，決定你的容器要在什麼條件下擴展．</p>
<p>接下來就直接來看看怎麼將.NET Core應用程式放置在GAE的 Flexible Environment 中運行．</p>
<h2 id="Flexible-Environment-with-ASP-NET-Core-1-0-1"><a href="#Flexible-Environment-with-ASP-NET-Core-1-0-1" class="headerlink" title="Flexible Environment with ASP.NET Core 1.0.1"></a>Flexible Environment with ASP.NET Core 1.0.1</h2><p>以下環境建置步驟會快速帶過，如果對各指令不懂可以參考先前的<a href="http://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/">ASP.NET Core MVC play with Google App Engine - Standard Environment</a><a href="http://blackie1019.github.io/2016/11/30/Ironman-30-days-for-ASP-NET-Core/">.NET Core 系列</a>．</p>
<p>另外，再次提醒各位．由於 <em>Google Cloud Shell</em> 目前預載的 <em>.NET CLI</em> 是 .NET Core 1.0.0 - Preview 2，而微軟在2017/3發行了最新的.NET Core 1.1.1 ，並包含 .NET Core 1.1.1 與 .NET Core 1.0.1 SDK 版本的更新，所以這邊指令會有點不一樣，而很遺憾的目前沒有辦法幫 Google Cloud Shell 升級．在實作下面範例時請特別注意指令的差異．</p>
<h3 id="Create-New-Project"><a href="#Create-New-Project" class="headerlink" title="Create New Project"></a>Create New Project</h3><p>這邊我們新增一個Google Cloud專案</p>
<p><img src="new_project.png" alt="new_project.png"></p>
<h3 id="Publish-the-ASP-NET-Core-1-0-app"><a href="#Publish-the-ASP-NET-Core-1-0-app" class="headerlink" title="Publish the ASP.NET Core 1.0 app"></a>Publish the ASP.NET Core 1.0 app</h3><p>這邊我們快速的新增一個資料夾並透過 <em>.NET CLI</em> 幫我們建立 mvc 專案，並將其運行起來．</p>
<pre><code>mkdir app;cd app
dotnet new -t web;dotnet restore;dotnet run
</code></pre><p><img src="google_shell_new_project.png" alt="google_shell_new_project"></p>
<p>這邊我們一樣透過google cloud shell左上角的Web Preview可以看到下面的運行畫面:</p>
<p><img src="google_shell_new_web_preview.png" alt="google_shell_new_web_preview"></p>
<h3 id="Package-the-ASP-NET-Core-app-as-a-Docker-container"><a href="#Package-the-ASP-NET-Core-app-as-a-Docker-container" class="headerlink" title="Package the ASP.NET Core app as a Docker container"></a>Package the ASP.NET Core app as a Docker container</h3><p>接著我們離開運行模式(ctrl+c)來將這個app容器化．</p>
<p>首先我們先將該應用程式發佈成正式環境的版本：</p>
<pre><code>dotnet publish -c Release
</code></pre><p><img src="dotnet_release.png" alt="dotnet_release"></p>
<p>這邊我們可以看到，除了會將我們的.NET Core正式用 Release 編譯，還會幫我們做front-end最佳化的處理並將檔案位置發佈到/home/blackie1019/app/bin/Release/netcoreapp1.0/publish 下面．</p>
<p>而我們前往該目錄並新增一份 <em>Dockerfile</em> 來定義容器內的設定．</p>
<pre><code>cd /bin/Release/netcoreapp1.0/publish;touch Dockerfie;vi Dockerfile
</code></pre><p>接著我們將下面內容貼上</p>
<pre><code>FROM microsoft/dotnet:1.0.1-runtime
COPY . /app
WORKDIR /app

EXPOSE 8080/tcp
ENV ASPNETCORE_URLS http://*:8080

ENTRYPOINT [&quot;dotnet&quot;, &quot;app.dll&quot;]
</code></pre><p>這邊我們要注意 <em>FROM</em> 的部份我們要下載的root container image是微軟官方的1.0.1-runtime版本，而 <em>ENTRYPOINT</em> 這邊的dll要指定你的專案名稱的dll，如此處是 <em>app.dll</em> .  而這邊的port指定為 <em>8080</em> 則是 App Engine flexible 的指定要求，其他相關規定可以<a href="https://cloud.google.com/appengine/docs/flexible/custom-runtimes/build" target="_blank" rel="external">參考</a>．</p>
<h3 id="Create-app-yaml-for-App-Engine-flexible-and-Deploy"><a href="#Create-app-yaml-for-App-Engine-flexible-and-Deploy" class="headerlink" title="Create app.yaml for App Engine flexible and Deploy"></a>Create app.yaml for App Engine flexible and Deploy</h3><p>而當我們將container設定準備好後，這邊可以透過 *Google Cloud SDK＊ 的 CLI 來幫我們建立 app.yaml檔案</p>
<pre><code>gcloud beta app gen-config --custom
</code></pre><p><img src="google_shell_create_app_yaml.png" alt="google_shell_create_app_yaml"></p>
<p>而當我們打開該檔案後可以發現其實裡面只有兩個設定如下：</p>
<p><img src="app_yaml_basic.png" alt="app_yaml_basic"></p>
<p>到這邊你已經設定好 Release 版本的dll檔案, Dockerfile 與 app.yaml 後我們就可以將其發佈出去了</p>
<pre><code>gcloud app deploy
</code></pre><p><img src="create_app.png" alt="create_app"></p>
<p>這邊要再次確認後就會開始建置與部屬環境了</p>
<p><img src="create_app_docker_image.png" alt="create_app_docker_image"></p>
<p>當完成後頁面會顯示你的應用程式部署的實際網址在哪邊(這邊用Web Preview的連結是不同的)，或是透過下面指令也可以查詢到：</p>
<pre><code>gcloud app browse
</code></pre><p><img src="success.png" alt="success"></p>
<h3 id="An-Overview-of-App-Engine"><a href="#An-Overview-of-App-Engine" class="headerlink" title="An Overview of App Engine"></a>An Overview of App Engine</h3><p>如此一來我們就成功將我們的環境建置完成了．在看web操作介面前先帶大家瀏覽一下整個 <em>App Engine</em> 的架構</p>
<p><img src="gae_service_vision_instance.svg" alt="gae_service_vision_instance.svg"></p>
<p>這邊我們可以看到我們的應用程式會被當成服務的方式被部署出去，就像是 微服務(microservice) 的架構被建立起來獨立運行，而App Engine也可以包括多個Service來讓不同功能的服務彼此互相溝通．</p>
<p>而每個 service 都包含原始碼(source code)與一份設定檔(configuration file)，當我們每次部署一個service出去時都會帶有一個特定的 version ，而實際運行的 instance 則要指定使用哪一版本的 version ．如此一來我們可以在當前版本有意外時進行退版(roll back)．</p>
<p>接著，我們來看一下Google Cloud Platform的 UI 介面在剛剛的部屬後有什麼變化．</p>
<h4 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h4><p>首先我們先看 App Eninge 下的 <em>Services</em>:</p>
<p><img src="ui_services.png" alt="ui_services"></p>
<p>這邊跟我們剛剛用的  gcloud app browse 指令相同，但我們可以直接點選連結到我們運行的網站</p>
<h4 id="Versions"><a href="#Versions" class="headerlink" title="Versions"></a>Versions</h4><p>這邊可以看到我們當前給他的版本：</p>
<p><img src="ui_versions.png" alt="ui_versions"></p>
<h4 id="Instances"><a href="#Instances" class="headerlink" title="Instances"></a>Instances</h4><p><img src="ui_instances.png" alt="ui_instances"></p>
<p>這邊我們可以看到下方有一個 <em>Instances (autoscaled)</em></p>
<p>主要設定解釋：</p>
<ul>
<li><p>Manual Scaling</p>
<p>  手動調整擴展的Instance</p>
</li>
<li><p>Basic Scaling</p>
<p>  單純根據接收的 request 的量來調整Instance的數量，並會在app 閒置時(idle)關閉Instance．</p>
</li>
<li><p>Automatic Scaling</p>
<p>  根據 request rate, response latencies 與其他應用程式相關的矩陣(metrics)算出是否需要調整Instance，而這也是預設的設定．</p>
</li>
</ul>
<p>詳細的差異與內容請參考官方的<a href="https://cloud.google.com/appengine/docs/standard/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes" target="_blank" rel="external">Scaling types and instance classes說明</a></p>
<h2 id="Flexible-Environment-with-ASP-NET-Core-1-1-1"><a href="#Flexible-Environment-with-ASP-NET-Core-1-1-1" class="headerlink" title="Flexible Environment with ASP.NET Core 1.1.1"></a>Flexible Environment with ASP.NET Core 1.1.1</h2><p>在上面我們示範了如何使用 <em>Google Cloud Shell</em> 的方式幫我們建立一個ASP.NET Core 1.0.1的專案並透過容器化的過程打包整個應用程式成為一個Docker images，再將此發佈至GAE上作Flexible的擴展．但由於專案是我們透過 Google Cloud Shell 建立的，由於內建的SDK僅支援 <em>ASP.NET Core 1.0.1</em> 與 <em>.NET CLI 1.0.0</em> 的版本這讓我們無法透過內建的 <em>.NET CLI</em> 建立最新版的ASP.NET Core專案架構與CLI所提供的功能．</p>
<p>這邊我們可改用本機下載的 ASP.NET Core 1.1.1 SDK 建立一個新版的開發環境．而我們一樣會將起封裝成 Docker Images 後再透過 Google Cloud SDK 將此環境發佈至 App Engine ，接下來就讓我們來實作這樣的過程吧：</p>
<h3 id="Prepare-Your-Environments"><a href="#Prepare-Your-Environments" class="headerlink" title="Prepare Your Environments"></a>Prepare Your Environments</h3><p>接著，不同於 App Engine 我們可以運用Google Cloud Shell直接來開發我們的程式，官方這邊也建議我們在Flexible Environment的開發採用本地端的容器化開發方式(Containerized)，主要就是我們可能想要建立一個不同於 GAE - Standard Environment 版本的環境，而在本機開發方便我們驗證是否成功建立我們想要的容器(Container)。</p>
<p>這邊我們就需要在本機安裝 <a href="https://cloud.google.com/sdk/" target="_blank" rel="external">Google Cloud SDK</a>, <a href="https://go.microsoft.com/fwlink/?linkid=847009" target="_blank" rel="external">.NET Core 1.1 SDK</a> 與選擇性安裝 <a href="https://www.docker.com/community-edition" target="_blank" rel="external">Docker</a> (如果你不要驗證可以不用安裝)．</p>
<p>這邊接下來的步驟與先前的<a href="http://blackie1019.github.io/2017/04/15/ASP-NET-Core-MVC-play-with--Container-Engine/">ASP.NET Core MVC play with Google Container Engine</a> 的部分雷同，如果想看詳細描述可以參考此篇．</p>
<h3 id="Publish-the-ASP-NET-Core-1-1-app"><a href="#Publish-the-ASP-NET-Core-1-1-app" class="headerlink" title="Publish the ASP.NET Core 1.1 app"></a>Publish the ASP.NET Core 1.1 app</h3><p>這邊我們快速成立一個mvc的應用程式, 接著將網站運行起來:</p>
<pre><code>dotnet new mvc;dotnet restore; dotnet run
</code></pre><p>前往<a href="http://localhost:5000" target="_blank" rel="external">http://localhost:5000</a>可以看到下面結果：</p>
<p><img src="ori_index.png" alt="ori_index"></p>
<p>由於 ASP.NET Core 的 Razer頁面變更不用重新建置，所以我們可以直接前往Views&gt;Home&gt;Index.cshtml 做些修改：</p>
<p><img src="netcore_app_1_1.png" alt="netcore_app_1_1"></p>
<p>在回到頁面可看到下方結果：</p>
<p><img src="modify_index.png" alt="modify_index"></p>
<h3 id="Package-the-ASP-NET-Core-1-1-app-as-a-Docker-container"><a href="#Package-the-ASP-NET-Core-1-1-app-as-a-Docker-container" class="headerlink" title="Package the ASP.NET Core 1.1 app as a Docker container"></a>Package the ASP.NET Core 1.1 app as a Docker container</h3><p>接著一樣發佈該應用程式：</p>
<pre><code>dotnet publish -c Release;
</code></pre><p>到該發行的目錄下建立Dockerfile:</p>
<pre><code>cd bin/Release/netcoreapp1.1/publish;touch Docker;vi Dockerfile
</code></pre><p>這邊要注意我們的FROM要改為 <em>microsoft/dotnet:1.1.1-runtime</em> 並修改 ENTRYPOINT 內運行的dll名稱：</p>
<pre><code>FROM microsoft/dotnet:1.1.1-runtime
COPY . /app
WORKDIR /app

EXPOSE 8080/tcp
ENV ASPNETCORE_URLS http://*:8080

ENTRYPOINT [&quot;dotnet&quot;, &quot;GAENetCoreApp.dll&quot;]
</code></pre><p>如果本機有 Docker 則可以建立image：</p>
<pre><code>docker build -t blackie1019/aspnetcoredemo:gae .
</code></pre><p>運行起來後到<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>看看</p>
<pre><code>docker run -d -p 8080:8080 -t blackie1019/aspnetcoredemo:gae
</code></pre><p><img src="gae_local_docker.png" alt="gae_local_docker"></p>
<h3 id="Create-app-yaml-for-App-Engine-flexible"><a href="#Create-app-yaml-for-App-Engine-flexible" class="headerlink" title="Create app.yaml for App Engine flexible"></a>Create app.yaml for App Engine flexible</h3><p>接著我們新增 app.yaml 並添加下面設定：</p>
<pre><code>service: netcore-latest-version
runtime: custom
env: flex
automatic_scaling:
min_num_instances: 1
max_num_instances: 3
cool_down_period_sec: 60 # default value
cpu_utilization:
    target_utilization: 0.5
</code></pre><p>這邊我們設定它的擴展從1個instance開始並且依據CPU的使用率(如果達到50%就開一個新的instance,最多到3個instance)．</p>
<h3 id="Using-Google-Cloud-SDK-to-Deploy"><a href="#Using-Google-Cloud-SDK-to-Deploy" class="headerlink" title="Using Google Cloud SDK to Deploy"></a>Using Google Cloud SDK to Deploy</h3><p>當我們設定好了app.yaml後我們透過gcloud info指令確定一下當前登入的專案是否正確：</p>
<p><img src="gcloud_shell_incorrect_project.png" alt="gcloud_shell_incorrect_project"></p>
<p>這邊我們可以透過下方指令查詢目前的設定：</p>
<pre><code>gcloud config configurations list
</code></pre><p>切換至不同設定：</p>
<pre><code>gcloud config configurations activate &lt;YOUR_CONFIG&gt;
</code></pre><p>接著我們可以幫我們的設定檔案加入不同的屬性，這邊加入 <em>account</em> 與 <em>project</em> :</p>
<pre><code>gcloud config set account blackie1019@gmail.com
gcloud config set project clean-respect-165712
</code></pre><p>其他請參考<a href="https://cloud.google.com/sdk/gcloud/reference/config/set" target="_blank" rel="external">gcloud config set</a></p>
<p>當設定完成，我們就可以部署上去：</p>
<pre><code>gcloud app deploy
</code></pre><p>這邊會用 gcloud 的設定檔與 app.yaml 指定的 service 作部署，所以我們可以回到ＵＩ界面看到我們的 Services 多了一個版本紀錄：</p>
<p><img src="app_engine_serices_update.png" alt="app_engine_serices_update"></p>
<p>這邊也可以看到 Versions 舊的設定已經stopped，啟用的是新的設定．</p>
<p><img src="app_engine_versions_update.png" alt="app_engine_versions_update"></p>
<p>而當我們在回到原本部署出去的頁面<a href="https://clean-respect-165712.appspot.com/" target="_blank" rel="external">https://clean-respect-165712.appspot.com/</a>，可以看到中間的Banner顯示目前的運行版本是ASP.NET Core 1.1 版本．</p>
<p><img src="netcore_latest_result.png" alt="netcore_latest_result"></p>
<h2 id="補充-Why-Google-Cloud-Platform"><a href="#補充-Why-Google-Cloud-Platform" class="headerlink" title="[補充] Why Google Cloud Platform"></a>[補充] Why Google Cloud Platform</h2><p>身為一個.NET的愛好者來說，Azure應該是首選，但為什麼我會積極的介紹GCP呢？理由很簡單：錢與擴充性！</p>
<p>而各個主流 Cloud 的選擇可以參考下面的文章：</p>
<ul>
<li><a href="https://blog.gcp.expert/google-cloud-v-aws/#more-127" target="_blank" rel="external">該選哪朵雲？比較兩大雲端供應商 GCP 與 AWS</a></li>
<li><a href="http://cloudacademy.com/blog/aws-vs-microsoft-azure-google-cloud/" target="_blank" rel="external">An AWS user’s take on AWS vs. Microsoft Azure and Google Cloud Platform</a></li>
<li><a href="https://www.sitepoint.com/a-side-by-side-comparison-of-aws-google-cloud-and-azure/" target="_blank" rel="external">A Side-by-Side Comparison of AWS, Google Cloud and Azure</a></li>
</ul>
<p>一個雲端服務除了一開始的技術與架構門檻跨過後，剩下的大概就是三個問題：錢、錢、錢</p>
<p>雲端的服務使用時間、空間、與用了多少方便的服務都是要錢的，既然如此一開始的考量應該是我們都能達到需求的情況下誰真的能給予最划算的價錢</p>
<p><img src="gcp_good_parts.png" alt="gcp_good_parts"></p>
<p>而這邊不拿Azure出來比較是因為Azure有的服務AWS都有，考量到ASP.NET Core本身就是一個跨平台的技術，如果不能跨<em>雲端平台</em>被綁死在微軟自己體系下豈不是有點可惜？</p>
<p>ASP.NET Core天生就與Azure的整合應該是最好的，而使用AWS的人又佔了雲端50%以上的用戶，不缺與AWS整合的文章或學習資源．</p>
<p>所以為了多元的推廣 <em>ASP.NET Core</em> 這樣一個好技術與雲端平台的其他選擇，我開始了這一系列<a href="http://blackie1019.github.io/categories/Google-Cloud-Platform">Google Cloud Platform</a>的文章．之後我分享更多ASP.NET Core能與GCP服務整合的實務案例，提供整體架構選擇上的一另一種組合！</p>
<p>而擴充性，這邊強調Google的Firebase實在是直得大家研究的工具，他大大減少整個應用程式開發的底層架構，大家都知道要研發汽車，我們不用重複製作輪子，一樣的道理，要製作網站我們也不用所有功能都自己套用套件開發，有些服務或功能在大部分網站或是手機應用程式的服務上都是必備的功能，這邊Firebase就是一個很好的解決方案．</p>
<p>對於Firebase有興趣的朋友可以參考另外一篇的<a href="http://blackie1019.github.io/2017/04/19/ASP-NET-Core-play-with-Firebase/">ASP.NET Core play with Firebase</a>介紹．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://cloud.google.com/appengine/docs/flexible/dotnet/quickstart?hl=zh-TW" target="_blank" rel="external">Quickstart for .NET in the App Engine Flexible Environment</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/cloud-app-engine-aspnetcore/" target="_blank" rel="external">Deploy an ASP.NET Core app to App Engine</a></li>
<li><a href="https://www.google.com.tw/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;ved=0ahUKEwifhLmx583TAhWEXLwKHYgHBOMQjhwIBQ&amp;url=https%3A%2F%2Fwww.slideshare.net%2Fpeihsinsu%2Fgoogle-app-engine-gae&amp;psig=AFQjCNF34tP6rm0UkKN-N0nXTGIZE3mKJg&amp;ust=1493697617594049" target="_blank" rel="external">Google App Engine (GAE) 演進史</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Google Cloud Platform </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> GCP </tag>
            
            <tag> GAE </tag>
            
            <tag> Google App Engine </tag>
            
            <tag> Container </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core Create New Project Template]]></title>
      <url>https://blackie1019.github.io/2017/04/27/ASP-NET-Core-Create-New-Project-Template/</url>
      <content type="html"><![CDATA[<p>介紹如何新增一個專案樣板(Project Template)並新增至 .NET CLI 中方便我們重複使用</p>
<a id="more"></a>
<p><img src="header.png" alt="header"></p>
<p>建立一個新專案往往都會有些習慣性會加入的套件或是修改，如果每次都要重複一樣的步驟是很煩人的．如網站開發常常會用到的資料儲存的套件，或是API開發會需要使用到的說明與測試套件等．</p>
<p>而在.NET Core的部份可透過.NET CLI幫忙建立客製化的專案樣板，達到輕鬆重複建立同類型新專案環境的需求．而在.NET Core的部份可透過.NET CLI幫忙建立客製化的專案樣板，達到輕鬆重複建立同類型新專案環境的需求．</p>
<p>這邊我們將示範建立一個Web API專案，並加入 <a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="external">Swashbuckle.AspNetCore</a> , <a href="https://github.com/mongodb/mongo-csharp-driver" target="_blank" rel="external">MongoDB.Driver</a> 與 <a href="https://github.com/StackExchange/StackExchange.Redis" target="_blank" rel="external">StackExchange.Redis</a>．並將這樣的專案設定為的新樣板，透過新樣板在建立新專案．</p>
<h2 id="Create-Customize-Project"><a href="#Create-Customize-Project" class="headerlink" title="Create Customize Project"></a>Create Customize Project</h2><p>這邊我們先用Web API的樣板幫我們成立新專案並加入 <em>Swashbuckle.AspNetCore</em> , <em>MongoDB.Driver</em> 與 <em>StackExchange.Redis</em> :</p>
<pre><code>mkdir app || cd app
dotnet new webapi
dotnet add package Swashbuckle.AspNetCore
dotnet add package MongoDB.Driver
dotnet add package StackExchange.Redis
dotnet restore
</code></pre><p>可以看到我們專案有載入以下packages:</p>
<p><img src="structure_dependency.png" alt="structure_dependency"></p>
<p>這邊我們先將Swagger的環境設定好:</p>
<p>Startup.cs<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</div><div class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</div><div class="line"></div><div class="line"><span class="keyword">using</span> Swashbuckle;</div><div class="line"><span class="keyword">using</span> Swashbuckle.AspNetCore.Swagger;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">NetCoreTemplateDemo</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</div><div class="line">                .SetBasePath(env.ContentRootPath)</div><div class="line">                .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>)</div><div class="line">                .AddJsonFile(<span class="string">$"appsettings.<span class="subst">&#123;env.EnvironmentName&#125;</span>.json"</span>, optional: <span class="literal">true</span>)</div><div class="line">                .AddEnvironmentVariables();</div><div class="line">            Configuration = builder.Build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> IConfigurationRoot Configuration &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Add framework services.</span></div><div class="line">            services.AddMvc();</div><div class="line">            services.AddSwaggerGen(c =&gt;</div><div class="line">            &#123;</div><div class="line">                c.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> Info &#123; Title = <span class="string">"My API"</span>, Version = <span class="string">"v1"</span> &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></div><div class="line">        &#123;</div><div class="line">            loggerFactory.AddConsole(Configuration.GetSection(<span class="string">"Logging"</span>));</div><div class="line">            loggerFactory.AddDebug();</div><div class="line"></div><div class="line">            app.UseMvc();</div><div class="line">            app.UseSwagger();</div><div class="line">            app.UseSwaggerUI(c =&gt;</div><div class="line">            &#123;</div><div class="line">                c.SwaggerEndpoint(<span class="string">"/swagger/v1/swagger.json"</span>, <span class="string">"My API V1"</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接著將網站運行起來</p>
<pre><code>dotnet run
</code></pre><p>我們就可以透過 <a href="http://localhost:5000/swagger/#/" target="_blank" rel="external">http://localhost:5000/swagger/#/</a> 看到以下畫面：</p>
<p><img src="swagger.png" alt="swagger"></p>
<p>到此專案的框架已經準備好，接著我們透過 <em>.NET CLI</em> 幫我們建立樣板</p>
<h2 id="Build-New-Customize-Project-Template"><a href="#Build-New-Customize-Project-Template" class="headerlink" title="Build New Customize Project Template"></a>Build New Customize Project Template</h2><p>開始前先看一下等等要新增資料夾的結構：</p>
<p><img src="structure_folder.png" alt="structure_folder"></p>
<h3 id="dotnet-new-i"><a href="#dotnet-new-i" class="headerlink" title="dotnet new -i "></a>dotnet new -i <template folder=""></template></h3><p>這邊最簡單的做法是透過 <em>.template.config</em> 資料夾並在裡面新增 <em>template.json</em> 的方式建立新樣板結構:</p>
<p>template.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Blackie Tsai"</span>,</div><div class="line">  <span class="attr">"classifications"</span>: [<span class="string">"BK Templates"</span>,<span class="string">"WebAPI"</span>],</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"WebAPI + Swagger + Redis + MongoDB"</span>,</div><div class="line">  <span class="attr">"tags"</span>: &#123;</div><div class="line">    <span class="attr">"language"</span>: <span class="string">"C#"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"identity"</span>: <span class="string">"BK.WebAPI"</span>,</div><div class="line">  <span class="attr">"shortName"</span>: <span class="string">"bkwebapi"</span>,</div><div class="line">  <span class="attr">"guids"</span>: [ <span class="string">"dc46e9be-12d2-43c5-ac94-5c7019d59196"</span> ],</div><div class="line">  <span class="attr">"sourceName"</span>: <span class="string">"BK.WebAPI"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>這邊參數可以參考<a href="https://github.com/dotnet/templating/wiki/%22Runnable-Project%22-Templates" target="_blank" rel="external">官方wiki</a>．</p>
<p>接著透過.NET CLI執行以下指令完成安裝，要注意路徑是你的專案路徑:</p>
<pre><code>dotnet new --install /Users/blackie/Desktop/DEV/blackie1019/NetCoreTemplateDemo
</code></pre><p>完成後即可以查看一下目前的專案樣板是否有新增成功：</p>
<p><img src="templates.png" alt="templates"></p>
<p>新增成功後我們即可透過我們的樣板定義的 <em>shortName</em> 來建立新專案</p>
<p><img src="temaple_new_project.png" alt="temaple_new_project"></p>
<h3 id="Remove-Customize-Project"><a href="#Remove-Customize-Project" class="headerlink" title="Remove Customize Project"></a>Remove Customize Project</h3><p>很遺憾與不方便的是目前 <em>.NET CLI</em> 沒有單獨移除的方法，目前能達到的移除效果的指令只有還原，請參考下面：</p>
<pre><code>dotnet new --debug:reinit
</code></pre><p>再次提醒！這會將我們的設定都還原(原先安裝的其他templates也會因為恢復而被移除)，所以使用上要特別注意一下．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blogs.msdn.microsoft.com/dotnet/2017/04/02/how-to-create-your-own-templates-for-dotnet-new/" target="_blank" rel="external">How to create your own templates for dotnet new</a></li>
<li><a href="http://dotnetthoughts.net/create-a-dot-net-new-project-template-in-dot-net-core/" target="_blank" rel="external">Create a dotnet new project template in dotnet core</a></li>
<li><a href="http://rehansaeed.com/custom-project-templates-using-dotnet-new/" target="_blank" rel="external">Custom Project Templates Using dotnet new</a></li>
<li><a href="https://blogs.msdn.microsoft.com/dotnet/2017/04/02/how-to-create-your-own-templates-for-dotnet-new/" target="_blank" rel="external">.NET Blog : How to create your own templates for dotnet new</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> .NET CLI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Quick Implement FullScreen and other controls on HLS.JS with Plyr.JS]]></title>
      <url>https://blackie1019.github.io/2017/04/26/Quick-Implement-FullScreen-and-other-controls-on-HLS-JS-with-Plyr-JS/</url>
      <content type="html"><![CDATA[<p>使用 Plyr.JS 快速的幫HTML5的 video tag支援更多功能並輕鬆客製化介面</p>
<a id="more"></a>
<p>先前有介紹過 <em>HLS.JS</em> 這個套件來協助瀏覽器支援HTML5的video tag 能正常播放HLS格式的影片，今天要來介紹另外一個樣式漂亮且功能強大的套件</p>
<p><img src="plyr.png" alt="plyr"></p>
<h2 id="Plyr-JS-Introduction"><a href="#Plyr-JS-Introduction" class="headerlink" title="Plyr.JS Introduction"></a>Plyr.JS Introduction</h2><p><a href="https://github.com/selz/plyr" target="_blank" rel="external">Plyr.JS</a>是一個輕巧漂亮的HTML5播放器的 <em>video</em> 標籤，這讓我們可以簡單輕鬆的將套件接到目前的網頁中．而它本身也將樣式呈現都放到自己的css檔案內方便我們做調整跟客製化．</p>
<p>以下節錄官方列出來的功能：</p>
<p>Features:</p>
<ul>
<li><em>Accessible</em> - full support for VTT captions and screen readers</li>
<li><em>Lightweight</em> - under 10KB minified and gzipped</li>
<li><em>Customisable</em> - make the player look how you want with the markup you want</li>
<li><em>Semantic</em> - uses the right elements. <input type="range"> for volume and <progress> for progress and well, <button>s for buttons. There’s no <span> or <a href="#"> button hacks</a></span></button></progress></li>
<li><em>Responsive</em> - works with any screen size</li>
<li>HTML <em>Video</em> &amp; <em>Audio</em> - support for both formats</li>
<li><em>Embedded Video</em> - support for YouTube and Vimeo video playback</li>
<li><em>Streaming</em> - support for hls.js, Shaka and dash.js streaming playback</li>
<li><em>API</em> - toggle playback, volume, seeking, and more</li>
<li><em>Events</em> - no messing around with Vimeo and YouTube APIs, all events are standardized across formats</li>
<li><em>Fullscreen</em> - supports native fullscreen with fallback to “full window” modes</li>
<li><em>Shortcuts</em> - supports keyboard shortcuts</li>
<li><em>i18n support</em> - support for internationalization of controls</li>
<li><em>No dependencies</em> - written in “vanilla” JavaScript, no jQuery required</li>
<li><em>SASS</em> and <em>LESS</em> - to include in your build processes</li>
<li>Works with <strong>Bootstrap</strong>.</li>
</ul>
<p>而這邊我們也提到可以結合HLS.JS讓我們的瀏覽器如：Desktop的Chrome 播放HLS格式的影片並套用此播放器的其他功能．</p>
<h2 id="Pyer-JS-HLS-JS"><a href="#Pyer-JS-HLS-JS" class="headerlink" title="Pyer.JS + HLS.JS"></a>Pyer.JS + HLS.JS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'player'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (Hls.isSupported()) &#123;</div><div class="line">    <span class="keyword">var</span> hls = <span class="keyword">new</span> Hls();</div><div class="line">    hls.loadSource(<span class="string">'http://content.jwplatform.com/manifests/vM7nH0Kl.m3u8'</span>);</div><div class="line">    hls.attachMedia(video);</div><div class="line">    hls.on(Hls.Events.MANIFEST_PARSED, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        video.play();</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">plyr.setup(video);</div></pre></td></tr></table></figure>
<p>呈現上與預設的HLS.JS的比較如下：</p>
<p><img src="difference.png" alt="difference.png"></p>
<p>有興趣的可以<a href="https://github.com/blackie1019/PlyrHLSDemo" target="_blank" rel="external">參考這個範例</a>．</p>
<p>至於為什麼還要特別用Plyr.JS呢，當你想要的播放功能（如 全螢幕或是自動播放等功能在<em>當前瀏覽器不支援時</em>)或是樣式需要做些調整或是客製化的時候，非常建議大家<strong>在前人的輪子上面製造車子</strong>!</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> HLS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Quick Host Static Web on Node.JS]]></title>
      <url>https://blackie1019.github.io/2017/04/25/Quick-Host-Static-Web-on-Node-JS/</url>
      <content type="html"><![CDATA[<p>介紹如何使用NodeJS的套件幫我們快速建立靜態網頁的Hosting服務，解決 Cross-Origin Resource Sharing (CORS) 問題</p>
<a id="more"></a>
<p>在本機開發靜態網頁時，常常會遇到本機 <em>Cross-Origin Resource Sharing (CORS)</em> 的問題，而這也讓我們時常需要額外起一個Web Hosting服務如Apach, IIS 或是NodeJS來幫我們將服務請求才可以達到簡單的跨網域的請求開發．而今天要分享如何在3分鐘內透過 <em>NodeJS</em> + <em>node-static</em> 這個套件將一個靜態網站服務建立．</p>
<h2 id="What-is-Cross-Origin-Resource-Sharing-CORS"><a href="#What-is-Cross-Origin-Resource-Sharing-CORS" class="headerlink" title="What is Cross-Origin Resource Sharing (CORS)"></a>What is Cross-Origin Resource Sharing (CORS)</h2><p>跨網站(HTTP)請求是指發出請求所在網域不同於請求所指向之網域的 HTTP 請求，例如網域 A（<a href="http://domain-a.com）的網頁載入一個" target="_blank" rel="external">http://domain-a.com）的網頁載入一個</a> <img> 中的 src 屬性內的資料， 它向網域 B（<a href="http://domain-b.com）請求圖片資源（http://domainb.b/image.jpg）。這是我們在網頁當中時長常常使用的一項技術，可載入其他網站資源，像是" target="_blank" rel="external">http://domain-b.com）請求圖片資源（http://domainb.b/image.jpg）。這是我們在網頁當中時長常常使用的一項技術，可載入其他網站資源，像是</a> CSS 樣式表、影像、程式碼等等資源。</p>
<p><img src="CORS_principle.png" alt="CORS_principle"></p>
<p>但基於安全性考量，程式碼所發出的跨站 HTTP 請求受到相當限制，好比說用 XMLHttpRequest 及 Fetch 發出的請求受限於同源政策（same-origin policy），所以 XMLHttpRequest 或 Fetch 只能發送 HTTP 請求到和其所來自的相同的網域．而國際上也有 <em>OWASP</em>在2007年開始關注這樣的一個安全行為，特別將幾個行為視為要加強預防的重點，對此感興趣的可以到 <a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">OWASP 官網</a>看一下相關議題．</p>
<p>而 <em>Chrome</em> 預設也會拒絕此行為，這讓我們本機開發變成很麻煩．但我們可以將此權限打開．對於Chrome該如何開此權限跟為什麼要阻擋此行為可以參考之前的<a href="https://blackie1019.github.io/2016/10/04/No-Access-Control-Allow-Origin-header-is-present-on-the-requested-resource/">No Access-Control-Allow-Origin header is present on the requested resource</a>．</p>
<p>接下來我們就要介紹如何快速的建立一個靜態的網頁服務，幫我們解決本機開發的問題．</p>
<h2 id="Node-Package-node-static"><a href="#Node-Package-node-static" class="headerlink" title="Node Package -  node-static"></a>Node Package -  node-static</h2><p><a href="https://github.com/cloudhead/node-static" target="_blank" rel="external">node-static</a>是一個NodeJS的模組，只需將放置靜態資料的目錄與服務監聽的Port設定好，即可快速的建立靜態網頁的服務．</p>
<p>只需用NPM進行安裝：</p>
<pre><code>npm install --save node-static
</code></pre><p>本身的相依也不多:</p>
<p><img src="dependency.png" alt="dependency"></p>
<p>接著讓我們嘗試用它來解決一個實例．</p>
<h2 id="Facing-Problem-Get-Remote-Video-Resource-from-Local-index-html"><a href="#Facing-Problem-Get-Remote-Video-Resource-from-Local-index-html" class="headerlink" title="Facing Problem : Get Remote Video Resource from Local index.html"></a>Facing Problem : Get Remote Video Resource from Local index.html</h2><p>這邊我們介紹之前的一篇文章<a href="https://blackie1019.github.io/2017/04/02/HLS-js-for-Chrome-Desktop/">hls.js for Chrome Desktop</a>為範例：</p>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">preload</span>=<span class="string">"none"</span> <span class="attr">id</span>=<span class="string">"player"</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">crossorigin</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/hls.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'player'</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (Hls.isSupported()) &#123;</div><div class="line">                <span class="keyword">var</span> hls = <span class="keyword">new</span> Hls();</div><div class="line">                hls.loadSource(<span class="string">'http://content.jwplatform.com/manifests/vM7nH0Kl.m3u8'</span>);</div><div class="line">                hls.attachMedia(video);</div><div class="line">                hls.on(Hls.Events.MANIFEST_PARSED, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    video.play();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)();</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>這邊我們可以看到本機網頁一打開就可以看到 <em>CORS</em>的相關錯誤：</p>
<p><a href="index_error.png">index_error</a></p>
<p>而我們這邊透過安裝完node-static後，新增一個index.js的檔案並加入以下內容：</p>
<p>index.js:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'node-static'</span>);</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Create a node-static server instance to serve the './public' folder</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> <span class="keyword">static</span>.Server(<span class="string">'./index.html'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">    request.addListener(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// Serve files!</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        file.serve(request, response);</div><div class="line">    &#125;).resume();</div><div class="line">&#125;).listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure>
<p>當我們新增完後別忘記要幫 <em>package.json</em> 設定指令去啟動服務:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"plyr-hls-demo"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node index.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"blackie (http://blackie1019.github.io)"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"hls.js"</span>: <span class="string">"^0.7.6"</span>,</div><div class="line">    <span class="attr">"node-static"</span>: <span class="string">"^0.7.9"</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>當建立完成後即可透過透過下方指令啟動靜態網頁服務</p>
<pre><code>node start
</code></pre><p>執行畫面如下:</p>
<p><img src="index_success.png" alt="index_success"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP access control (CORS)</a></li>
<li><a href="https://vaadin.com/blog/-/blogs/using-cors-with-vaadin" target="_blank" rel="external">Using CORS with Vaadin</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web Hosting </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code Find and Replace with New Line]]></title>
      <url>https://blackie1019.github.io/2017/04/24/Visual-Studio-Code-Find-and-Replace-with-New-Line-r-or-n/</url>
      <content type="html"><![CDATA[<p>介紹使用VSCode如何包括換行(new line)進行查詢</p>
<a id="more"></a>
<p>我們常常會有情況要做大量的文字置換，有可能是一個檔案裡面的多個地方，也有可能是一個特定資料夾內散落的特定副檔名(extension)檔案, 當然有時我們也會不管檔名是什麼只要有包含的內容全部換掉就對了．</p>
<p>VSCode 支援了上述所有情境的工作，而這次要為大家介紹如何在遍尋(find)與置換(replace)時能包含換行(new line)與其他文字．</p>
<p>例如：我們想將下圖 <em>categories</em> 下的 ASP.NET 換成 .NET，但是要避免置換到 <em>tags</em> 下的 ASP.NET</p>
<p><img src="single_file_before.png" alt="single_file_before"></p>
<p>先直接來看結果：</p>
<h2 id="How-To-Do-It"><a href="#How-To-Do-It" class="headerlink" title="How To Do It"></a>How To Do It</h2><p>VSCode 在 <a href="https://code.visualstudio.com/updates/June_2016#_multiline-find" target="_blank" rel="external">1.3</a>支援多行的Regular Expression．</p>
<p>這邊我們可以用下面快速指令開啟單一檔案的遍尋與置換工具列：</p>
<ul>
<li>Windows 按下 <em>Ctrl+e</em></li>
<li>Mac 按下 <em>Cmd+e</em></li>
</ul>
<p>當查詢工具列出來後我們貼上下面內容並將 <em>Use Regular Expression</em> 這選項勾起來進行全文查詢 ：</p>
<pre><code>(categories:)\r?\n- ASP.NET
</code></pre><p><img src="single_file.png" alt="single_file"></p>
<p>當然這個方法我們也能用在右方的Search功能上進行整個目錄的遍尋：</p>
<p><img src="multiple_files.png" alt="multiple_files"></p>
<p>但當我們用上面這個指令更換的時候會發現我們的確更換到我們想要更換的區段，但結果好像不如預期，這此我們可以將指令改為：</p>
<pre><code>(categories:)\n- ASP.NET
</code></pre><p>這邊的\n是因為筆者的mac換行用\n，替換的文字記得也改為\n．如此即可</p>
<pre><code>categories:\n- .NET
</code></pre><p>而目前如果在Search啟用 <em>Use Regular Expression</em> 只能針對有<strong>開啟</strong>的檔案進行查詢，這邊實務上建議大家可以先關閉<em>Use Regular Expression</em>將原本要替換的文字作統一更改，如：<em>- ASP.NET</em> 我們統一改為 <em>- ASP.NET.</em> ，當我們按下更新後 VSCode 會把相關的檔案都開啟並置換，此時我們可以再將文字從 <em>- ASP.NET.</em> 改回 <em>- ASP.NET</em>．</p>
<p>接著再執行上一個段落的指令就可以成功將所有開啟檔案做遍尋了</p>
<p>如此即可有效的更換在專案資料內一次批次做替換了</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/Microsoft/vscode/issues/313" target="_blank" rel="external">VSCode - Find does not match multi-line regex strings</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Spreadsheet Detecting Duplicate Item]]></title>
      <url>https://blackie1019.github.io/2017/04/23/Google-Spreadsheet-Detecting-Duplicate-Item/</url>
      <content type="html"><![CDATA[<p>分享如何在 Google Spreadsheet 設定函示，針對Column檢查有無重複的值</p>
<a id="more"></a>
<p>今天假設幫社團開一個表單來讓各位社員填寫籃球球衣球褲的購買登記，其中號碼這個欄位不能重複</p>
<p>先看結果如下:</p>
<p><img src="preview.gif" alt="preview"></p>
<p>實際成品<a href="https://docs.google.com/spreadsheets/d/1zDnU-_eIQJyYhcRvd8kxtUCQ2vM0CvmRxLs-Fh2Gwx0/edit?usp=sharing" target="_blank" rel="external">請參考</a></p>
<h2 id="Add-Dropbox-by-Data-Validation"><a href="#Add-Dropbox-by-Data-Validation" class="headerlink" title="Add Dropbox by Data Validation"></a>Add Dropbox by Data Validation</h2><p>新增下拉資料到Sheet2，如下:</p>
<p><img src="setup_6.png" alt="setup_6"></p>
<p>接著針對要提供下拉的欄位按住滑鼠右鍵新增<em>Data validation</em>:</p>
<p><img src="setup_1.png" alt="setup_1"></p>
<p>在<em>Criteria</em>中下拉選擇<em>List from a range</em>，並填入要提供的下拉資料區間。這可以選擇的填入help text來幫我們提醒使用者:</p>
<p><img src="setup_2.png" alt="setup_2"></p>
<p>在頁面上就可以看到下拉已經出現並會跳出指定的提醒文字:</p>
<p><img src="setup_4.png" alt="setup_4"></p>
<p>接著繼續完成剩下的下拉選項的設定，這可以試著勾選<em>Reject input</em>來禁止使用者輸入:</p>
<p><img src="setup_3.png" alt="setup_3"></p>
<p>完成後即可看到這部分的資料只能從下拉選項中選擇:</p>
<p><img src="setup_5.png" alt="setup_5"></p>
<h2 id="Detecting-Duplicate-Value-in-Column"><a href="#Detecting-Duplicate-Value-in-Column" class="headerlink" title="Detecting Duplicate Value in Column"></a>Detecting Duplicate Value in Column</h2><p>接下來用<em>countif</em>這個函式來幫我判斷特定欄位是否有重複的值:</p>
<pre><code>=countif(C4:C41,C4)&gt;1
</code></pre><p>這邊當放上個寫法後就會去抓指定欄位是否有大於1的累加值，如果答案有重複的則會顯示<em>TRUE</em>，如果沒有重複則會顯示<em>FALSE</em></p>
<h2 id="Add-Conditional-Formatting-for-Column"><a href="#Add-Conditional-Formatting-for-Column" class="headerlink" title="Add Conditional Formatting for Column"></a>Add Conditional Formatting for Column</h2><p>這邊將顯示加上樣式以便區分不同的狀態:</p>
<p><img src="setup_7.png" alt="setup_7"></p>
<p>在這邊可以透過<em>Format cells if</em>選擇該欄資料(cell)的判斷規則:</p>
<p><img src="setup_8.png" alt="setup_8"></p>
<p>下拉選擇<em>Text contains</em>就會針對有包含該特定文字的cell進行該樣式的套用:</p>
<p><img src="setup_9.png" alt="setup_9"></p>
<p>完成後看一下剛剛的設定，如下(值為TRUE時給予紅色代表錯誤):</p>
<p><img src="setup_10.png" alt="setup_10"></p>
<p>接著重複剛剛的步驟把正確時(值為FALSE給予湖水綠色代表正確)的樣式也新增套用上去，即可看到無重複資料時的結果:</p>
<p><img src="setup_11.png" alt="setup_11"></p>
<p>有重複資料時的結果</p>
<p><img src="setup_12.png" alt="setup_12"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://support.google.com/docs/answer/3256550?hl=zh-Hant" target="_blank" rel="external">COUNTIFS</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Google Spreadsheet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visaul Studio Code Quick Blame with GitLens]]></title>
      <url>https://blackie1019.github.io/2017/04/22/Visaul-Studio-Code-Quick-Blame-with-GitLens/</url>
      <content type="html"><![CDATA[<p>使用GitLens套件，讓你的VSCode一秒看懂現在的程式碼是充滿靈性還是充滿鬼話</p>
<a id="more"></a>
<p>現在多半我們在寫程式或是文件的時候都是多人協同工作或是使用版本管控系統(Version Control System)，檔案內容多又雜就不用多說了，常常會發生有一段程式碼或是文章區塊你怎麼看都看不懂，當下只有一種<em>這是誰寫的啊</em>的感覺，而後我們通常都一段謾罵或是嘈諷後才發現好像是自己種下的希望種子(QQ)．</p>
<p>為了讓我們可以快速Blame到目前程式碼是誰在什麼時候commit的，理由又是什麼，今天就來介紹<em>GitLens</em>這個套件給大家</p>
<h2 id="GitLens-for-VSCode"><a href="#GitLens-for-VSCode" class="headerlink" title="GitLens for VSCode"></a>GitLens for VSCode</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="external">GitLens</a> 的安裝請參考之前的文章，或是 VS Code Quick Open (⌘+P)輸入<em>ext install gitlens</em> 即可．</p>
<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><p>此套件主要是建立在<em>git blame</em>的功能上，而當我們使用Git作為我們版本管控的工具後，你可以用 git blame 來檢視標注該檔案，查看檔案的每一行分別是由哪一位人員在哪一天修改的commit進去版控的。</p>
<pre><code>git blame &lt;targetfile&gt;
</code></pre><p><img src="git_blame.png" alt="git_blame"></p>
<p>如上我們就可以看出各別誰commit的，但這真的很難一目了然…</p>
<h2 id="How-to-Use-GitLens"><a href="#How-to-Use-GitLens" class="headerlink" title="How to Use GitLens"></a>How to Use GitLens</h2><p>而如果我們安裝了GitLens則變成簡單多了，我們先看還沒安裝前這篇文章的在VSCode的呈現</p>
<p><img src="before.png" alt="before"></p>
<p>安裝後</p>
<p><img src="after.png" alt="after"></p>
<p>是不是Magic! </p>
<p>安裝完後，我們編輯器的每個file的右上角也會多出一個<em>Toggle Blame Annotation</em>來幫助我們展開各行詳細的commit區塊:</p>
<p><img src="test.gif" alt="test"></p>
<p>當然還有更多功能，就麻煩上官網去發掘並給予五星回饋肯定作者的貢獻吧!</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://git-scm.com/book/zh-tw/v1/Git-%E5%B7%A5%E5%85%B7-%E4%BD%BF%E7%94%A8-Git-%E5%81%9A-Debug" target="_blank" rel="external">Git 工具 - 使用 Git 做 Debug</a></li>
<li><a href="http://www.cnblogs.com/lanxuezaipiao/p/3552805.html" target="_blank" rel="external">每一行代码都有记录—如何用git一步步探索项目的历史</a></li>
<li><a href="https://www.youtube.com/watch?v=_uOpqobNzWY" target="_blank" rel="external">強大的 Git Extension: GitLens - VS Code Extension | How-To | Editor 編輯者 #5</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core MVC play with Google App Engine - Standard Environment]]></title>
      <url>https://blackie1019.github.io/2017/04/21/ASP-NET-Core-MVC-play-with-Google-App-Engine-Standard-Environment/</url>
      <content type="html"><![CDATA[<p>先前為大家介紹了Google Cloud Platform，這次將介紹如何實際將ASP.NET Core MVC專案放置在Google App Engine(GAE)的Standard環境運行。</p>
<a id="more"></a>
<p>先前分享過一篇<a href="http://blackie1019.github.io/2017/04/11/Google-Cloud-Platform-Introduction/">Google Cloud Platform Introduction</a>為大家介紹了整個GCP家族的架構與建立一個基本的 Google Compute Engine 並在上面透過 Virtual Machine(VM)的方式運行的Windows Server + IIS + ASP.NET Framework的網頁應用程式。</p>
<p>不同於前一篇我們使用VM的方式將應用程式環境整個架設起來，我們這次將透過 Google Cloud Shell 與 Google App Engine(GAE) 架設一個輕量環境的 ASP.NET Core 網頁應用程式。</p>
<h2 id="Google-App-Engine"><a href="#Google-App-Engine" class="headerlink" title="Google App Engine"></a>Google App Engine</h2><p>GCP的服務基本上從需要較多環境/設備管理控制的IaaS到平台服務開通就可以使用的PaaS都有提供對應的服務:</p>
<p><img src="Iaas_Paas.png" alt="Iaas_Paas"></p>
<p>這邊我們先簡單看一下IaaS, PaaS甚至SaaS的差別:</p>
<ul>
<li><p><em>IaaS</em>: Infrastructure as a Service - 基礎設施即服務</p>
<p>  提供基礎架構的雲端服務，包含硬體資源給客戶，包括：運算 技術、儲存、網路、…等等資源。用於安全的使用環境並給予合理的運算機性能、儲存機能、網路環境等基礎建設。</p>
</li>
<li><p><em>PaaS</em>: Platform as a Service - 平台即服務</p>
<p>  PaaS在網上提供各種開發和分發應用的解決方案，比如虛擬伺服器和作業系統。這節省了在硬體上的費用，也讓之間的合作變得更加容易。包括網頁應用管理，應用設計，應用虛擬主機，存儲，安全以及應用開發協作工具等。</p>
</li>
<li><p><em>SaaS</em>：Software-as-a-Service - 軟體即服務</p>
<p>  一種通過Internet提供軟體的模式，用戶不用再購買軟體，而改用向提供商租用基於Web的軟體，如<a href="https://gsuite.google.com/intl/zh-tw/" target="_blank" rel="external">G Suit</a></p>
</li>
</ul>
<p>但本篇討論只會談到GCP上的PaaS的Google App Engine(GAE)。</p>
<p>Google在2008年推出GAE，讓開發者可以在遵循一定的開發原則/規則後，可以透過App Engine的工具來部署到GCP上，讓開發者可以不用受到開發以外其他雜事的煩惱(如部署、監控、維運等等的)。</p>
<p>目前 GAE 服務面向已經可以整合開發者整個完整的開發生命流程，包含開發、測試、部署，甚至協市場的AB測試、版本更新的發佈等動作，都可以完整的在GAE上運作。</p>
<p>GAE本身可以分為兩個, <em>Standard Environment</em> 與 <em>Flexible Environment</em>:</p>
<ul>
<li><p><em>Standard Environment</em></p>
<p>  Standard Environment是延續GAE一開始推出的語言與功能持續加強各項功能的PaaS服務，目前支援Java 7, Python 2.7, PHP 5.5, Go 1.6 等四種程式語言與版本，透過Google建置好的平台可以快速的達到自動的橫向擴展，並提供即時的監控資料。</p>
<p>  另外，<strong>Standard Environment提供每天28個instance hour(s)的免費額度</strong>，還有其他的的免費額度優惠，讓開發者可以在免費的範圍內開發與測試自己的應用程式，其他詳情請參考<a href="https://cloud.google.com/appengine/quotas" target="_blank" rel="external">https://cloud.google.com/appengine/quotas</a></p>
</li>
<li><p><em>Flexible Environment</em></p>
<p>  Flexible Environment主要是想要提供有別於標準環境(Standard Environment)的限制，但是又具備大部份標準環境的自動化功能，透過Flexible Environment還可以進一步的區分成Standard Runtime以及Custom Runtime彈性的配置我們的環境。</p>
<p>  這邊無論是哪一個Runtime，都是以Container的方式來運行，並將環境封裝後可以透過GCP來運行.</p>
</li>
</ul>
<p>簡單來講Standard提供了一個封裝好的環境，提供相對便宜的價格，而Flexible則提供了我們自己可以克制的環境，但價格上面會稍微貴一點。</p>
<p>這邊價格都以US來做比較可以參考下圖:</p>
<ul>
<li><em>Standard environment instances</em>:</li>
</ul>
<table>
<thead>
<tr>
<th>Instance class</th>
<th>Cost per hour per instance</th>
</tr>
</thead>
<tbody>
<tr>
<td>B1</td>
<td>$0.05</td>
</tr>
<tr>
<td>B2</td>
<td>$0.10</td>
</tr>
<tr>
<td>B4</td>
<td>$0.20</td>
</tr>
<tr>
<td>B4_1G</td>
<td>$0.30</td>
</tr>
<tr>
<td>B8</td>
<td>$0.40</td>
</tr>
<tr>
<td>F1</td>
<td>$0.05</td>
</tr>
<tr>
<td>F2</td>
<td>$0.10</td>
</tr>
<tr>
<td>F4</td>
<td>$0.20</td>
</tr>
<tr>
<td>F4_1G</td>
<td>$0.30</td>
</tr>
</tbody>
</table>
<ul>
<li><em>Flexible environment instances</em>:</li>
</ul>
<table>
<thead>
<tr>
<th>Resource</th>
<th>Unit</th>
<th>Unit cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>vCPU</td>
<td>per core hour</td>
<td>$0.0526</td>
</tr>
<tr>
<td>Memory</td>
<td>per GB hour</td>
<td>$0.0071</td>
</tr>
<tr>
<td>Persistent disk</td>
<td>per GB per month</td>
<td>$0.0400</td>
</tr>
</tbody>
</table>
<p>這邊可以看到Standard的計算就很簡單了，單看你在什麼規模執行多久，但Flexible就需要針對使用的資源做計算了。</p>
<p>詳細的計算可以參考<a href="https://cloud.google.com/products/calculator/#tab=app-engine" target="_blank" rel="external">Google Cloud Platform Pricing Calculator</a>。</p>
<h2 id="Standard-Environment-with-ASP-NET-Core"><a href="#Standard-Environment-with-ASP-NET-Core" class="headerlink" title="Standard Environment with ASP.NET Core"></a>Standard Environment with ASP.NET Core</h2><h3 id="Google-Cloud-Shell"><a href="#Google-Cloud-Shell" class="headerlink" title="Google Cloud Shell"></a>Google Cloud Shell</h3><p><em>Google Cloud Shell</em>是一個協助開發者在任何瀏覽器中使用命令行管理基礎設施和應用的<em>免費工具</em>。有了Google Cloud Shell我們就不用擔心當我們起一個App Engine時需要先安裝什麼工具才可以將我們的程式部屬上去，因為他支援了我們常見的命令列工具。</p>
<p>除了Google Cloud SDK已經幫我們載入:</p>
<p><img src="used-console.png" alt="used-console"></p>
<p>其他我們會用到的也幫忙我們準備好了:</p>
<p><img src="shell_support.png" alt="shell_support"></p>
<p>以下是他的特色:</p>
<ul>
<li>是一個暫時的Compute Engine <a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#virtual_machine_instance" target="_blank" rel="external">virtual machine instance</a></li>
<li>支援網頁瀏覽器直接開啟使用</li>
<li>Cloud Shell保留5G的空間來讓我們放資料在Home資料夾內</li>
<li>預先裝載了Google Cloud SDK 與<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#tools" target="_blank" rel="external">其他tools</a></li>
<li>預先裝載了<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#language_support" target="_blank" rel="external">多種語言的SDK</a>，包含Java, Go, Python, Node.js, PHP, Ruby與ASP.NET Core(Beta)</li>
<li>提供<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#web_preview" target="_blank" rel="external">Web Perview</a>功能可直接連接至該Instance當前對外的IP</li>
<li>內建 <a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#authorization" target="_blank" rel="external">authorization</a> 去整合 Cloud Platform Console 專案(projects) and 資源(resources)</li>
</ul>
<p>其他細節可以參考官方文件<a href="https://cloud.google.com/shell/docs/?hl=zh-TW" target="_blank" rel="external">Google Cloud Shell</a>，而當前開發工具與語言支援可以參考<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#tools" target="_blank" rel="external">Available tools</a>與<a href="https://cloud.google.com/shell/docs/features?hl=zh-TW#language_support" target="_blank" rel="external">Language support</a>。以下節錄目前當前的內容:</p>
<h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p>目前預載的工具:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Tool</th>
</tr>
</thead>
<tbody>
<tr>
<td>Linux shell interpreters</td>
<td>bash, sh</td>
</tr>
<tr>
<td>Linux utilities</td>
<td>Standard Debian system utilities</td>
</tr>
<tr>
<td>Google SDKs and tools</td>
<td>Google App Engine SDK, Google Cloud SDK including the gcloud command-line tool, gsutil for Cloud Storage</td>
</tr>
<tr>
<td>Text editors</td>
<td>Emacs, Vim, Nano</td>
</tr>
<tr>
<td>Build and package tools</td>
<td>Gradle, Make, Maven, npm, nvm, pip</td>
</tr>
<tr>
<td>Source control tools</td>
<td>Git, Mercurial</td>
</tr>
<tr>
<td>Additional tools</td>
<td>Dockerm, iPython, MySQL client, gRPC compiler</td>
</tr>
</tbody>
</table>
<h4 id="SDKs"><a href="#SDKs" class="headerlink" title="SDKs"></a>SDKs</h4><p>是目前支援的SDK:</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>Java</td>
<td>JRE/JDK 1.7 and 1.8</td>
</tr>
<tr>
<td>Go</td>
<td>1.5</td>
</tr>
<tr>
<td>Python</td>
<td>2.7</td>
</tr>
<tr>
<td>Node.js</td>
<td>v0.12.2, v4.7.0 and v6.9.2 (use nvm to switch versions)</td>
</tr>
<tr>
<td>Ruby</td>
<td>2.2.3</td>
</tr>
<tr>
<td>PHP</td>
<td>5.6.14</td>
</tr>
<tr>
<td>.NET</td>
<td>1.0.0-preview2</td>
</tr>
</tbody>
</table>
<h3 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h3><p><a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="external">ASP.NET Core</a> 是一個新的跨平台的開源專案可以讓我們用C#建置各種應用程式，包含網頁應用, API服務與執行在不同平台的一般應用程式等。</p>
<h4 id="NET-Core-Command-Line-Interface-CLI"><a href="#NET-Core-Command-Line-Interface-CLI" class="headerlink" title=".NET Core Command Line Interface(CLI)"></a>.NET Core Command Line Interface(CLI)</h4><p><a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/" target="_blank" rel="external">.NET Core CLI</a> 是新的跨平台工具，協助我們開發與建置ASP.NET Core的應用程式，透過該工具我們就可以輕鬆地建立專案,還原專案套件,執行測試案例與發佈專案。<br>這邊我們將在Google Cloud Shell 上面透過 <em>dotnet</em> 這樣的指令幫我們呼叫相關功能，建置一個MVC網站。對於 <em>dotnet</em> 想了解更多可以在輸入dotnet -h來查看:</p>
<p><img src="google_cloud_shell_dotnet.png" alt="google_cloud_shell_dotnet.png"></p>
<p>細節可以參考官方社群介紹<a href="https://docs.microsoft.com/zh-tw/dotnet/articles/core/tools/" target="_blank" rel="external">.NET Core 命令列介面 (CLI) 工具</a>。</p>
<h3 id="Create-First-App-in-App-Engine-Standard-Environment"><a href="#Create-First-App-in-App-Engine-Standard-Environment" class="headerlink" title="Create First App in App Engine Standard Environment"></a>Create First App in App Engine Standard Environment</h3><p>這邊我們快速地開啟Google Cloud Shell後可以輸入以下指令建置一個ASP.NET Core MVC專案:</p>
<pre><code>mkdir app ; cd app
dotnet new -t web
</code></pre><p><img src="new_project.png" alt="new_project"></p>
<p>這邊將專案建置後我們可以透過nuget將我們ASP.NET Core的所有相依套件重新載入至目前目錄中:</p>
<pre><code>dotnet restore
</code></pre><p><img src="new_project_restore.png" alt="new_project_restore"></p>
<p>當還原完成後我們即可啟動該程式</p>
<pre><code>dotnet run
</code></pre><p>透過Google Shell的左上角的Web Preview功能立刻連結至該頁面看我們建置的MVC網站</p>
<p><img src="new_project_run.png" alt="new_project_run"></p>
<p><img src="shell_web_preview.png" alt="shell_web_preview"></p>
<p>最後呈現的頁面與網址如下:</p>
<p><img src="web_preview.png" alt="web_preview.png"></p>
<p>這邊我們可以透過Google Cloud Shell預設的編輯器(editor)來調整檔案內容:</p>
<p><img src="editor_1.png" alt="editor_1"></p>
<p>接著我們可以嘗試修改下面的內容</p>
<p><img src="editor_2.png" alt="editor_2"></p>
<p>由於ASP.NET Core MVC的頁面修改不用重新編譯，所以我們直接刷新頁面就可以看到以下修改:</p>
<p><img src="editor_3.png" alt="editor_3"></p>
<h2 id="補充說明-GAE-Standard-Environment-Support-ASP-NET-Core-1-0-1-Only"><a href="#補充說明-GAE-Standard-Environment-Support-ASP-NET-Core-1-0-1-Only" class="headerlink" title="[補充說明] GAE - Standard Environment Support ASP.NET Core 1.0.1 Only"></a>[補充說明] GAE - Standard Environment Support ASP.NET Core 1.0.1 Only</h2><p>這邊要特別說明一下GCP上的App Engine目前僅支援 <a href="https://github.com/dotnet/core/releases/tag/1.0.1" target="_blank" rel="external">1.0.1</a>而這個版本的對應是.NET Core 1.0.0 與 .NET Core 1.0.0 SDK - Preview 2，是在2016年的9月推出的，有賴於社群的積極貢獻與回饋，在短短的7個月官方就推出了新版的<a href="https://github.com/dotnet/core/releases/tag/1.1.1" target="_blank" rel="external">.NET Core 1.1.1</a>包含了.NET Core 1.1.1 與 .NET Core 1.0.1 SDK．</p>
<p>很遺憾的目前還沒找到可以幫App Engine升級的方法，而支援.NET Core這部分也由於還在Beta所以已經請求官方upgrade到1.1之後的版本．如果想用新版開發的話可以嘗試 GAE的 - Flexible Environment，這部分也會在之後的文章為大家介紹與分享。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2015/12/Google-Cloud-Shell-2016" target="_blank" rel="external">Google Cloud Shell继续免费到2016年底</a></li>
<li><a href="https://cloud.google.com/appengine/pricing" target="_blank" rel="external">App Engine Pricing</a></li>
<li><a href="https://cloud.google.com/appengine/docs" target="_blank" rel="external">Google : App Engine</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/cloud-aspnetcore-cloudshell/#0" target="_blank" rel="external">Build and Launch an ASP.NET Core app from Google Cloud Shell</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Google Cloud Platform </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> GCP </tag>
            
            <tag> GAE </tag>
            
            <tag> Google App Engine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with Firebase]]></title>
      <url>https://blackie1019.github.io/2017/04/20/ASP-NET-Core-play-with-Firebase/</url>
      <content type="html"><![CDATA[<p>介紹GCP上的Firebase服務，並介紹實作如何與ASP.NET Core整合</p>
<a id="more"></a>
<p>Firebase原本是2011年開始提供雲端服務的一間公司，主要是考慮到建立網頁或手持裝置的軟體需要後端的搭配才能正式推出，為了降低後端的依賴並提供幾乎相同的基本功能而誕生的一個產品。</p>
<p>隨著行動化開發的風潮在2014年被Google收購，在2016年5月的Google IO大會上推出收購新版網頁管理介面與新的SDK類別庫，並推出多項新的功能，如分析、雲端訊息、檔案儲存、測試平台等創新功能，讓我們開發Mobile APP更加方便。</p>
<p>今天在介紹Firebase的同時，也會透過<em>FirebaseDatabase.net</em>實作與<em>ASP.NET Core</em>的整合來感受一下Firebase的<em>Realtime Database</em>功能</p>
<p><img src="header.png" alt="header.png"></p>
<h2 id="Firebase-Introduction"><a href="#Firebase-Introduction" class="headerlink" title="Firebase Introduction"></a>Firebase Introduction</h2><p>Firebase 是一個同時支援 Android、iOS 及網頁的 app 雲端開發平台，協助 app 開發者在雲端快速建置後端服務，提供即時資料庫，有效縮短應用程式的開發時間，並幫助開發者更專注在本身應用程式(前端網頁與行動應用程式或是任何獨立且面相使用者的應用程式)的優化．</p>
<p><img src="firebase_intro.jpg" alt="firebase_intro"></p>
<p>Google目前免費開放使用Firebase的服務，不論是網頁、應用系統或目前最熱門的手機，都能透過Firebase所提供的API儲存或讀取在雲端上的資料，開發人員不需要自己建置資料庫與設計伺服器端的程式，就能快速地讓自己的應用程式能夠將資料儲存在雲端上。</p>
<p><img src="Firebase_mobile.png" alt="Firebase_mobile"></p>
<p>想知道透過Firebase能實際做到什麼功能可以參考官方的<a href="https://firebase.google.com/customers/" target="_blank" rel="external">Case Studies</a></p>
<p>Firebase<a href="https://firebase.google.com/docs/" target="_blank" rel="external">目前提供的功能</a>，依據不同層面可以分為以下功能：</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><ul>
<li>Analytics<br>  提供行動數據分析。</li>
</ul>
<p>而這邊很有趣的一點，如果你的app有使用<em>Google Analytics(GA)</em>的朋友，Google 官方則是<a href="https://support.google.com/analytics/answer/2587087?hl=en" target="_blank" rel="external">建議改用Firebase來取代Google Analytics</a>，兩者的比較可以參考下表整理:</p>
<table>
<thead>
<tr>
<th>Firebase Analytics</th>
<th>Google Analytics 360</th>
</tr>
</thead>
<tbody>
<tr>
<td>Event-based data collection model, designed specifically for apps</td>
<td>Screenview/pageview data collection model</td>
</tr>
<tr>
<td>Free, unlimited event reporting</td>
<td>Analytics 360 hit volume limits and pricing apply to all data that is sent to Analytics 360 from websites or apps.</td>
</tr>
<tr>
<td>Integrated feature of Firebase, Google’s mobile developer platform</td>
<td>Standalone analytics product, part of Google Analytics 360 Suite</td>
</tr>
<tr>
<td>Automatic measurement of “first open”, in-app purchase, and other key events</td>
<td>Developer must explicitly initialize screenview tracking and manually instrument events in the app</td>
</tr>
<tr>
<td>No roll-up of multiple apps</td>
<td>Roll-up properties (including roll-up of both web and mobile app properties)</td>
</tr>
<tr>
<td>Not covered under Analytics 360 SLAs</td>
<td>Covered under Analytics 360 SLAs</td>
</tr>
</tbody>
</table>
<p>如果有興趣感受一下差異的可以看看這個：</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/tb2GZ3Bh4p8" frameborder="0" allowfullscreen></iframe>

<p>至於選擇上的推薦，小弟是覺得還是要秉持<em>基金投資有賺有賠，申辦前請先詳讀公開說明書</em>的方式建議大家再次看看Firebase的<a href="https://firebase.google.com/pricing/" target="_blank" rel="external">收費方式</a>與<a href="https://firebase.google.com/docs/analytics/" target="_blank" rel="external">SDK細節</a>才做決定。</p>
<p><em>但如果沒有價格或細節的考量，當然是趕快換去Firebase Analytics!</em></p>
<h3 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h3><p>除了行動分析，Firebase這邊也提供了web, mobile app或任一面向使用者的應用程式可能所需的基礎功能:</p>
<ul>
<li><p>Cloud Messaging</p>
<p>  在網頁上即可送出雲端通知或訊息至裝置中(Push notification)，可用在測試或是對所有上線的裝置送出通知或訊息。</p>
</li>
<li><p>Authentication</p>
<p>  提供身分驗證的功能</p>
</li>
<li><p>Realtime Database</p>
<p>  一個雲端 NoSQL 資料庫，使用 JSON 格式來儲存，當各裝置連上資料庫時可進行同步也可支援APP離線使用，等到連上線時才做更新(Offline)。</p>
</li>
<li><p>Cloud Storage</p>
<p>  儲存實體資料，可以把實體資料(圖檔，設定檔，文字檔或影音檔等等)存放置雲端</p>
</li>
<li><p>Cloud Functions</p>
<p>  可以動態的執行一段你的後段程式碼，這服務其實就是Serverless的實作，你不用管理或是考量何時需要擴充硬體，只需要將程式碼放上即可使用。有興趣的朋友可以參考這個<a href="https://youtu.be/vr0Gfvp5v1A" target="_blank" rel="external">影片介紹</a></p>
</li>
<li><p>Hosting Web</p>
<p>  一個CDN服務，可以將我們的靜態網頁放置全球各地的Edge Location，提升我們連結至該網頁時的速度。</p>
</li>
<li><p>Test Lab</p>
<p>  可以透過雲端服務連結實體裝置來測試你的應用程式，Test Lab已經在主機端接好一大堆一大堆一大堆實體Android 應用程式，並透過雲端服務的方式讓你將應用程式可以以服務的方式在上面進行測試，並同時取得你的測試結果與執行的log紀錄等。此服務如同<a href="https://aws.amazon.com/tw/device-farm/" target="_blank" rel="external">AWS Device Farm</a>的功能，但Test Lab目前尚未提供iOS裝置是比較尷尬的。</p>
</li>
</ul>
<h3 id="Grow"><a href="#Grow" class="headerlink" title="Grow"></a>Grow</h3><ul>
<li><p>Notifications</p>
<p>  不同於Cloud Messaging有提供client與server APIs來呼叫使用。Notification就是一個工具來幫我們排程的發送推播訊息並作相對的管理。這邊從<a href="http://stackoverflow.com/questions/37338560/whats-the-difference-between-firebase-cloud-messaging-firebase-notifications" target="_blank" rel="external">Stack Overflow</a>上面找到一篇不錯的解釋:</p>
<ul>
<li><em>Firebase Cloud Messaging</em> is the library that you need to use in your application to receive cloud messages. It includes client APIs (multi-platform) to receive messages, and server APIs (HTTP and XMPP) to send messages.</li>
<li><em>Firebase Notifications</em> is the tool integrated in the Firebase Console to schedule cloud messages. This also includes the integration with Firebase Analytics to target analytics-based audiences and track opening and conversion events.</li>
</ul>
</li>
<li><p>Remote Config</p>
<p>  可以讓我們用config來控制app的呈現與flow，達到更新config但不用重新下載的功能。</p>
</li>
<li><p>App Indexing</p>
<p>  幫助你將APP整合Google Search，協助你的App在Google Search上面可以正確地被查詢到且直接下載。透過這樣的方式可以提升你的Google Search Indexing(SEO強化)</p>
</li>
<li><p>Dynamic Links</p>
<p>  提供你產生一個單一網址(deep link)，你可以將你的原本的URL透過該單一網址做操作。Dynamic Links 可根據其打開的平台而呈現不同的内容。此外，Dynamic Links還可以跨應用程式的安装工作。例如:用户打開一個Dynamic Link但没有安装指定的App，系统則會提示該用户安装指定的應用，並在應用完成安裝之后自動啟動原先訪問該連結該呈現之內容。</p>
</li>
<li><p>Invites</p>
<p>  一個referrals code服務提供給email或是簡訊(SMS)分享使用。而這個服務也能跟Dynamic Links整合，例如:開啟一個特定的連結，他會偵測你有沒有下載該App並在你第一次登入的時候寄送一個通知給你告訴你可以透過email或是SMS分享一個referrals code給你朋友來獲得更多回饋點數。</p>
</li>
<li><p>AdWords</p>
<p>  連結 Firebase 與 AdWords 就能使用各項工具掌握 AdWords 預算帶來應用程式安裝和應用程式內動作的成效。</p>
</li>
</ul>
<h3 id="Earn"><a href="#Earn" class="headerlink" title="Earn"></a>Earn</h3><ul>
<li><p>AdMob</p>
<p>  Google的AdMob 是一個行動廣告聯播服務。如果你想要透過 App 盈利，通常有兩種方式，一種就是將你的 App 設定為付費模式，使用者要下載你的 App 要先付費（例如定價為 30 元或 120 元），而另外一種方式就是免費使用但會有廣告然後放置聯播網廣告賺錢。 </p>
</li>
</ul>
<p>如果對Firebase這邊對於產品營運與大資料分析有什麼幫助可以參考<em>Steven Hsieh</em>的<a href="https://speakerdeck.com/peikangh/intro-to-firebase-analytics" target="_blank" rel="external">Intro to Firebase Analytics</a>與<a href="https://speakerdeck.com/peikangh/firebase-and-bigquery-shi-zhan-fen-xiang" target="_blank" rel="external">Firebase &amp; BigQuery 實戰分享</a></p>
<h2 id="SDK-Support"><a href="#SDK-Support" class="headerlink" title="SDK Support"></a>SDK Support</h2><p>而目前官方支援的SDK分為五種:</p>
<ul>
<li>iOS</li>
<li>Android</li>
<li>Web(RESTful格式)</li>
<li>C++</li>
<li>Unity</li>
</ul>
<p>前面提到的功能也針對不同的SDK有不同的支援，有些服務是不適用全部SDK的。</p>
<p>官方這邊很貼心的幫大家整理了可以使用的framework來讓各領域的專家透入開發，細節可以參考<a href="https://firebase.google.com/docs/libraries/" target="_blank" rel="external"></a></p>
<p>很不幸的是Google還是照舊遺漏了ASP.NET的同胞們(QQ，勿忘我)，所以接下來我們就來介紹實戰Firebase如何與ASP.NET Core使用<em>Web</em>整合的方式來嘗鮮。</p>
<h2 id="Integration-with-ASP-NET-Core"><a href="#Integration-with-ASP-NET-Core" class="headerlink" title="Integration with ASP.NET Core"></a>Integration with ASP.NET Core</h2><p>這邊示範如何讓ASP.NET Core取得Firebase Realtime Database的資料</p>
<h3 id="Firebase-Project-Setup"><a href="#Firebase-Project-Setup" class="headerlink" title="Firebase Project Setup"></a>Firebase Project Setup</h3><p>首先你需要申請一個帳號，這邊帳號我是用GCP的流程申請，請至<a href="https://cloud.google.com/" target="_blank" rel="external">官網</a>申請。</p>
<h4 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h4><p>前往Firebase Console下，並選取指定專案或是透過專案連結進入<a href="https://console.firebase.google.com/project/" target="_blank" rel="external">https://console.firebase.google.com/project/{project-id}}</a></p>
<p><img src="create_01.png" alt="create_01"></p>
<p><img src="create_02.png" alt="create_02"></p>
<p>這邊的專案是GCP專案，所以你可以成立一個獨立的專案或是沿用既有的</p>
<h4 id="Project-Setting-and-Database-Secrets"><a href="#Project-Setting-and-Database-Secrets" class="headerlink" title="Project Setting and Database Secrets"></a>Project Setting and Database Secrets</h4><p>當我們建立新專案以後就可以看到有一個Overview的Project Settings來看專案的相關設定</p>
<p><img src="setting_01.png" alt="setting_01"></p>
<p>Project ID與Database Secrets</p>
<p><img src="setting_02.png" alt="setting_02"></p>
<p><img src="setting_03.png" alt="setting_03"></p>
<p>當我們有這些資料後我們就可以使用framework+ASP.NET Core來對資料做存取</p>
<h4 id="Create-Database-and-Data"><a href="#Create-Database-and-Data" class="headerlink" title="Create Database and Data"></a>Create Database and Data</h4><p>我們可以到Database那邊看一下連結位置與目前資料狀態</p>
<p><img src="firebase_data.png" alt="firebase_data"></p>
<h3 id="ASP-NET-Core-Integration"><a href="#ASP-NET-Core-Integration" class="headerlink" title="ASP.NET Core Integration"></a>ASP.NET Core Integration</h3><p>這邊介紹使用<a href="https://github.com/step-up-labs/firebase-database-dotnet" target="_blank" rel="external">FirebaseDatabase.net</a>這個framework來幫我們<em>ASP.NET Core</em>與<em>ASP.NET</em>透過RESTful的方式操作Firebase上的Realtime Database資源。基本上他已經將Web這層的SDK多做了一層的包裹(wrap)，讓.NET開發的朋友們更好上手。目前有提供ASP.NET Core與ASP.NET的支援。</p>
<h4 id="Create-Solution-and-Projects"><a href="#Create-Solution-and-Projects" class="headerlink" title="Create Solution and Projects"></a>Create Solution and Projects</h4><p>這邊我們一樣建立兩個專案並透過一個.sln檔案把兩個專案連結起來</p>
<pre><code>mkdir FirebaseDemo ; cd FirebaseDemo
mkdir app ; mkdir app.test
dotnet new classlib -f netcoreapp1.1 -o .\app ; dotnet new xunit -o .\app.test
dotnet new sln ; dotnet sln add 
dotnet sln add .\app\app.csproj;dotnet sln add .\app.test\app.test.csproj
</code></pre><h4 id="Add-FirebaseDatabase-net-Reference"><a href="#Add-FirebaseDatabase-net-Reference" class="headerlink" title="Add FirebaseDatabase.net Reference"></a>Add FirebaseDatabase.net Reference</h4><p>再將兩個專案分別加入FirebaseDatabase.net的參考，並執行還原(將第三方套件載入)</p>
<pre><code>dotnet add .\app\app.csproj package FirebaseDatabase.net -v 3.0.0-alpha6
dotnet add .\app.test\app.test.csproj package FirebaseDatabase.net -v 3.0.0-alpha6
dotnet restore
</code></pre><p>並針對測試專案加入app專案參考</p>
<pre><code>cd app.test ; dotnet add reference ..\app\app.csproj
</code></pre><p>當我們執行到這邊基本上專案已經成形如下:</p>
<p><img src="sln.png" alt="sln"></p>
<p>這邊要提醒一下FirebaseDatabase.net的參考要指定版本(因為正式版比較舊不提供當前ASP.NET Core的版本)</p>
<p><img src="nuget_version.png" alt="nuget_version"></p>
<h4 id="Update-Files-Content-and-Add-more-Files"><a href="#Update-Files-Content-and-Add-more-Files" class="headerlink" title="Update Files Content and Add more Files"></a>Update Files Content and Add more Files</h4><p>然後我們再將app\class.cs更名MemberRepository.cs，並加入下面程式碼到檔案中</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"></div><div class="line"><span class="keyword">using</span> Firebase.Database;</div><div class="line"></div><div class="line"><span class="keyword">using</span> app.Model;</div><div class="line"><span class="keyword">using</span> Newtonsoft.Json;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemberRepository</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;MemberRepository&gt; lazy = <span class="keyword">new</span> Lazy&lt;MemberRepository&gt;(() =&gt; <span class="keyword">new</span> MemberRepository());</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> MemberRepository Instance &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> lazy.Value; &#125; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> FirebaseClient Firebase &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MemberRepository</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> auth = <span class="string">"&lt;auth&gt;"</span>;</div><div class="line">            <span class="keyword">var</span> baseUrl = <span class="string">"&lt;url&gt;"</span>;</div><div class="line">            <span class="keyword">var</span> option = <span class="keyword">new</span> FirebaseOptions()</div><div class="line">            &#123;</div><div class="line">                AuthTokenAsyncFactory = () =&gt; Task.FromResult(auth)</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.Firebase = <span class="keyword">new</span> FirebaseClient(baseUrl, option);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">GetDataAsync</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> data = <span class="keyword">await</span> <span class="keyword">this</span>.Firebase</div><div class="line">                .Child(key)</div><div class="line">                .OnceAsync&lt;<span class="keyword">string</span>&gt;();</div><div class="line"></div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data)&#123;</div><div class="line">                Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Get Async Data from key(&#123;0&#125;) = &#123;1&#125;:&#123;2&#125;"</span>,</div><div class="line">                    key,</div><div class="line">                    item.Key,</div><div class="line">                    item.Object));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SetDataAsync</span>(<span class="params"><span class="keyword">string</span> key, KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; data</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.Firebase</div><div class="line">                .Child(key)</div><div class="line">                .PostAsync(JsonConvert.SerializeObject(<span class="keyword">new</span> Member()&#123; </div><div class="line">                    Name = data.Key,</div><div class="line">                    Tag = data.Value</div><div class="line">                    &#125;));</div><div class="line"></div><div class="line">            Console.WriteLine(<span class="keyword">string</span>.Format(<span class="string">"Post Async Data to key(&#123;0&#125;) = &#123;1&#125;"</span>, result.Key, result.Object));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接著新增目錄Model，並在該目錄下新增Member.cs並添加以下內容:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Newtonsoft.Json;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app.Model</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></div><div class="line">    &#123;</div><div class="line">        [JsonProperty(<span class="string">"Name"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</div><div class="line"></div><div class="line">        [JsonProperty(<span class="string">"Tag"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Tag &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到這邊我們程式的部分完成，接著到app.test目錄底下的UnitTest1.cs內容作以下修改:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> Xunit;</div><div class="line"></div><div class="line"><span class="keyword">using</span> app;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">app.test</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></div><div class="line">    &#123;</div><div class="line">        [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Test_MemberRepository_Basic_GetDataAsync</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> key = <span class="string">"-KiUSqrMni578d--QjYz"</span>;</div><div class="line">            <span class="keyword">await</span> MemberRepository.Instance.GetDataAsync(key);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">       [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Test_MemberRepository_SetDataAsync</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> key = DateTime.Now.ToString(<span class="string">"yyymmsshhmmss"</span>);</div><div class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">new</span> Random(DateTime.Now.Millisecond).Next().ToString();</div><div class="line">            <span class="keyword">var</span> memberData = <span class="keyword">new</span> KeyValuePair&lt;<span class="keyword">string</span>,<span class="keyword">string</span>&gt;(key, <span class="keyword">value</span>);</div><div class="line"></div><div class="line">            <span class="keyword">await</span> MemberRepository.Instance.SetDataAsync(<span class="string">"Member"</span>,memberData);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Run-Test"><a href="#Run-Test" class="headerlink" title="Run Test"></a>Run Test</h4><p>接著我們在測試專案底下執行:</p>
<pre><code>dotnet test
</code></pre><p>可看到這樣的結果:</p>
<p><img src="result.png" alt="result"></p>
<p>這邊GetDataAsync的帶入值比較奇怪是因為這是Firebase自動產生的:</p>
<p><img src="insert_result.png" alt="insert_result"></p>
<p>到這邊我們就完成了ASP.NET Core與Firebase的溝通!</p>
<h4 id="Security-Rules"><a href="#Security-Rules" class="headerlink" title="Security Rules"></a>Security Rules</h4><p>Firebase預設只有已經驗證過的帳號才能夠讀取(read)或寫入(write)記錄到指定資料庫，因此，在目前的設定下是無法讓後續開發的應用程式讀取聯絡資料的，為了測試，筆者暫時將讀寫開放為任何對象都可存取，<strong>但請在設計產品APP時訂定符合安全原則的規則</strong>，請將read與write的值都更改為「true」後，按下「發佈」，即可套用新的規則。</p>
<p>這邊針對專案的相關設定檢查可以參考<a href="https://f這邊針對專案的相關設定檢查可以參考" target="_blank" rel="external">Firebase Dynamic Links</a></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>總結一下，Firebase 提供了Mobile App 完整的基本需求，透過一個很棒的即時資料處理與其他相關功能，加速與協助縮短整個行動應用開發的週期</p>
<p>這邊解釋一下為什麼Firebase還是需要跟ASP.NET Core做整合透過這樣的中介層，而不是如官方所說得直接給我們Mobile App或是Web App等應用程式端直接呼叫。</p>
<p>以我們真實的開發上常常會遇到有權限/授權/登入等功能的需求為例:<br>我們以往大多都要額外開發後端的API程式與前端(web, mobile app or any others)的應用程式做token交換，後端程式還需要這樣的token儲存起來並做對應的時間內失效處理。整個開發繁瑣與同性質不同產品的功能又大同小異，這邊我們就可以透過Firebase來幫我們加速開發:</p>
<ol>
<li>透過自行開發的後端應用程式產生token的機制</li>
<li>前端應用程式傳入識別帳號從後端應用程式取得必要權限的token</li>
<li>前端應用程式找Firebase確認可授予的權限</li>
<li>提供權限對應的功能</li>
</ol>
<p><img src="firebase_third_party.png" alt="firebase_third_party"></p>
<p>以上架構簡單轉換成流程如下:</p>
<ul>
<li>首先你會取得 User 的登入資訊(帳號名稱/密碼)並交給你的伺服器產生Authentication Token</li>
<li>將資訊傳給 Firebase Authentication SDK 來驗證</li>
<li>驗證成功你就可以取得 User 所提供的資訊，預設情況下</li>
<li>User 驗證成功後可以讀寫 Firebase Realtime Database 和 Firebase Storage</li>
</ul>
<p>所以上面就可以看到其實我們還是需要一個 <em>service</em> 或<em>api</em>提供驗證 Authentication Token。</p>
<p>而除此之外如果對Firebase的應用感興趣也可以上官方<a href="https://codelabs.developers.google.com/?cat=Firebase" target="_blank" rel="external">CodeLab</a>來練習一下，而筆者也會再陸續更新Firebase與ASP.NET Core上面的實戰整合跟各位分享。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://firebase.google.com/docs/" target="_blank" rel="external">Google - Firebase</a></li>
<li><a href="https://www.slideshare.net/ApaichonPunopas/firebase-slide" target="_blank" rel="external">Firebase slide</a></li>
<li><a href="https://medium.com/step-up-labs/firebase-c-library-5c342989ad18" target="_blank" rel="external">Firebase C# library</a></li>
<li><a href="http://jasonchiucc.github.io/2016/07/20/firebase-tutorial-realtime-database/" target="_blank" rel="external">Firebase 心得（Realtime Database）</a></li>
<li><a href="https://www-staging.firebase.com/blog/2013-08-23-firebase-is-your-products-api.html" target="_blank" rel="external">Firebase is Your Product’s API</a></li>
<li><a href="http://www.ithome.com.tw/news/106045" target="_blank" rel="external">新版Firebase來了！Google要為App開發者打造一套萬用雲端後臺</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Google Cloud Platform </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> GCP </tag>
            
            <tag> Firebase </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Gulp to help JS and Css Concat and Minify]]></title>
      <url>https://blackie1019.github.io/2017/04/19/Using-Gulp-to-help-JS-and-Css-Concat-and-Minify/</url>
      <content type="html"><![CDATA[<p>介紹Gulp套件與展示一個網頁最佳化的demo，並且透過concat的套件解決兩個獨立的js檔案但有循環參考的解法</p>
<a id="more"></a>
<h2 id="Gulp的介紹與使用情境"><a href="#Gulp的介紹與使用情境" class="headerlink" title="Gulp的介紹與使用情境"></a>Gulp的介紹與使用情境</h2><p>一般我們在做前端開發的時候都會遇到需要做一系列的”工作“達到前端資源最佳化的處理，避免有多於的請求去拿過多過大或是為最佳化處理的檔案．<a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">Gulp</a>就是一個為了解決這樣問題而產生的npm 套件．</p>
<p>Gulp本身實做了一個很簡單的機制去把我們指定資源(source resource)透過串流(streaming)的方式處理到指定位置(output destination)．</p>
<p><img src="gulp.png" alt="gulp"></p>
<p>Gulp包含以下特色：</p>
<ul>
<li>Automation - 可以幫你建置可重複執行的指令去達成繁瑣的開發/發佈流程(development workflow).</li>
<li>Platform-agnostic - 主要的IDE 包含不同的平台： PHP, .NET, Node.js, Java 都有支援的套件.</li>
<li>Strong Ecosystem - 以js開發並可以直接引用js的package增加你的應用.</li>
<li>Simple - 提供介面街口讓你可以簡單的呼叫gulp參數.</li>
</ul>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol>
<li>Install Nodejs</li>
<li><p>exec cmd to install Gulp CLI</p>
<pre><code>npm install gulp -g
</code></pre></li>
</ol>
<h2 id="Basic-Gulp-using"><a href="#Basic-Gulp-using" class="headerlink" title="Basic Gulp using"></a>Basic Gulp using</h2><p>一個簡單的gulpfile.js架構如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> del([ <span class="string">'public/*'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>這邊如果我們在cmd執行gulp指令就可以清除public資料夾內的所有資料，而這邊我們是使用<a href="https://github.com/sindresorhus/del" target="_blank" rel="external">del</a>這個gulp套件來幫我們處理中間的過程．</p>
<p><img src="gulp_task_del.png" alt="gulp_task_del"></p>
<h2 id="Make-Task-Execute-by-Sequence"><a href="#Make-Task-Execute-by-Sequence" class="headerlink" title="Make Task Execute by Sequence"></a>Make Task Execute by Sequence</h2><p>接下來，如果我們今天的情境是要有兩個task，如：</p>
<ol>
<li>先清空資料</li>
<li>將指定檔案移入該資料夾</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> del([ <span class="string">'public/*'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/index.html'</span>).pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>這邊我們可以看到我們在原本的指令重新命名為clean後，將它放入default這個工作的第二個參數內，這邊第二個參數裡面的放入的task名稱會在default執行前，先並行裡面的工作，做完才執行default內的工作．</p>
<p>可想像到的如果第二個參數內有多個工作，在Gulp原先的設計依照javascipt語言的特性我們無法控制它的先後順序，這在實務上會很不方便．而這邊特別介紹<a href="https://github.com/OverZealous/run-sequence" target="_blank" rel="external">run-sequence</a>這套件可以建立js有相依性的系列工作，協助我們解決在有必要依序執行的工作上做更彈性的設置．當我們引入後上面程式碼就可以做下面修改：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> del([<span class="string">'public/*'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'copy-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">            <span class="string">'src/js/utils.js'</span>,</div><div class="line">            <span class="string">'src/js/index.js'</span></div><div class="line">        ])</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/js/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    runSequence(<span class="string">'clean'</span>,<span class="string">'copy-js'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>針對run-sequence的更多細節可以參考先前另外一篇的<a href="https://blackie1019.github.io/2016/08/19/gulp-run-sequence/">Gulp run-sequence - Run a Series of Dependent Gulp Tasks in Order</a></p>
<h2 id="JS-Bundle-with-Gulp"><a href="#JS-Bundle-with-Gulp" class="headerlink" title="JS Bundle with Gulp"></a>JS Bundle with Gulp</h2><p>而實務上我們會遇到要幫前端做最佳化的案例，這邊我們就可以用<a href="https://github.com/contra/gulp-concat" target="_blank" rel="external">gulp-concat</a>,<a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a>與<a href="https://github.com/scniro/gulp-clean-css" target="_blank" rel="external">gulp-clean-css</a>來依序幫我們達到js,css檔案合併與js,css的壓縮最佳化．</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> del([<span class="string">'public/*'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'copy-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">            <span class="string">'src/js/utils.js'</span>,</div><div class="line">            <span class="string">'src/js/index.js'</span></div><div class="line">        ])</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/js/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'concat-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">            <span class="string">'public/js/utils.js'</span>,</div><div class="line">            <span class="string">'public/js/index.js'</span></div><div class="line">        ])</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/js/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'public/js/app.js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/app.min.js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'copy-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">            <span class="string">'src/css/style.css'</span>,</div><div class="line">            <span class="string">'src/css/index.css'</span></div><div class="line">        ])</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/css/'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'concat-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([</div><div class="line">            <span class="string">'public/css/style.css'</span>,</div><div class="line">            <span class="string">'public/css/index.css'</span></div><div class="line">        ])</div><div class="line">        .pipe(concat(<span class="string">'app.css'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/css/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'public/css/app.css'</span>)</div><div class="line">        .pipe(cleanCSS(&#123;</div><div class="line">            <span class="attr">debug</span>: <span class="literal">true</span></div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;details.name&#125;</span>:[<span class="subst">$&#123;<span class="built_in">Math</span>.round(details.stats.efficiency *<span class="number">100</span>)&#125;</span>%]<span class="subst">$&#123;details.stats.originalSize&#125;</span>=&gt;<span class="subst">$&#123;details.stats.minifiedSize&#125;</span>`</span>);</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'public/app.min.css'</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    runSequence(<span class="string">'clean'</span>,[<span class="string">'copy-js'</span>,<span class="string">'copy-css'</span>],[<span class="string">'concat-js'</span>,<span class="string">'concat-css'</span>],[<span class="string">'minify-js'</span>,<span class="string">'minify-css'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>這邊我們刻意在執行minify-css的task時將執行時間印出來．而runSequence這邊我們可以分成下面幾個動作：</p>
<ol>
<li>清空資料夾</li>
<li>搬移js, css檔案</li>
<li>合併產生app.js, app.css檔案</li>
<li>最佳化產生app.min.js, app.min.css檔案</li>
</ol>
<h2 id="Demo-Solving-JS-File-Cycling-Refence-Problem"><a href="#Demo-Solving-JS-File-Cycling-Refence-Problem" class="headerlink" title="Demo : Solving JS File Cycling Refence Problem"></a>Demo : Solving JS File Cycling Refence Problem</h2><p>而今天實務上有一個範例，情境如下：</p>
<p>某一html有引入兩個js檔案，但兩個檔案內彼此在執行上會互相呼叫對方寫好的function(cycling reference)，參考如下:</p>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- build:jquery --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor/jquery-1.7.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- endbuild --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output-div"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- build:js --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/lib-a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/lib-b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- endbuild --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>lib-a.js：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMsg</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    $(<span class="string">"#output-div"</span>).html(msg);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"output:"</span>+msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunctionInA</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    testFunctionInB(msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// document.addEventListener("DOMContentLoaded", function() &#123;</span></div><div class="line">    testFunctionInA(<span class="string">"Hi I am Blackie"</span>);</div><div class="line"><span class="comment">// &#125;);</span></div></pre></td></tr></table></figure>
<p>lib-b.js：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFunctionInB</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    printMsg(msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這邊我們可以很清楚的看到當兩個檔案依序從body被載入時，如果lib-b.js在lib-a.js之後才被載入會有以下錯誤：</p>
<p><img src="cycling_ref_before.png" alt="cycling_ref_before"></p>
<p>今天如果我們使用傳統的資源載入方式無法解決這種functionA=&gt;functionB=&gt;functionA的問題，因為這就跟雞生蛋還是蛋生雞的問題一樣無解．</p>
<p>但如果我們使用上幾步驟介紹到的bundle作法，則可以幫我們把檔案合併至單一檔案內，自然這樣的問題就可以被處理了．</p>
<p><img src="cycling_ref_after.png" alt="cycling_ref_after"></p>
<p>如果對上面這個案例有興趣的朋友可以參考<a href="https://github.com/blackie1019/gulp-demo" target="_blank" rel="external">原始碼</a></p>
<p>通常這種問題是比較早開發的js才會有的，現在的js開發強調模組化與封裝，所以我們應該多利用這樣的特性避開這個問題．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://abgne.tw/web/gulp/gulp-tuts-install-gulp-js.html" target="_blank" rel="external">Gulp 入門教學 - 安裝 Gulp.js</a></li>
<li><a href="http://abgne.tw/web/gulp/gulp-tuts-compress-js-css.html" target="_blank" rel="external">Gulp 入門教學 - 壓縮 JavaScript 與 CSS</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> Front-End Optimization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nuget.Config for repositoryPath and globalPackagesFolder]]></title>
      <url>https://blackie1019.github.io/2017/04/18/Nuget-Config-for-repositoryPath-and-globalPackagesFolder/</url>
      <content type="html"><![CDATA[<p>說明一下Nuget.Config中 repositoryPath與 globalPackagesFolder 的不同，並分享如何使用根目錄的Nuget.Config內所有專案設定。</p>
<a id="more"></a>
<h2 id="repositoryPath-與-globalPackagesFolder"><a href="#repositoryPath-與-globalPackagesFolder" class="headerlink" title="repositoryPath 與 globalPackagesFolder"></a>repositoryPath 與 globalPackagesFolder</h2><p>會有兩個值來做同樣的事情其實是因為當初微軟曾經把project.json這個部分獨立出來，而這也是ASP.NET Core從vNext開始就一直存在的改變，這導致Nuget的還原有兩個版本的參數:</p>
<ul>
<li>packages.config 用 repositoryPath</li>
<li>project.json 用 globalPackagesFolder</li>
</ul>
<p>但project.json這件事情到ASP.NET Core 1.1時卻又被並回.csharproj檔案內，所以參數也被合併到同一個Nuget.Config檔案內，但根據有沒有packages.config有了不一樣的兩個參數:</p>
<ul>
<li>如果是舊版或是有 packages.config  用 repositoryPath</li>
<li>Nuget 3.4+ 且專案沒有 packages.config 用 globalPackagesFolder</li>
</ul>
<h2 id="Nuget-Config-Path-與-Setup"><a href="#Nuget-Config-Path-與-Setup" class="headerlink" title="Nuget.Config Path 與 Setup"></a>Nuget.Config Path 與 Setup</h2><p>開始講解前，先解說一下Nuget.Config 放置上的幾個選項:</p>
<h3 id="Project-specific"><a href="#Project-specific" class="headerlink" title="Project-specific"></a>Project-specific</h3><p>每一個專案內我們可以建立獨立的Nuget.Config，將相依的套件載入之專案資料夾下的位置單獨使用</p>
<h3 id="Solution-specific"><a href="#Solution-specific" class="headerlink" title="Solution-specific"></a>Solution-specific</h3><p>我們有可以針對Solution建立.nuget資料夾建立Nuget.Config，將相依的套件載入之專案資料夾下的位置給與該soltion相關的所有專案參考使用</p>
<p><em>要稍微注意一下的是，這個Solution內.nuget資料夾下的 Nuget.Config只會在 NuGet 3.3 與更早的版本才能生效，3.4開始已經不能使用這個方式了</em>，這部分公告請參考<a href="https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior" target="_blank" rel="external">Configuring NuGet behavior</a></p>
<h3 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h3><p>根據版本不同有兩個版本的區隔</p>
<ul>
<li><p>NuGet 2.7 to NuGet 3.5(根據版本不同預設的檔案名稱不同<a href="https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior#nuget-defaults-file" target="_blank" rel="external">NuGet defaults file</a>)</p>
<p>  %PROGRAMDATA%\NuGet\NuGetDefaults.Config</p>
</li>
<li><p>NuGet 4.0+</p>
<p>  %ProgramFiles(x86)%\NuGet\Config</p>
</li>
</ul>
<h3 id="Machine-wide"><a href="#Machine-wide" class="headerlink" title="Machine-wide"></a>Machine-wide</h3><p>我們也可以幫整台機器(不管當前使用的使用者是誰)，設定通用的Nuget.Config位置，這邊版本上有兩個版本的區隔:</p>
<ul>
<li><p>NuGet 2.6 ~ NuGet 3.5: </p>
<p>  %ProgramData%\NuGet\Config[{IDE}[{Version}[{SKU}]]]Nuget.Config</p>
<ul>
<li>{IDE} 可以是 VisualStudio</li>
<li>{Version} 可以是你的IDE版本如 14.0, </li>
<li>{SKU} 指的是你用 Community, Pro 或 Enterprise. 這邊也跟上面的版本號有關.</li>
</ul>
</li>
<li><p>NuGet 4.0+</p>
<p>  %ProgramFiles(x86)%\NuGet\Config</p>
</li>
</ul>
<h3 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h3><p>如果沒有異動，這邊也是我們安裝完後Nuget的預設設定，如果上述設定都沒有特別設定，則Nuget會回來參考這邊。</p>
<pre><code>%APPDATA%\NuGet\Nuget.Config
</code></pre><h2 id="Root-Folder-Nuget-Config-and-Project-specific-Nuget-Config"><a href="#Root-Folder-Nuget-Config-and-Project-specific-Nuget-Config" class="headerlink" title="Root Folder Nuget.Config and Project-specific Nuget.Config"></a>Root Folder Nuget.Config and Project-specific Nuget.Config</h2><p>除了上述官方有寫明的這幾種之外，其實我們也可以在根資料夾(root folder)建立一個shared的Nuget.Config給底下所有子目錄使用:</p>
<p><img src="folder_structure.png" alt="folder_structure.png"></p>
<p>這邊我們假設Common下的Packages是存放大家共用的library實際位置，那我們則可以在App的資料夾(根目錄)內建立一個Nuget.Config並且設定以下內容:</p>
<ul>
<li><p>Nuget 3.4+ 且專案沒有 packages.config:</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"globalPackagesFolder"</span> <span class="attr">value</span>=<span class="string">"Common\Packages"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果是舊版或是有packages.config 則:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"repositoryPath"</span> <span class="attr">value</span>=<span class="string">"Common\Packages"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>而這邊Nuget.Config的參考也是有順序的，依序為:</p>
<p><img src="sequence.png" alt="sequence"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.microsoft.com/en-us/nuget/schema/nuget-config-file" target="_blank" rel="external">NuGet.Config reference</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Nuget </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with Redis and StackExchange.Redis]]></title>
      <url>https://blackie1019.github.io/2017/04/17/ASP-NET-Core-play-with-Redis-and-StackExchange-Redis/</url>
      <content type="html"><![CDATA[<p>記錄如何使用StackExchange.Redis 取用Redis內的資料</p>
<a id="more"></a>
<p><img src="cover.png" alt="cover"></p>
<h1 id="StackExchange-Redis"><a href="#StackExchange-Redis" class="headerlink" title="StackExchange.Redis"></a>StackExchange.Redis</h1><p><a href="https://stackexchange.github.io/StackExchange.Redis/" target="_blank" rel="external">StackExchange.Redis</a> 是由Stack Overflow所開發維護的Redis Driver與Framework，它提供了我們有效且方便的介面去操作Redis資料．</p>
<p>官方提供兩個套件：</p>
<ul>
<li>StackExchange.Redis</li>
<li>StackExchange.Redis.StrongName</li>
</ul>
<p>如果你的專案本身屬於strong-named那就選後者吧．</p>
<p>對於Redis與如果想更進一步的認識可以參考先前整理的教學<a href="https://www.slideshare.net/chentientsai/redis-tutoring" target="_blank" rel="external">redis-tutoring</a>，但比較可惜的不是專門為了ASP.NET Core所寫的教學，之後會有機會再更新整理與大家分享．</p>
<h1 id="Hands-On"><a href="#Hands-On" class="headerlink" title="Hands On"></a>Hands On</h1><p>這邊一樣我們透過dotnet new 指令幫我們建立classlib與xunit專案進行開發與測試</p>
<p>這邊可以參考前一篇<a href="https://blackie1019.github.io/2017/04/16/ASP-NET-Core-play-with-Solution-File/">ASP.NET Core play with Solution File</a>使用.sln的方式將兩個專案關聯起來一起方便日後管理與還原</p>
<h2 id="Create-Redis-Instance-on-RedisLabs"><a href="#Create-Redis-Instance-on-RedisLabs" class="headerlink" title="Create Redis Instance on RedisLabs"></a>Create Redis Instance on RedisLabs</h2><p><a href="redislabs.com">Redis Labs</a>提供免費快速的建立雲端Redis Instance的服務．</p>
<p>這邊我們用Redis Labs幫我們快速建立一個Redis Instance，建立完成後Endpoint就是我們的連線資料，而Access Control &amp; Security就是該Instance的Auth</p>
<p><img src="redislab.png" alt="redislab"></p>
<h2 id="Add-StackExchange-Redis-from-Nuget-Package-Manager"><a href="#Add-StackExchange-Redis-from-Nuget-Package-Manager" class="headerlink" title="Add StackExchange.Redis from Nuget Package Manager"></a>Add StackExchange.Redis from Nuget Package Manager</h2><p>接著我們使用先前介紹的<a href="ASP.NET Core using Nuget with Visual Studio Code">Nuget Package Manager</a>來幫我們載入StackExchange.Redis.</p>
<h2 id="Setup-up-ConnectionMultiplexer-and-IDatabase"><a href="#Setup-up-ConnectionMultiplexer-and-IDatabase" class="headerlink" title="Setup up ConnectionMultiplexer and IDatabase"></a>Setup up ConnectionMultiplexer and IDatabase</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(<span class="string">"&lt;ip&gt;:&lt;port&gt;,password=&lt;auth&gt;"</span>);</div><div class="line">IDatabase db = Redis.GetDatabase();</div></pre></td></tr></table></figure>
<p>這邊要稍微注意一下，如果將ip換成domain的話會發生下面錯誤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Failed   App.Test.UnitTest1.Test_SetValue</div><div class="line">Error Message:</div><div class="line"> System.AggregateException : One or more errors occurred. (This platform does not support connecting sockets to DNS endpoints via the insta</div><div class="line">nce Connect and ConnectAsync methods, due to the potential for a host name to map to multiple IP addresses and sockets becoming invalid for</div><div class="line"> use after a failed connect attempt. Use the static ConnectAsync method, or provide to the instance methods the specific IPAddress desired.</div><div class="line">)</div><div class="line">---- System.PlatformNotSupportedException : This platform does not support connecting sockets to DNS endpoints via the instance Connect and</div><div class="line"> ConnectAsync methods, due to the potential for a host name to map to multiple IP addresses and sockets becoming invalid for use after a fa</div><div class="line">iled connect attempt. Use the static ConnectAsync method, or provide to the instance methods the specific IPAddress desired.</div><div class="line">Stack Trace:</div><div class="line">   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)</div><div class="line">   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)</div><div class="line">   at StackExchange.Redis.ConnectionMultiplexer.ConnectImpl(Func`1 multiplexerFactory, TextWriter log)</div><div class="line">   at App.MemberRepository..ctor() in /Users/blackie/Desktop/DEV/blackie1019/RedisDemo/App/Class1.cs:line 27</div><div class="line">   at App.MemberRepository.&lt;&gt;c.&lt;.cctor&gt;b__18_0() in /Users/blackie/Desktop/DEV/blackie1019/RedisDemo/App/Class1.cs:line 10</div><div class="line">   at System.Lazy`1.CreateValue()</div><div class="line">   at System.Lazy`1.LazyInitValue()</div><div class="line">   at App.MemberRepository.get_Instance() in /Users/blackie/Desktop/DEV/blackie1019/RedisDemo/App/Class1.cs:line 12</div><div class="line">   at App.Test.UnitTest1.Test_SetValue() in /Users/blackie/Desktop/DEV/blackie1019/RedisDemo/App.Test/UnitTest1.cs:line 18</div><div class="line">----- Inner Stack Trace -----</div><div class="line">   at System.Net.Sockets.Socket.ThrowIfNotSupportsMultipleConnectAttempts()</div><div class="line">   at System.Net.Sockets.Socket.BeginConnect(String host, Int32 port, AsyncCallback requestCallback, Object state)</div><div class="line">   at System.Net.Sockets.SocketTaskExtensions.&lt;&gt;c.&lt;ConnectAsync&gt;b__5_0(String targetHost, Int32 targetPort, AsyncCallback callback, Object</div><div class="line">state)</div><div class="line">   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2](Func`5 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg</div><div class="line">1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)</div><div class="line">   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object stat</div><div class="line">e)</div><div class="line">   at System.Net.Sockets.SocketTaskExtensions.ConnectAsync(Socket socket, String host, Int32 port)</div><div class="line">   at StackExchange.Redis.SocketManager.BeginConnect(EndPoint endpoint, ISocketCallback callback, ConnectionMultiplexer multiplexer, TextWr</div><div class="line">iter log)</div><div class="line">   at StackExchange.Redis.PhysicalConnection.BeginConnect(TextWriter log)</div><div class="line">   at StackExchange.Redis.PhysicalBridge.GetConnection(TextWriter log)</div><div class="line">   at StackExchange.Redis.ServerEndPoint..ctor(ConnectionMultiplexer multiplexer, EndPoint endpoint, TextWriter log)</div><div class="line">   at StackExchange.Redis.ConnectionMultiplexer.&lt;ReconfigureAsync&gt;d__124.MoveNext()</div></pre></td></tr></table></figure>
<p>發生的原因跟解決辦法可以參考<a href="https://github.com/StackExchange/StackExchange.Redis/issues/410" target="_blank" rel="external">[CoreCLR] Can’t connect to Redis server by hostname. Only by IP</a>,但目前的最新ASP.NET的library依舊有這個問題，而StackExchange.Redis這邊也只能提供workaround跟送出RP給微軟做修補了．</p>
<h2 id="StringSet"><a href="#StringSet" class="headerlink" title="StringSet"></a>StringSet</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> isSuccess = &lt;IDatabase&gt;.StringSet(key,<span class="keyword">value</span>);</div></pre></td></tr></table></figure>
<h2 id="StringGet"><a href="#StringGet" class="headerlink" title="StringGet"></a>StringGet</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> <span class="keyword">value</span> = &lt;IDatabase&gt;.StringGet(key);</div></pre></td></tr></table></figure>
<h2 id="Recap-All"><a href="#Recap-All" class="headerlink" title="Recap All"></a>Recap All</h2><p>實務上我們要盡可能地重複使用已建立的連線，避免開過多連線造成資源浪費效能下降，所以這邊我們用Singleton Pattern將整個程式碼與測試程式碼重新整理如下:</p>
<p>MemberRepository.cs:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"></div><div class="line"><span class="keyword">using</span> StackExchange.Redis;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemberRepository</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;MemberRepository&gt; lazy = <span class="keyword">new</span> Lazy&lt;MemberRepository&gt;(() =&gt; <span class="keyword">new</span> MemberRepository());</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> MemberRepository Instance &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> lazy.Value; &#125; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> ConnectionMultiplexer Redis &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> IDatabase DB &#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> Domain;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> Port;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> Auth;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MemberRepository</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>.Domain = <span class="string">"54.158.21.26"</span>;<span class="comment">//"redis-10968.c10.us-east-1-3.ec2.cloud.redislabs.com";</span></div><div class="line">            <span class="keyword">this</span>.Port = <span class="string">"10968"</span>;</div><div class="line">            <span class="keyword">this</span>.Auth = <span class="string">"hide"</span>;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.Redis = ConnectionMultiplexer.Connect(<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;:&#123;1&#125;,password=&#123;2&#125;"</span>, <span class="keyword">this</span>.Domain, <span class="keyword">this</span>.Port, <span class="keyword">this</span>.Auth));</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetDBInstance</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.DB==<span class="literal">null</span>)&#123;</div><div class="line">                <span class="keyword">this</span>.DB = Redis.GetDatabase();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">string</span> <span class="keyword">value</span></span>)</span></div><div class="line">        &#123;</div><div class="line">            GetDBInstance();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DB.StringSet(key,<span class="keyword">value</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetValue</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></div><div class="line">        &#123;</div><div class="line">            GetDBInstance();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.DB.StringGet(key);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UnitTest1.cs</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"><span class="keyword">using</span> Xunit;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App.Test</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></div><div class="line">    &#123;</div><div class="line">        [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_SetValue</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = DateTime.Now.Millisecond.ToString(); </div><div class="line">            <span class="keyword">var</span> key = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;_&#123;1&#125;"</span>, <span class="string">"blackie"</span>,<span class="keyword">value</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> expected = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">bool</span> actual;</div><div class="line"></div><div class="line">            actual = MemberRepository.Instance.SetValue(key,<span class="keyword">value</span>);</div><div class="line">            Assert.Equal(expected,actual);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_GetValue</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> key = <span class="string">"blackie"</span>;</div><div class="line">        </div><div class="line">            <span class="keyword">var</span> expected = <span class="string">"35"</span>;</div><div class="line">            <span class="keyword">string</span> actual;</div><div class="line"></div><div class="line">            actual = MemberRepository.Instance.GetValue(key);</div><div class="line">            Assert.Equal(expected,actual);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        [Fact]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_SetValueAndGetValue</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> <span class="keyword">value</span> = DateTime.Now.Millisecond.ToString(); </div><div class="line">            <span class="keyword">var</span> key = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;_&#123;1&#125;"</span>, <span class="string">"blackie"</span>,<span class="keyword">value</span>);</div><div class="line">        </div><div class="line">            <span class="keyword">var</span> expectedOperationReturn = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">bool</span> actualOperationReturn;</div><div class="line"></div><div class="line">            actualOperationReturn = MemberRepository.Instance.SetValue(key,<span class="keyword">value</span>);</div><div class="line">            Assert.Equal(expectedOperationReturn,actualOperationReturn);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> expectedGetValueReturn = <span class="keyword">value</span>;</div><div class="line">            <span class="keyword">string</span> actualGetValueReturn;</div><div class="line"></div><div class="line">            actualGetValueReturn = MemberRepository.Instance.GetValue(key);</div><div class="line">            Assert.Equal(expectedGetValueReturn,actualGetValueReturn);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://stackexchange.github.io/StackExchange.Redis/Configuration" target="_blank" rel="external">StackExchange.Redis - Configuration</a></li>
<li><a href="https://stackexchange.github.io/StackExchange.Redis/Basics" target="_blank" rel="external">StackExchange.Redis - Basic Usage</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Redis </tag>
            
            <tag> StackExchange.Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with Solution File]]></title>
      <url>https://blackie1019.github.io/2017/04/16/ASP-NET-Core-play-with-Solution-File/</url>
      <content type="html"><![CDATA[<p>介紹如何建立solution檔案幫我們連接多個project</p>
<a id="more"></a>
<p>同於在ASP.NET的開發，ASP.NET Core也可以使用.sln檔案幫我們建立與多個csharproj檔案的關聯性</p>
<p>如果我們今天的整個開發會將底層的應用函式庫與執行的網頁應用程式抽離成兩個專案，並且另外再增添一個專案做測試，整個關聯可以表示如下：</p>
<p><img src="solution_project.png" alt="solution_project.png"></p>
<p>這邊的專案拆分好處是我們可以分離不同的開發(關注點分離)並隔離彼此的影響．</p>
<p>而我們就可以透過.sln的檔案幫我們一次管理多個csharproj檔案，如執行Nuget還原或是多個專案建置等動作．</p>
<h1 id="Hands-On-with-sln"><a href="#Hands-On-with-sln" class="headerlink" title="Hands On with .sln"></a>Hands On with .sln</h1><p>這邊我們演練一個會用到.sln的情境，建立以下簡單的架構：</p>
<ul>
<li><p>App</p>
<p>  實際開發的函式庫專案</p>
</li>
<li><p>App.Test</p>
<p>  測試函式庫的測試專案</p>
</li>
</ul>
<h1 id="Create-Folder-and-Two-Project-App-and-App-Test"><a href="#Create-Folder-and-Two-Project-App-and-App-Test" class="headerlink" title="Create Folder and Two Project : App and App.Test"></a>Create Folder and Two Project : App and App.Test</h1><p>首先我們新增一個根目錄資料夾並添加兩個專案(classlib與mstest專案)，先建立成以下的結構：</p>
<p><img src="folder.png" alt="folder"></p>
<p>當專案建立完成後我們如果再根目錄直接執行dotnet restore則會看到以下錯誤：</p>
<p><img src="restore.png" alt="restore"></p>
<h1 id="Create-sln-and-add-csharproj-reference"><a href="#Create-sln-and-add-csharproj-reference" class="headerlink" title="Create .sln and add .csharproj reference"></a>Create .sln and add .csharproj reference</h1><p>這邊我們透過以下指令建立一個新的.sln檔案：</p>
<pre><code>dotnet new sln
</code></pre><p>建立後我們必須把.csharproj的參考加入：</p>
<pre><code>dotnet sln add App/App.csproj
dotnet sln add App.Test/App.Test.csproj
</code></pre><p><img src="add_csharproj.png" alt="add_csharproj"></p>
<p>接著我們再次執行還原就可以看到Nuget成功地幫兩個專案都進行還原了</p>
<p><img src="sln_restore.png" alt="sln_restore"></p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core MVC play with Google Container Engine]]></title>
      <url>https://blackie1019.github.io/2017/04/15/ASP-NET-Core-MVC-play-with-Goolge-Container-Engine/</url>
      <content type="html"><![CDATA[<p>使用Google Container Engine 是Google所推出的Container Host Cluster服務，讓Docker(Cotainer)透過Cluster環境來執行你所寫的ASP.NET Core MVC程式。</p>
<a id="more"></a>
<p><a href="https://cloud.google.com/free/?hl=zh-tw" target="_blank" rel="external">Google Cloud免費試用</a>可以讓我們一個月有免費獲得 $300 美元的試用額度，並且這包含平台中的所有服務．甚至到免費試用期結束後不會自動延續服務收費．</p>
<p>而Google Container Engine (GKE) 是Google所推出的Container Host Cluster服務，GKE 一方面允許擴展可以使用的資源，另一方面則可以讓執行時候可以有容錯的可能性(避免單點錯誤的狀況發生)。而為什麼叫GKE而不是叫GCE勒，原因在於K指的是Google 自家的kubernetes系統。Docker本身強調build, ship and run的觀念，透過K8S作完整的管理即可達到擴展性與可修復等特性。</p>
<p>這次分享如何將ASP.NET Core運行在GKE上，對於Google Cloud Platform的基本介紹可以參考先前的<a href="https://blackie1019.github.io/2017/04/11/Google-Cloud-Platform-Introduction/">Google Cloud Platform Introduction</a></p>
<p>運行起來的網站連結=&gt;<a href="http://35.185.170.247:8080/" target="_blank" rel="external">demo網站</a></p>
<h1 id="Google-App-Type-GAE-GKE-and-GCE"><a href="#Google-App-Type-GAE-GKE-and-GCE" class="headerlink" title="Google App Type : GAE, GKE, and GCE"></a>Google App Type : GAE, GKE, and GCE</h1><p><img src="Iaas_Paas.png" alt="Iaas_Paas"></p>
<p>針對不同的彈性與管理/開發上的用途，Google Cloud Platform上可以Hosting的服務有以下三種:</p>
<h2 id="Google-Compute-Engine-GCE"><a href="#Google-Compute-Engine-GCE" class="headerlink" title="Google Compute Engine(GCE)"></a>Google Compute Engine(GCE)</h2><p>等同於用VM的觀念來使用Google Cloud</p>
<h2 id="Google-App-Engine-GAE"><a href="#Google-App-Engine-GAE" class="headerlink" title="Google App Engine(GAE)"></a>Google App Engine(GAE)</h2><p>Google App Engine(GAE) 讓使用者可以在Google的基礎架構之上執行網路應用程式，分為Standard與Flexible兩種不同的Runtime。對於能使用的開發的語言有所限制，但相對GCE來講，可以更簡單且快速的將你的程式做部屬，且也針對network, security,monitoring與performace tuning做了設定與調整。</p>
<h2 id="Google-Container-Engine-GKE"><a href="#Google-Container-Engine-GKE" class="headerlink" title="Google Container Engine(GKE)"></a>Google Container Engine(GKE)</h2><p>讓你可以使用Docker與k8s做更彈性的動態拓展，實現containerlize</p>
<h2 id="Deploying-Comparison"><a href="#Deploying-Comparison" class="headerlink" title="Deploying Comparison"></a>Deploying Comparison</h2><p><img src="deploying_comparison.png" alt="deploying_comparison"></p>
<h1 id="Kubernetes-Introduction"><a href="#Kubernetes-Introduction" class="headerlink" title="Kubernetes Introduction"></a>Kubernetes Introduction</h1><p>Kubernetes (K8S) 是 Google 團隊發起並維護的Docker開源Container Host Cluster管理系統，它支援常見的雲平台(Google Cloud, AWS, Azure)，也支援內部架設。而這個專案本身是起源至<a href="https://research.google.com/pubs/pub43438.html" target="_blank" rel="external">Borg</a>．有興趣要了解這個K8S的可以參考<a href="https://kubernetes.io/" target="_blank" rel="external">K8S.io</a>．</p>
<p>Google 於2015年釋出K8S後，引起了話題。原先僅是屬於內部專案 – Borg，之後IT大廠如Redhat, CoreOS, IBM, 甚至 Amazon, Microsoft 這些公有雲端供應商都搶著整合進自己的服務中。</p>
<p><img src="kubernetes pods.png" alt="kubernetes pods"></p>
<p>K8S本身透過GO來實作，有以下的特性:</p>
<ul>
<li>簡單：輕量級，簡單，容易理解</li>
<li>方便：支援公有雲，私有雲，混合處理雲，以及多種雲平台</li>
<li>拓展姓：模組化，可插拔，支援鉤子，可任意組合</li>
<li>自修復：自動重調度，自動重啟，自動複製</li>
</ul>
<p>針對K8S更詳細的介紹請參考<a href="https://wild0522.gitbooks.io/yeasy_dp/content/kubernetes/" target="_blank" rel="external">yeasy docker practice 2017年正體中文譯本 - Kubernetes</a>)</p>
<p><img src="kubernetes_design.jpg" alt="kubernetes_design"></p>
<p>以下節錄重點介紹</p>
<ul>
<li>節點（Node）：一個節點是一個執行 Kubernetes 中的主電腦。</li>
<li>容器組（Pod）：一個 Pod 對應於由若干容器組成的一個容器組，同個組內的容器共享一個儲存卷(volume)。</li>
<li>容器組生命週期（pos-states）：包含所有容器狀態集合，包括容器組狀態類型，容器組生命週期，事件，重啟原則，以及replication controllers。</li>
<li>Replication Controllers（replication-controllers）：主要負責指定數量的pod在同一時間一起執行。</li>
<li>服務（services）：一個Kubernetes服務是容器組邏輯的進階抽像，同時也對外提供存取容器組的原則。</li>
<li>卷（volumes）：一個卷就是一個目錄，容器對其有存取許可。</li>
<li>標籤（labels）：標籤是用來連線一組對象的，比如容器組。標籤可以被用來組織和選擇子物件。</li>
<li>介面權限（accessing_the_api）：連接埠，ip位址和代理的防火牆規則。</li>
<li>web 界面（ux）：使用者可以透過 web 界面作業Kubernetes。</li>
<li>指令行指令列作業（cli）：kubecfg指令。</li>
</ul>
<h2 id="Kubernetes-Overviw"><a href="#Kubernetes-Overviw" class="headerlink" title="Kubernetes Overviw"></a>Kubernetes Overviw</h2><p>K8S屬於分散式架構，主要由三個元件所構成：</p>
<ol>
<li>Master – 主節點，負責主要管理與協調各Node</li>
<li>Node – 主要工作的節點，上面運行了許多容器(Pod)。之前看過，在1.3版的K8S可操控高達2,000個nodes以上，可支援60,000個Pod。這邊最有名的案例就是Niantic推出的Pokémon Go</li>
<li>Masters和Nodes組成叢集(Clusters)</li>
</ol>
<p>kubernetes pods:</p>
<p><img src="kubernetes pods.png" alt="kubernetes pods"></p>
<p>kubernetes pods 細節:</p>
<p><img src="kubernetes pods_detail.png" alt="kubernetes pods_detail"></p>
<p>對於上述說明看不太懂的朋友，誠摯的推薦花8分鐘看下面的影片！</p>
<p><a href="http://www.bilibili.com/blackboard/player.html?aid=10087636&amp;cid=16669885&amp;page=1" target="_blank" rel="external">写给孩子看的 Kubernetes 动画指南【中英字幕】</a></p>
<h1 id="ASP-NET-Core-MVC-Play-with-GKE"><a href="#ASP-NET-Core-MVC-Play-with-GKE" class="headerlink" title="ASP.NET Core MVC Play with GKE"></a>ASP.NET Core MVC Play with GKE</h1><h2 id="Create-ASP-NET-Core-MVC-Project"><a href="#Create-ASP-NET-Core-MVC-Project" class="headerlink" title="Create ASP.NET Core MVC Project"></a>Create ASP.NET Core MVC Project</h2><p>首先我們先建立專案資料夾</p>
<pre><code>mkdir AspNetDockerDemo
</code></pre><p>接著我們就透過dotnet CLI工具幫我們建立mvc專案</p>
<pre><code>dotnet new mvc
</code></pre><p>專案建立後我們就透過nuget幫我們還原專案有關的類別庫並執行它</p>
<pre><code>dotnet restore
dotnet run
</code></pre><p>這邊我們執行該專案如果可以看到以下畫面就代表網站建立成功了</p>
<p><img src="mvcsite.png" alt="mvcsite"></p>
<h2 id="Publish-Release-Version-Application"><a href="#Publish-Release-Version-Application" class="headerlink" title="Publish Release Version Application"></a>Publish Release Version Application</h2><p>實務上在正式環境運行時我們會將ASP.NET Core編譯成release的版本才做發佈，所以這邊我們先編譯release並發佈該版本</p>
<pre><code>dotnet publish -c Release
</code></pre><p>當成功建立後我們先確認一下現在建立的專案目錄：</p>
<p><img src="project.png" alt="project"></p>
<p>這邊可以看到我們的程式已經編譯且放在bin&gt;Release&gt;netcoreapp1.1&gt;publish中</p>
<p>我們可以透過以下方式將網站再次運行確認打包出來的東西是否正確</p>
<pre><code>cd bin\Release\netcoreapp1.1\publish
dotnet AspNetDocker.dll
</code></pre><h2 id="Containerize-Application-into-Docker-Container"><a href="#Containerize-Application-into-Docker-Container" class="headerlink" title="Containerize Application into Docker Container"></a>Containerize Application into Docker Container</h2><p>當我們程式都確定撰寫完畢且編譯成Release發佈後，我們就可以到該發佈的資料夾內建立Dockerfile(注意檔名為大寫且沒有副檔名)</p>
<pre><code>touch Dockerfile
</code></pre><p>Dockerfile內容如下:</p>
<pre><code>FROM microsoft/dotnet:1.1.1-runtime
COPY . /app
WORKDIR /app
EXPOSE 8080/tcp
ENV  ASPNETCORE_URLS http://*:8080
ENTRYPOINT [&quot;dotnet&quot;,&quot;AspNetDockerDemo.dll&quot;]
</code></pre><p>這邊我們特別指定使用ASP.NET Core 1.1.1-runtime的版本而非SDK版，兩者的差異可以看<a href="https://hub.docker.com/r/microsoft/dotnet/" target="_blank" rel="external">Docker Hub上的說明</a>．</p>
<p>接著我們在資料夾路徑內建立該docker image：</p>
<pre><code>docker build -t blackie1019/aspnetcoredemo:gke .
</code></pre><p>建立完成後我們將該映像檔實際運行起來看看是否正常:</p>
<pre><code>docker run -d -p 8080:8080 -t blackie1019/aspnetcoredemo:gke
</code></pre><p>執行成功後確認一下是否正常運行(-a是為了列出正在執行跟沒有執行的所有container)：</p>
<pre><code>docker image -a
</code></pre><p><img src="docker_running_container.png" alt="docker_running_container"></p>
<p>如果都沒問題我們就可以到<a href="localhost:8080" target="_blank" rel="external">localhost:8080</a>實際看到我們的網站．接下來我們將開始設定google cloud platform</p>
<h2 id="Register-and-Create-Google-Cloud-Project"><a href="#Register-and-Create-Google-Cloud-Project" class="headerlink" title="Register and Create Google Cloud Project"></a>Register and Create Google Cloud Project</h2><p>首先到<a href="https://cloud.google.com/" target="_blank" rel="external">Google Cloud Platform</a>進行帳號註冊</p>
<p>Google Cloud Platform不同於AWS與Azure在網頁介面上是把每個服務分類後在單一服務裡面呈現所有與該服務有關的專案，它採用專案導向的方式建立服務，所以我們需要建立一個專案(project)才可以針對該專案建立相關服務．</p>
<p>至<a href="https://console.cloud.google.com/home/dashboard" target="_blank" rel="external">Dashboard</a>我們先建立一個新的專案，建立完後我們可以看到該專案的project-id</p>
<p><img src="gcp_dashboard.png" alt="gcp_dashboard"></p>
<p><img src="gcp_project_id.png" alt="gcp_project_id"></p>
<h2 id="Download-and-Setup-Google-Cloud-SDK"><a href="#Download-and-Setup-Google-Cloud-SDK" class="headerlink" title="Download and Setup Google Cloud SDK"></a>Download and Setup Google Cloud SDK</h2><p><a href="https://cloud.google.com/sdk/" target="_blank" rel="external">Google Cloud SDK</a>是一個官方推出的Command-line工具</p>
<p>小編這邊用的電腦是macOS的系統，須先將python更新至2.7版以上，然後依序執行下面指令</p>
<pre><code>curl https://sdk.cloud.google.com | bash
</code></pre><p>重啟shell或是透過下面指令直接重啟</p>
<pre><code>exec -l $SHELL
</code></pre><p>接著我們初始化sdk，這個步驟會將登入資料跟設定記憶在該電腦環境中</p>
<pre><code>gcloud init
</code></pre><h2 id="Publish-ASP-NET-Core-MVC-App-to-Cloud"><a href="#Publish-ASP-NET-Core-MVC-App-to-Cloud" class="headerlink" title="Publish ASP.NET Core MVC App to Cloud"></a>Publish ASP.NET Core MVC App to Cloud</h2><h3 id="Create-a-Kubernetes-Cluster"><a href="#Create-a-Kubernetes-Cluster" class="headerlink" title="Create a Kubernetes Cluster"></a>Create a Kubernetes Cluster</h3><p>在安裝Google Cloud SDK後我們需要安裝kubectl這個元件(components)：</p>
<pre><code>docker components install kubectl
</code></pre><p>之後可以透過該工具來幫我們建立Kubernetes Cluster:</p>
<pre><code>gcloud container clusters create gcd-demo-cluster --zone asia-east1-a
</code></pre><p><a href="https://cl$ gcloud container clusters get-credentials hello-dotnet-cluster \ --zone europe-west1-b --project &lt;PROJECT_ID&gt;oud.google.com/sdk/gcloud/reference/compute/zones/list" target="_blank" rel="external">–zone參數</a>是讓我們指定要建立的region位置，實際上能用的region我們可以透過下面指令查詢：</p>
<pre><code>gcloud compute zones list
</code></pre><p><img src="gcloud_compute_zoon.png" alt="gcloud_compute_zoon"></p>
<p>如果不想透過指令建立也可以透過GUI介面建置：</p>
<p><img src="gcp_container_engine.png" alt="gcp_container_engine"></p>
<h3 id="Config-kubectl-command-line-Access-to-the-Kubernetes-Cluster"><a href="#Config-kubectl-command-line-Access-to-the-Kubernetes-Cluster" class="headerlink" title="Config kubectl command line Access to the Kubernetes Cluster"></a>Config kubectl command line Access to the Kubernetes Cluster</h3><p>在使用前我們需要先透過<a href="https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials" target="_blank" rel="external">get-credentials</a>設定要使用的Kubernetes Cluster</p>
<pre><code>gcloud container clusters get-credentials gcd-demo-cluster --zone &quot;asia-east1-a&quot; -project gcddemo-164215
</code></pre><p><img src="gcloud_contain_cluster_after.png" alt="gcloud_contain_cluster_after"></p>
<p>這邊如果我們沒有按照上一步建立Kubernetes Cluster或是打錯名稱就會出現下面找不到的錯誤：</p>
<p><img src="gcloud_contain_cluster_before.png" alt="gcloud_contain_cluster_before"></p>
<h3 id="Push-Image-to-Goole-Container-Registry"><a href="#Push-Image-to-Goole-Container-Registry" class="headerlink" title="Push Image to Goole Container Registry"></a>Push Image to Goole Container Registry</h3><p>接著我們將先前建立好的docker 映像檔上傳至<a href="https://cloud.google.com/container-registry/" target="_blank" rel="external">Goole Container Registry</a>，但在運行前我們先將剛剛的映像檔加入新的tag方便gcloud指令可以找到它：</p>
<pre><code>docker tag blackie1019/aspnetcoredemo:gke gcr.io/gcddemo-164215
</code></pre><p><img src="docker_tag_after.png" alt="docker_tag_after"></p>
<p>然後我們用docker – push的方式上傳至Goole Container Registry</p>
<pre><code>gcloud docker -- push gcr.io/gcddemo-164215
</code></pre><p><img src="gcloud_docker_upload.png" alt="gcloud_docker_upload"></p>
<h3 id="Deploy-App-to-Google-Container-Engine"><a href="#Deploy-App-to-Google-Container-Engine" class="headerlink" title="Deploy App to Google Container Engine"></a>Deploy App to Google Container Engine</h3><p>當我們將上面docer映像檔上傳完成後，就可以透過下面指令將它實際運行起來：</p>
<pre><code>kubectl run net-core-mvc-demo --image=grc.io/gcddemo-164215 \ --port=8080 deployment &quot;net-core-mvc-demo&quot; created
</code></pre><p><img src="kubectl_run.png" alt="kubectl_run"></p>
<p>我們可以用get deployments與get pods查看剛剛建立的情況</p>
<p><img src="kubectl_get_deployments.png" alt="kubectl_get_deployments"></p>
<p>這邊pods的建立需要時間所以當我們確認他狀態為running後才表示真的可以用</p>
<p><img src="kubectl_get_pods.png" alt="kubectl_get_pods"></p>
<p>當pods正常運行後我們還須多做一個設定將我們的8080 port開發對外</p>
<pre><code>kubectl expose deployment net-core-mvc-demo --port=8080 --type=&quot;LoadBalancer&quot; service &quot;net-core-mvc-demo&quot; exposed
</code></pre><p>該指令執行後由於建立service需要一點時間所以我們可以透過下面指令查看目前狀態(從pending=&gt;給ip)：</p>
<p><img src="kubectl_service.png" alt="kubectl_service"></p>
<p>當我們看到它被指派了external-ip後我們就可以到這個ip與搭配的port好去看該網站了，<a href="http://35.185.170.247:8080/" target="_blank" rel="external">http://35.185.170.247:8080/</a></p>
<p>整個弄完後Recap一下整個架構會如下圖：</p>
<p><img src="gke-concepts.png" alt="gke-concepts"></p>
<h1 id="補充-Google-App-Engine-Environment"><a href="#補充-Google-App-Engine-Environment" class="headerlink" title="[補充] Google App Engine Environment"></a>[補充] Google App Engine Environment</h1><p>Google App Engine 有兩個環境(Environment)類型:</p>
<h2 id="App-Engine-Standard-Environment"><a href="#App-Engine-Standard-Environment" class="headerlink" title="App Engine Standard Environment"></a>App Engine Standard Environment</h2><ul>
<li>Managed runtimes for specific versions of Java, Python, PHP &amp; Go</li>
<li>Autoscale workloads to meet demand</li>
<li>Free daily quota, usage based pricing</li>
<li>SDKs for development, testing and deployment</li>
<li><p>Need to conform to sandbox constraints:</p>
<ul>
<li>No writing to local file system</li>
<li>Request timeouts at 60 seconds</li>
<li>Limit on 3rd-party software installations</li>
</ul>
</li>
</ul>
<p>以下是官方以Web應用程式給的運作流程範例：</p>
<p><img src="app_engine_standard_work_flow.png" alt="app_engine_standard_work_flow"></p>
<h2 id="App-Engine-Flexible-Environment-Beta"><a href="#App-Engine-Flexible-Environment-Beta" class="headerlink" title="App Engine Flexible Environment (Beta)"></a>App Engine Flexible Environment (Beta)</h2><ul>
<li>Build, deploy containerized apps with a click</li>
<li>Standard runtimes - Python, Java, Go, Node.js - with no sandbox constraints</li>
<li>Custom runtime support for any language that supports HTTP requests</li>
<li>During beta pricing based on Compute Engine usage</li>
<li>Local development relies on Docker</li>
<li>Standard runtimes can access App Engine services: Datastore, Memcache, task queues, logging, users, and so on</li>
</ul>
<p>Flexible Environment 因為可使用Custom runtime，我們就可以自行定義Container的dockerfile，而這樣的檔案也可以沿用到GKE的架構．</p>
<h2 id="Standard-and-Flexible-Environment-Comparison"><a href="#Standard-and-Flexible-Environment-Comparison" class="headerlink" title="Standard and Flexible Environment Comparison"></a>Standard and Flexible Environment Comparison</h2><p><img src="app_engine_comparison.png" alt="app_engine_comparison"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.slideshare.net/peihsinsu/google-cloud-computing-compares-gce-gae-and-gke" target="_blank" rel="external">Google Cloud Computing compares GCE, GAE and GKE</a></li>
<li><a href="https://www.cool3c.com/article/119184" target="_blank" rel="external">GKE 系列文章(一) – 為什麼使用 Kubernetes</a></li>
<li><a href="http://www.ithome.com.tw/voice/108907" target="_blank" rel="external">Pokémon GO全球大賣的隱形關鍵</a></li>
<li><a href="https://codelabs.developers.google.com/codelabs/cloud-app-engine-aspnetcore/#0" target="_blank" rel="external">Deploy an ASP.NET Core App to App Engine</a></li>
<li><a href="https://github.com/gcpug-tw/gcp-demo" target="_blank" rel="external">GCPUG.TW-GCP Demos</a></li>
<li><a href="https://www.gitbook.com/book/peihsinsu/docker-note-book/details" target="_blank" rel="external">Docker學習筆記</a></li>
<li><a href="https://www.gitbook.com/book/gcpug-tw/kuberbetes-in-action/details" target="_blank" rel="external">Kubernetes學習筆記</a></li>
<li><a href="https://cloudplatform.googleblog.com/2016/10/managing-containerized-ASP.NET-Core-apps-with-Kubernetes.html" target="_blank" rel="external">Managing containerized ASP.NET Core apps with Kubernetes</a></li>
<li><a href="https://cloud.google.com/container-registry/docs/pushing" target="_blank" rel="external">Google Cloud Platform - Pushing to Container Registry</a></li>
<li><a href="http://tonybai.com/2016/11/16/how-to-pull-images-from-private-registry-on-kubernetes-cluster/" target="_blank" rel="external">Kubernetes从Private Registry中拉取容器镜像的方法</a></li>
<li><a href="https://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address-service/" target="_blank" rel="external">Using a Service to Access an Application in a Cluster</a></li>
<li><a href="https://gcpug-tw.gitbooks.io/google-cloud-platform-in-practice/content/container-engine/gke-basics.html" target="_blank" rel="external">GCPUG.TW : GKE基本操作</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Google Cloud Platform </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> GCP </tag>
            
            <tag> Container </tag>
            
            <tag> GKE </tag>
            
            <tag> Google Container Engine </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.NET CLI Create New Project With Target Framework Version]]></title>
      <url>https://blackie1019.github.io/2017/04/14/Dotnet-CLI-Create-New-Project-With-Target-Framework-Version/</url>
      <content type="html"><![CDATA[<p>使用-f參數讓我們將新增的專案放入指定的.Net Framework版本</p>
<a id="more"></a>
<p>今天如果是用dotnet cli幫我們產生新的類別庫(Class Library)專案與MVC專案我們會發現預設給我們的.Net Framework不一致：</p>
<p><img src="default.png" alt="default"></p>
<p>而我們今天如果再新增專案時使用–help就可以知道為什麼了。</p>
<h1 id="Create-New-Class-Library-Project"><a href="#Create-New-Class-Library-Project" class="headerlink" title="Create New Class Library Project"></a>Create New Class Library Project</h1><p>我們使用下面指令建立新的類別庫專案：</p>
<p><img src="default_classlib.png" alt="default_classlib"></p>
<p>這邊可以看到預設的版本是 netstandard1.4</p>
<h1 id="Create-New-MVC-Project"><a href="#Create-New-MVC-Project" class="headerlink" title="Create New MVC Project"></a>Create New MVC Project</h1><p>我們使用下面指令建立新MVC專案：</p>
<p><img src="default_mvc.png" alt="default_mvc"></p>
<p>這邊可以看到預設的版本是 netcoreapp1.1</p>
<h1 id="Create-New-Class-Library-Project-with-Target-Framework"><a href="#Create-New-Class-Library-Project-with-Target-Framework" class="headerlink" title="Create New Class Library Project with Target Framework"></a>Create New Class Library Project with Target Framework</h1><p>如果想在新增專案時給予指定的Target Framework我們可以用-f或是–framework的方式帶指定版本的參數：</p>
<pre><code>dotnet new classlib -f netcoreapp1.1
</code></pre><p><img src="dotnet_new_framework.png" alt="dotnet_new_framework"></p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> .NET CLI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Execute Specific Test Case on MSTest]]></title>
      <url>https://blackie1019.github.io/2017/04/14/Execute-Specific-Test-Case-on-MS-Test/</url>
      <content type="html"><![CDATA[<p>紀錄一下ASP.NET Core如何透過MSTest如何執行特定Test Case</p>
<a id="more"></a>
<p>我們簡單的做一個計算機並提供兩個計算功能，因為呼叫方便用了<a href="https://blackie1019.github.io/2017/04/03/Singleton-Pattern-Implementation-In-CSharp/">Lazy實作Singleton Pattern</a>：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;Calculator&gt; lazy = <span class="keyword">new</span> Lazy&lt;Calculator&gt;(() =&gt; <span class="keyword">new</span> Calculator());</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Calculator Instance &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> lazy.Value; &#125; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Calculator</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> value1,<span class="keyword">int</span> value2</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> value1+value2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">AddWithAutoPlus3</span>(<span class="params"><span class="keyword">int</span> value1,<span class="keyword">int</span> value2</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> value1+value2+<span class="number">3</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這邊簡單的寫一個測試如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">App.MSTest</span></div><div class="line">&#123;</div><div class="line">    [TestClass]</div><div class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitTest1</span></div><div class="line">    &#123;</div><div class="line">        [TestMethod]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_Calculator_Add</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> value1 = <span class="number">1</span>; </div><div class="line">            <span class="keyword">var</span> value2 = <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> expected = <span class="number">3</span>;</div><div class="line">            <span class="keyword">int</span> actual;</div><div class="line"></div><div class="line">            actual = Calculator.Instance.Add(value1,value2);</div><div class="line">            Assert.AreEqual(expected,actual);</div><div class="line">            Assert.Inconclusive(<span class="string">"Test Passed with Basic Values"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [TestMethod]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test_Calculator_AddWithAutoPlus3</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> value1 = <span class="number">1</span>; </div><div class="line">            <span class="keyword">var</span> value2 = <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> expected = <span class="number">6</span>;</div><div class="line">            <span class="keyword">int</span> actual;</div><div class="line"></div><div class="line">            actual = Calculator.Instance.AddWithAutoPlus3(value1,value2);</div><div class="line">            Assert.AreEqual(expected,actual);</div><div class="line">            Assert.Inconclusive(<span class="string">"Test Passed with Basic Values"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>當我們撰寫好後就可以執行指令觀看測試結果</p>
<pre><code>dotnet test
</code></pre><p><img src="dotnet_test.png" alt="dotnet_test"></p>
<p>我們可以透過預設的–help查出目前的所有支援的參數有哪些</p>
<pre><code>dotnet test --help
</code></pre><p><img src="dotnet_test_help.png" alt="dotnet_test_help"></p>
<p>我們可以用 –list 的參數來列出目前所有測試案例</p>
<pre><code>dotnet test --list 
</code></pre><p>而當我們只要執行特定單一測試案例時，我們可以透過　–filter　的參數加上我們指定的查詢pattern(FullyQualifiedName=App.MSTest.UnitTest1.Test_Calculator_Add”<br>Namespace.Class.Method):</p>
<pre><code>dotnet test --filter &quot;FullyQualifiedName=App.MSTest.UnitTest1.Test_Calculator_Add&quot;
</code></pre><p><img src="dotnet_test_filter.png" alt="dotnet_test_filter"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://blogs.msdn.microsoft.com/visualstudioalm/2016/09/01/announcing-mstest-v2-framework-support-for-net-core-1-0-rtm/" target="_blank" rel="external">Announcing MSTest V2 Framework support for .NET Core 1.0 RTM
</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> MSTest </tag>
            
            <tag> Unit Testing </tag>
            
            <tag> Automation Testing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code Insiders Build Introduction]]></title>
      <url>https://blackie1019.github.io/2017/04/13/Visual-Studio-Code-Insiders-Build-Introduction/</url>
      <content type="html"><![CDATA[<p>介紹Visual Studio Code Insiders Build</p>
<a id="more"></a>
<p>在2016五月時發佈的Visual Studio Code Insiders Build其實就是一個開發者預覽版的概念，訴求就是因應社群的快速回應，微軟官方另外建立了一個版本，將每日發佈最新版的Visual Studio Code，並且如果遇到最新的release有問題時會退回到上一個穩定的版本做更新，並針對最新有問題的版本建立問題追蹤並快速修復．</p>
<p><img src="value_props.svg" alt="value_props"></p>
<p>這樣的好處可以讓勇於接納新版的朋友(強者)可以最快的取得更新，並同時給予官方支援的肯定，省去自己拉新版建置後還要退版的問題．</p>
<p>而在安裝上，Visual Studio Code Insiders Build可與Visual Studio Code 並存:</p>
<p><img src="vscode_vscode_insiderbuild.png" alt="vscode_vscode_insiderbuild"></p>
<p>而當我們有兩個VS Code時就可以用<a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="external">Sync Setting</a>這個extensions幫我們同步兩邊的主題, 套件與設定．</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://code.visualstudio.com/blogs/2016/05/23/evolution-of-insiders" target="_blank" rel="external">Evolution of the Insiders Build</a> </li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with MongoDB and MongoDB .NET Driver - Decimal Convert]]></title>
      <url>https://blackie1019.github.io/2017/04/13/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Decimal-Convert/</url>
      <content type="html"><![CDATA[<p>紀錄如何使用MongoDB .NET Driver處理 Decimal 值</p>
<a id="more"></a>
<h1 id="MongoDB-NET-Driver-Handle-Decimal"><a href="#MongoDB-NET-Driver-Handle-Decimal" class="headerlink" title="MongoDB .NET Driver Handle Decimal"></a>MongoDB .NET Driver Handle Decimal</h1><p>在資料型別轉換的部分可使用BsonRepresentation這個修飾attribute幫我們做轉換，但由於Mongo 3.4之前尚未支援BsonDecimal128，所以僅能使用BsonType.Double</p>
<p>測試程式碼：</p>
<p><img src="mongo_net_driver_decimal.png" alt="mongo_net_driver_decimal"></p>
<p>Member.cs：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> MongoDB.Bson;</div><div class="line"><span class="keyword">using</span> MongoDB.Bson.Serialization.Attributes;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">MongoCRUD.Core.Pocos</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> ObjectId Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        [BsonElement(<span class="string">"name"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="comment">// MogoDB 3.4, Support BsonDecimal128, Decimal (28-29)</span></div><div class="line">        [BsonElement(<span class="string">"balance"</span>),BsonRepresentation(BsonType.Decimal128)]</div><div class="line"></div><div class="line">        <span class="comment">// Below than 3.4, only convert to Double (15-16)</span></div><div class="line">        <span class="comment">//[BsonElement("balance"), BsonRepresentation(BsonType.Double)]</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">decimal</span> Balance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>測試程式結果(依序為:BsonRepresentation為BsonType.Double,不設定BsonRepresentation,BsonRepresentation為BsonType.Decimal128):</p>
<p><img src="mongo_decimal.png" alt="mongo_decimal"></p>
<p>這邊我們其實是將Decimal的值傳入0.123456789876543212345678987654321M，但從結果來看他會將超出的部分進位後截斷</p>
<p>蛋如果是我們指定BsonRepresentation為BsonType.Double且資料長度超出轉換長度則會拋出例外(exception)．</p>
<p>另外，<a href="https://blackie1019.github.io/2017/03/30/Robomongo-Native-and-cross-platform-MongoDB-manager/">先前介紹跨平台的MongoDB UI Admin 工具 - Robomongo</a>則在顯示decimal資料上有問題，會出現unsupported的狀況．</p>
<p><img src="robomongo_unsupported.png" alt="robomongo_unsupported"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.mongodb.com/manual/tutorial/model-monetary-data/#numeric-decimal" target="_blank" rel="external">MONGODB MANUAL : Model Monetary Data</a></li>
<li><a href="https://dotnetcodr.com/2016/04/25/introduction-to-mongodb-with-net-part-15-object-serialisation-continued/" target="_blank" rel="external">Introduction to MongoDb with .NET part 15: object serialisation continued</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MongoDB .NET Driver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Cloud Platform Introduction]]></title>
      <url>https://blackie1019.github.io/2017/04/12/Google-Cloud-Platform-Introduction/</url>
      <content type="html"><![CDATA[<p>介紹一下Google Cloud與透過Google Compute Engine建設第一個ASP.NET雲端應用程式</p>
<a id="more"></a>
<h1 id="Google-Cloud-Platform-Overview"><a href="#Google-Cloud-Platform-Overview" class="headerlink" title="Google Cloud Platform Overview"></a>Google Cloud Platform Overview</h1><p>Google Cloud Platform(GCP)是由Google在2008年preview，在2011所公開的雲端服務，它包含了Google核心基礎架構、資料分析和機器學習技術．</p>
<p>GCP也是第一個獲得 ISO 14001 認證 與 100% 減碳的雲端服務．</p>
<h2 id="Data-Center-Backbone-Points-of-Presence-and-Edge-Caching"><a href="#Data-Center-Backbone-Points-of-Presence-and-Edge-Caching" class="headerlink" title="Data Center, Backbone, Points of Presence, and Edge Caching"></a>Data Center, Backbone, Points of Presence, and Edge Caching</h2><p>GCP在台灣最大的優勢是在彰濱有建立Data Center，加上Google積極的建設各地Data Center的海底光纖纜線強化本身的網路骨幹(Backbone) ．換言之GCP的服務應該比AWS與Azure的基礎建設品質會好不少．</p>
<h2 id="Cloud-Regions-and-Zones"><a href="#Cloud-Regions-and-Zones" class="headerlink" title="Cloud Regions and Zones"></a>Cloud Regions and Zones</h2><ul>
<li><p>Regions</p>
<ul>
<li>Regions are specific geographical locations where you can run your resources</li>
<li>Are collections of zones</li>
<li>Regional resources are available to resources in any zone in theregion</li>
</ul>
</li>
<li><p>Zones</p>
<ul>
<li>Isolated locations within a region</li>
<li>Zonal resources are only available in that zone</li>
</ul>
</li>
</ul>
<p>詳細的Regions與Zones可以參考<a href="https://cloud.google.com/about/locations/" target="_blank" rel="external"></a></p>
<p><img src="Region_Zone.png" alt="Region_Zone"></p>
<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>針對Network在不同的Region與Zone的流動可以參考：</p>
<p><img src="network.png" alt="network"></p>
<p>CDN則有另外一個：</p>
<p><img src="network_cdn_point.png" alt="network_cdn"></p>
<h3 id="Zonal-Coverage-Regional-Coverage-and-Multi-Regional-Coverage"><a href="#Zonal-Coverage-Regional-Coverage-and-Multi-Regional-Coverage" class="headerlink" title="Zonal Coverage, Regional Coverage, and Multi-Regional Coverage"></a>Zonal Coverage, Regional Coverage, and Multi-Regional Coverage</h3><p>針對High Availability與Disaster Recovery有分為幾種做法：</p>
<h4 id="Zonal-Coverage"><a href="#Zonal-Coverage" class="headerlink" title="Zonal Coverage"></a>Zonal Coverage</h4><p>我們可以將程式部署到一個或多個Zone當中</p>
<p><img src="Zonal_Coverage.png" alt="Zonal Coverage"></p>
<h4 id="Regional-Coverage"><a href="#Regional-Coverage" class="headerlink" title="Regional Coverage"></a>Regional Coverage</h4><p>也可以自動擴展到指定的Region</p>
<p><img src="Regional_Coverage.png" alt="Regional Coverage"></p>
<h4 id="Multi-Regional-Coverage"><a href="#Multi-Regional-Coverage" class="headerlink" title="Multi-Regional Coverage"></a>Multi-Regional Coverage</h4><p>甚至自動在多個Region內做擴展，這邊雖然是多個但還是有地理位置的限制：</p>
<p><img src="Multi_Regional_Coverage.png" alt="Multi-Regional Coverage"></p>
<h2 id="Customer-Friendly-Pricing"><a href="#Customer-Friendly-Pricing" class="headerlink" title="Customer-Friendly Pricing"></a>Customer-Friendly Pricing</h2><ul>
<li><p>Sub-Minutes billing</p>
<p>  以分計費，相對於AWS與Azure這點的確太強大了</p>
</li>
<li><p>Sustained-use discounts</p>
<p>  如果當月使用超過25%的時間，則另外還可以得到優惠．算是一種鼓勵使用的優惠</p>
</li>
<li><p>Compute Engine custom machine types</p>
<p>  對於不同規格的硬體(Infrastructure)需求可以隨心所欲的配置．也有提供同於AWS與Azure用定好的分類來給使用者．</p>
</li>
<li><p>Big Query</p>
</li>
</ul>
<p>如果需要估價可以參考<a href="https://cloud.google.com/products/calculator/" target="_blank" rel="external">online pricing calculator</a></p>
<h2 id="GCP-Serivce"><a href="#GCP-Serivce" class="headerlink" title="GCP Serivce"></a>GCP Serivce</h2><p>目前有以下服務：</p>
<p><img src="gcp_service.png" alt="gcp_service"></p>
<p>而因為服務的定位不同從IaaS到PaaS都有包含，如應用程式就可以分為三種：</p>
<p><img src="Iaas_Paas.png" alt="Iaas_Paas"></p>
<h1 id="Apply-Free-Trial-Account"><a href="#Apply-Free-Trial-Account" class="headerlink" title="Apply Free Trial Account"></a>Apply Free Trial Account</h1><p>目前Google有提供申請<a href="https://cloud.google.com/free/" target="_blank" rel="external">Google Cloud Platform Free Tier</a>帳戶，該帳戶在未來的12個月都可以享有300美金的試用，這對於要做POC或是小型專案的轉移應該非常足夠了．</p>
<p><img src="free_trail.png" alt="free_trail"></p>
<p>而在試用階段會對每個服務有限制的使用，對於限制細節可以參考<a href="https://cloud.google.com/free/docs/frequently-asked-questions" target="_blank" rel="external">View details</a></p>
<p>而如果你還有經銷商的Partner Credit，則可以上<a href="https://cloud.google.com/partners/partnercredit/" target="_blank" rel="external">Google Platform Partner Credit</a>貼寫申請．這邊送出後會有人工審核，審核完才會提供redem code．</p>
<h1 id="Google-Cloud-Platform-Project"><a href="#Google-Cloud-Platform-Project" class="headerlink" title="Google Cloud Platform Project"></a>Google Cloud Platform Project</h1><p>所有的GCP services are associated with a project that is used to:</p>
<ul>
<li>追蹤資源(resource)與配額(quota)usage</li>
<li>啟用帳單扣款(Enablebilling)</li>
<li>管理 權限(permissions)與授權(credentials)</li>
<li>啟用 services 與 APIs</li>
</ul>
<p>Projects 有三種識別屬性(identifying attributes):</p>
<ul>
<li>Project Name</li>
<li>Project Number</li>
<li>Project ID(有些地方會稱為Application ID)</li>
</ul>
<p>開好專案後我們再回到<a href="https://console.cloud.google.com/" target="_blank" rel="external">首頁</a>可以從Dashboard這邊看到我們帳戶相關的資料：</p>
<p><img src="project_overview.png" alt="project_overview"></p>
<p>這邊與AWS不同的是，GCP以專案作為分類，所以對於專案內使用到的Serivce與目前金額都可以在這邊一次總覽．</p>
<h2 id="Cloud-Shell-Cloud-Help-and-Cloud-Notification"><a href="#Cloud-Shell-Cloud-Help-and-Cloud-Notification" class="headerlink" title="Cloud Shell, Cloud Help, and Cloud Notification"></a>Cloud Shell, Cloud Help, and Cloud Notification</h2><p>在首頁上方的工具列可以看到下面三個功能：</p>
<h3 id="Cloud-Shell"><a href="#Cloud-Shell" class="headerlink" title="Cloud Shell"></a>Cloud Shell</h3><p>是一個預設安裝的工具，我們可以透過它做服務的建立或是專案的環境建置設定等等，如果想了解更多可以參考<a href="https://cloud.google.com/shell/docs/" target="_blank" rel="external">Learn More</a></p>
<p><img src="shell.png" alt="shell"></p>
<p>除了Cloud Shell外，還有兩種工具可以幫我們建置服務環境 - Cloud SDK 與 RESTful APIs</p>
<p><img src="interacting_gcd.png" alt="interacting_gcd"></p>
<h3 id="Cloud-Help"><a href="#Cloud-Help" class="headerlink" title="Cloud Help"></a>Cloud Help</h3><p>這邊我們可以針對任何GCP的服務或內容進行查詢，對於新技術也可以在這邊做了解．</p>
<p><img src="help.png" alt="help"></p>
<h3 id="Cloud-Notification-and-Activity"><a href="#Cloud-Notification-and-Activity" class="headerlink" title="Cloud Notification and Activity"></a>Cloud Notification and Activity</h3><p>這邊會顯示你的服務異動內容，可以作為稽核的延伸使用．</p>
<p><img src="notification.png" alt="notification"></p>
<h2 id="Cloud-IAM-and-Project-Role"><a href="#Cloud-IAM-and-Project-Role" class="headerlink" title="Cloud IAM and Project Role"></a>Cloud IAM and Project Role</h2><p>Cloud IAM 包含 Identity 與 Access Management相關設定</p>
<p><img src="project_role.png" alt="project_role"></p>
<p>針對 Cloud IAM 有兩種角色類型:</p>
<ul>
<li>Primitive roles: The roles historically available in the Google Cloud Platform Console. These are the Owner, Editor, and Viewer roles.</li>
<li>Curated roles: Curated roles are the new IAM roles that give finer-grained access control than the primitive roles (discussed in the next section).</li>
</ul>
<p>被授權的團隊成員可以有三種存取權限 :</p>
<ul>
<li>“can View” allows read-only access.</li>
<li>“can Edit” allows modify and delete access. This allows a developer to<br>deploy the application and modify or configure its resources.</li>
<li>“is Owner” allows full administrative access. This includes the ability to<br>add members and set the authorization level of team members.</li>
</ul>
<p><img src="iam_role_account.png" alt="iam_role_account"></p>
<p>Cloud IAM的帳號可包含：</p>
<ul>
<li>Google Account(xxx@gmail.com)</li>
<li>Service Account(xxx@project_id.iam.gserviceaccount.com)</li>
<li>Google Group(xxx@googlegroup.com)</li>
<li>Google App Domain(xxx@example.com)</li>
</ul>
<p>而整個階層可以如下做管理：</p>
<p><img src="resource.png" alt="resource"></p>
<h3 id="IAM-Accounts"><a href="#IAM-Accounts" class="headerlink" title="IAM - Accounts"></a>IAM - Accounts</h3><p><img src="IAM_overview.png" alt="IAM_overview"></p>
<p>而當我們新增帳戶的時候就可以指定你要給予的服務權限有哪些</p>
<p><img src="IAM_add_member.png" alt="IAM_add_member"></p>
<h3 id="IAM-Service-Accounts"><a href="#IAM-Service-Accounts" class="headerlink" title="IAM - Service Accounts"></a>IAM - Service Accounts</h3><ul>
<li>JSON Key</li>
<li>P12 Key</li>
</ul>
<p>建議使用JSON Key．專案內的Default Account建議不要刪除，因為刪除後如果需要還原需將專案下所有資源移除，這動作會相當於重開一個新專案…所以以下這句話很重要(所以要講三次)：</p>
<p>建議大家先不要將Default Account移除<br>建議大家先不要將Default Account移除<br>建議大家先不要將Default Account移除</p>
<h1 id="Google-Cloud-SDK"><a href="#Google-Cloud-SDK" class="headerlink" title="Google Cloud SDK"></a>Google Cloud SDK</h1><p><a href="https://cloud.google.com/sdk/" target="_blank" rel="external">Google Cloud SDK</a>是一個官方推出的Command-line工具．</p>
<p>除了該工具，我們也可使用 Docker image，也可透過 Cloud Shell直接執行指令來建置</p>
<h2 id="Download-and-Documents"><a href="#Download-and-Documents" class="headerlink" title="Download and Documents"></a>Download and Documents</h2><ul>
<li><a href="https://cloud.google.com/sdk/docs/quickstart-windows" target="_blank" rel="external">Windows</a></li>
<li><a href="https://cloud.google.com/sdk/docs/quickstart-mac-os-x" target="_blank" rel="external">macOS</a></li>
<li><a href="https://cloud.google.com/sdk/docs/quickstart-linux" target="_blank" rel="external">Linux</a></li>
</ul>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>首先須將python更新至2.7版以上，然後依序執行下面指令</p>
<pre><code>curl https://sdk.cloud.google.com | bash
</code></pre><p>重啟shell或是透過下面指令直接重啟</p>
<pre><code>exec -l $SHELL
</code></pre><p>接著我們初始化sdk，這個步驟會將登入資料跟設定記憶在該電腦環境中</p>
<pre><code>gcloud init
</code></pre><h2 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h2><p>登入 <a href="http://console.cloud.google.com" target="_blank" rel="external">Google Cloud Platform console</a> 並建立一個新專案：</p>
<h2 id="Using-Cloud-Launcher-and-Google-Compute-Engine-for-ASP-NET-NET-4-5-2"><a href="#Using-Cloud-Launcher-and-Google-Compute-Engine-for-ASP-NET-NET-4-5-2" class="headerlink" title="Using Cloud Launcher and Google Compute Engine for ASP.NET (.NET 4.5.2)"></a>Using Cloud Launcher and Google Compute Engine for ASP.NET (.NET 4.5.2)</h2><p>接著我們透過<a href="https://console.cloud.google.com/launcher/details/click-to-deploy-images/aspnet?q=asp.net&amp;project=gcddemo-164215" target="_blank" rel="external">Cloud Launcher 幫我們建立一個ASP.NET專案</a>，我們只需設定建置的region與規格，而他所建立的細節內容如下</p>
<table>
<thead>
<tr>
<th>Title</th>
<th>Spec Detail</th>
</tr>
</thead>
<tbody>
<tr>
<td>Runs on</td>
<td>Google Compute Engine</td>
</tr>
<tr>
<td>Type</td>
<td>Single VM</td>
</tr>
<tr>
<td>Version</td>
<td>Windows Server (2012 or 2008) R2, IIS, SQL Express, and ASP.NET</td>
</tr>
<tr>
<td>Last updated</td>
<td>3/17/17, 4:55 AM</td>
</tr>
<tr>
<td>Category</td>
<td>Developer stacks</td>
</tr>
<tr>
<td>Operating system</td>
<td>Windows Server 2016</td>
</tr>
<tr>
<td>Package contents</td>
<td>Microsoft .NET Framework 4.5.2 and SQL Server Express 2016 SP1</td>
</tr>
</tbody>
</table>
<p>等他環境deploy完成後會給你一個遠端連結與<a href="http://104.197.170.128/" target="_blank" rel="external">網站連結</a>：</p>
<p><img src="aspnet_452.png" alt="aspnet_452"></p>
<h1 id="Trainnig-Resource"><a href="#Trainnig-Resource" class="headerlink" title="Trainnig Resource"></a>Trainnig Resource</h1><h2 id="GCP-Online-Class"><a href="#GCP-Online-Class" class="headerlink" title="GCP Online Class"></a>GCP Online Class</h2><p><a href="https://myclass.gcptrain.org/" target="_blank" rel="external">Google Cloud Platform - Training Materials Access</a>，有提供GCP相關的教學文件下載</p>
<p>目前已經有的課程：</p>
<ul>
<li>CP100A : Google Cloud Platform Fundamentals<br>  class code : gpiclk</li>
<li>CPD200: Developing Solutions for Google Cloud Platform</li>
<li>CPO200: Google Cloud Platform for Systems Operations Professionals</li>
<li>CPB100: Google Cloud Platform Big Data &amp; Machine learning Fundamentals</li>
<li>CPB101: Serverless Data Analysis with BigQuery and Cloud DataFlow</li>
<li>CPB102: Machine Learning with Cloud ML</li>
<li>CPB200: BigQuery for Data Analysts</li>
<li>Data Engineering on Google Cloud Platform</li>
</ul>
<p>如果還有其他class code 麻煩跟我分享一下！</p>
<h2 id="GCPUG-TW"><a href="#GCPUG-TW" class="headerlink" title="GCPUG.TW"></a>GCPUG.TW</h2><p><a href="http://gcpug.tw/" target="_blank" rel="external">GCPUG.TW</a>, GCPUP是從日本開始發起的社群，而台灣社群在幾位早期至官方受訓後的前輩建立，主要希望能夠跟開發者們與雲端服務使用者分享GCP上的好用服務．目前每個月第一個禮拜都會有meetup，有時會在google 台灣辦公室主辦，有興趣進去台灣Google參觀的人不訪報名參加他們活動摟．</p>
<h1 id="補充-APIs-Explorer-and-OAuth-Playground"><a href="#補充-APIs-Explorer-and-OAuth-Playground" class="headerlink" title="[補充]  APIs Explorer and OAuth Playground"></a>[補充]  APIs Explorer and OAuth Playground</h1><p><a href="https://developers.google.com/apis-explorer/" target="_blank" rel="external">APIs Explorer</a>是一個可以讓你透過瀏覽器嘗試Google APIs的一個工具．</p>
<p><a href="https://developers.google.com/oauthplayground/" target="_blank" rel="external">OAuth Playground</a>可以讓我們來測試與Google API處理時OAuth驗證的過程．透過這工具我們就可以開發所有相關的API應用程式．</p>
<p><img src="oauth_playgroud.png" alt="oauth_playgroud"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://cloud.google.com/storage/docs/gsutil_install" target="_blank" rel="external">Install gsutil</a></li>
<li><a href="https://cloud.google.com/why-google/" target="_blank" rel="external">Why Google Cloud Platform?</a></li>
<li><a href="https://cloud.google.com/pricing/philosophy/" target="_blank" rel="external">Pricing philosophy</a></li>
<li><a href="https://www.google.com/about/datacenters/" target="_blank" rel="external">Data Centers</a></li>
<li><a href="http://cloud.google.com/products/" target="_blank" rel="external">Google Cloud Platform product overview</a></li>
<li><a href="http://cloud.google.com/solutions/" target="_blank" rel="external">Google Cloud Platform solutions</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Google Cloud Platform </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> GCP </tag>
            
            <tag> macOS </tag>
            
            <tag> Cloud </tag>
            
            <tag> GCE </tag>
            
            <tag> Google Compute Engine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Mongo Shell to Operating MongoDB Instance on Docker]]></title>
      <url>https://blackie1019.github.io/2017/04/12/Using-Mongo-Shell-to-Operating-MongoDB-Instance-on-Docker/</url>
      <content type="html"><![CDATA[<p>介紹如何使用Mongo Shell操作執行在Docker內的MongoDB Instance</p>
<a id="more"></a>
<h1 id="Connect-and-Execute-into-Docker-Instance"><a href="#Connect-and-Execute-into-Docker-Instance" class="headerlink" title="Connect and Execute into Docker Instance"></a>Connect and Execute into Docker Instance</h1><p>當我們使用Docker來建立我們的MongoDB時我們可以透過直接連線至Docker執行中的Instance內進行操作．</p>
<p>首先我們可以先查看一下目前運行的Container有哪些:</p>
<pre><code>docker ps
</code></pre><p>接著我們可以透過下面指令連至Instance內:</p>
<pre><code>docker exec -ti &lt;container id&gt; bash
</code></pre><p><img src="docker_exec.png" alt="docker_exec"></p>
<h1 id="Mongo-Shell"><a href="#Mongo-Shell" class="headerlink" title="Mongo Shell"></a>Mongo Shell</h1><p>我們可以透過mongo這個指令直接進入mongo shell當中</p>
<pre><code>mongo
</code></pre><p><img src="mongodb_shell.png" alt="mongodb_shell"></p>
<p>當我們看到版本資訊與歡迎文字後即可開始輸入我們要的指令, 完整的指令可以參考<a href="https://docs.mongodb.com/manual/reference/method/" target="_blank" rel="external">mongo Shell Methods</a>．</p>
<h2 id="Use-Database"><a href="#Use-Database" class="headerlink" title="Use Database"></a>Use Database</h2><p>當我們需要建立一個新的Database時我們需要用use這個指令</p>
<pre><code>use &lt;database&gt;
</code></pre><p>接著我們可以用db這個指令列出目前的database</p>
<pre><code>db
</code></pre><p><img src="mongodb_shell.png" alt="mongodb_shell"></p>
<p>而當我們需要切換database時也可用use這個指令</p>
<h2 id="Create-Collection"><a href="#Create-Collection" class="headerlink" title="Create Collection"></a>Create Collection</h2><p>接著我們新增一個collection</p>
<pre><code>db.createCollection(&quot;member&quot;)
</code></pre><p><img src="mongodb_shell_create_collection.png" alt="mongodb_shell_create_collection"></p>
<p>這邊的第二個參數為選擇性加入，細節參考<a href="https://docs.mongodb.com/manual/reference/method/db.createCollection/" target="_blank" rel="external">db.createCollection()</a></p>
<h2 id="Create-Document"><a href="#Create-Document" class="headerlink" title="Create Document"></a>Create Document</h2><p>接著我們可以透過下面指令新增一筆檔案進入指定的collection內</p>
<pre><code>db.member.insertOne( { name: &quot;blackie&quot; } );
</code></pre><p><img src="mongodb_shell_create_document.png" alt="mongodb_shell_create_document"></p>
<h2 id="Create-User"><a href="#Create-User" class="headerlink" title="Create User"></a>Create User</h2><p>我們可以透過下面指令建立一個擁有dbOwner權限的帳號</p>
<pre><code>db.createUser(
{
    user: &quot;dbdemo&quot;,
    pwd: &quot;pass.123&quot;,
    roles: [ { role: &quot;dbOwner&quot;, db: &quot;demo&quot; } ]
}
)
</code></pre><p><img src="mongo_shell_create_dbOwner.png" alt="mongo_shell_create_dbOwner"></p>
<p>由於dbOwner這個role是預設建立(built-in)的角色，包括了readWrite, dbAdmin 與 userAdmin這三個角色的權限．對於role這邊可以參考<a href="https://docs.mongodb.com/manual/reference/built-in-roles/" target="_blank" rel="external">Built-In Roles</a>瞭解更多預設角色．</p>
<p>我們也可以透過以下指令建立一個新的user並只綁定readWrite與dbAdmin兩個角色</p>
<pre><code>db.createUser(
    {
        user: &quot;dbAdmin&quot;,
        pwd: &quot;pass.123&quot;,
        roles: [ { role: &quot;readWrite&quot;, db: &quot;demo&quot; },
                { role: &quot;dbAdmin&quot;, db: &quot;demo&quot;} ]
    }
)
</code></pre><p><img src="mongodb_shell_user.png" alt="mongodb_shell_user"></p>
<p>細節參考<a href="https://docs.mongodb.com/manual/reference/method/js-user-management/" target="_blank" rel="external">User Management Methods</a></p>
<h2 id="Using-User-login-Auth"><a href="#Using-User-login-Auth" class="headerlink" title="Using User login(Auth)"></a>Using User login(Auth)</h2><p>當我們新增user給指定database後我們就可以使用該user登入，而在登入前我們可以使用下面指令測試登入：</p>
<pre><code>db.auth(&quot;user name&quot;,&quot;password&quot;)
</code></pre><p><img src="mongo_shell_auth.png" alt="mongo_shell_auth"></p>
<p>而登我們下次登入時則可使用-u, -p 與–authenticationDatabase參數，用該user做登入：</p>
<p>mongo –port 27017 -u “user name” -p “password” –authenticationDatabase “demo”</p>
<p><img src="mongo_shell_login_auth.png" alt="mongo_shell_login_auth"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.mongodb.com/manual/mongo/#introduction" target="_blank" rel="external">MONGODB MANUAL : mongo Shell</a></li>
<li><a href="https://www.tutorialspoint.com/mongodb/" target="_blank" rel="external">MongoDB Tutorial</a></li>
<li><a href="https://docs.mongodb.com/manual/reference/mongo-shell/" target="_blank" rel="external">MONGODB MANUAL : mongo Shell Quick Reference</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with MongoDB and MongoDB .NET Driver - Read]]></title>
      <url>https://blackie1019.github.io/2017/04/11/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Read/</url>
      <content type="html"><![CDATA[<p>針對MongoDB的Read(Find)進行介紹並應用MongoDB .NET Driver實作資料查詢功能</p>
<a id="more"></a>
<h1 id="MongoDB-Find"><a href="#MongoDB-Find" class="headerlink" title="MongoDB Find"></a>MongoDB Find</h1><p><img src="crud-annotated-mongodb-find.png" alt="crud-annotated-mongodb-find"></p>
<p>在MongoDB中查詢指令主要是透過一個主體與三個參數組成：</p>
<ul>
<li><p>collection</p>
<p>  欲查詢的collection主體</p>
</li>
<li><p>query criteria</p>
<p>  查詢物件的指定條件</p>
</li>
<li><p>query projection</p>
<p>  查詢結果呈現的每筆所必須顯示之欄位</p>
</li>
<li><p>cursor modifier</p>
<p>  給予查詢的資料筆數限制</p>
</li>
</ul>
<h1 id="MongoDB-NET-Driver-Find-Related-Function"><a href="#MongoDB-NET-Driver-Find-Related-Function" class="headerlink" title="MongoDB .NET Driver Find Related Function"></a>MongoDB .NET Driver Find Related Function</h1><p>當我們想要查詢全部資料可簡單的透過下面程式找出：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IList&lt;Member&gt; <span class="title">Get</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.Find(<span class="keyword">new</span> BsonDocument()).ToList();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而當我們需要找出指定單筆資料時則可透過指定的查詢找出第一筆符合的物件：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.Find(filter).FirstOrDefault();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果查詢的欄位為複雜的內容(單一屬性又為另一BSON格式的子集)，則可透過下面的方式查詢：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"address.zipcode"</span>, <span class="string">"100"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.Find(filter).FirstOrDefault();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Query-Behavior-Sorting"><a href="#Query-Behavior-Sorting" class="headerlink" title="Query Behavior - Sorting"></a>Query Behavior - Sorting</h2><p>當我們要透過特定排序呈現回傳:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IList&lt;Member&gt; <span class="title">Get</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> sort = Builders&lt;Member&gt;.Sort.Ascending(<span class="string">"name"</span>).Ascending(<span class="string">"balance"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.Find(<span class="keyword">new</span> BsonDocument()).Sort(sort).ToList();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="RMDB-Script-compare-with-MongoDB-Script"><a href="#RMDB-Script-compare-with-MongoDB-Script" class="headerlink" title="RMDB Script compare with MongoDB Script"></a>RMDB Script compare with MongoDB Script</h1><p>這邊找到網路上大大製作的一個ＭySQL與MongoDB查詢指令的對比圖：</p>
<p><img src="MongoDB-part3-MySQL-to-MongoDB-mapping.jpg" alt="MongoDB-part3-MySQL-to-MongoDB-mapping"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="http://bicortex.com/page/12/" target="_blank" rel="external">Introduction To MongoDB NoSQL Database For SQL Developers – Part 3</a></li>
<li><a href="https://docs.mongodb.com/v3.0/core/read-operations-introduction/" target="_blank" rel="external">MONGODB MANUAL : Read Operations Overview</a></li>
<li><a href="https://docs.mongodb.com/getting-started/csharp/query/" target="_blank" rel="external">MONGODB MANUAL : Find or Query Data with C# Driver</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MongoDB .NET Driver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with MongoDB and MongoDB .NET Driver - Update]]></title>
      <url>https://blackie1019.github.io/2017/04/10/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Update/</url>
      <content type="html"><![CDATA[<p>紀錄與整理MongoDB .NET Driver相關資料Update相關函式的差異與各別使用時機</p>
<a id="more"></a>
<p>先前一篇<a href="https://blackie1019.github.io/2017/04/08/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Create-Delete/">ASP.NET Core play with MongoDB and MongoDB .NET Driver - Create and Delete</a> 分享了如何做資料的新增與刪除，此篇文章我們來看一下如何做資料的更新</p>
<h1 id="MongoDB-Update"><a href="#MongoDB-Update" class="headerlink" title="MongoDB Update"></a>MongoDB Update</h1><p><img src="crud-annotated-mongodb-update.png" alt="crud-annotated-mongodb-update"></p>
<p>在MongoDB中更新指令主要是透過一個主體與三個參數組成：</p>
<ul>
<li><p>collection</p>
<p>  欲更新的collection主體</p>
</li>
<li><p>update criteria</p>
<p>  更新物件的指定條件</p>
</li>
<li><p>update action</p>
<p>  實際執行更新時所做的欄位替換</p>
</li>
<li><p>option</p>
<p>  執行更新交易時的相關選項</p>
</li>
</ul>
<p>這邊稍微注意一下預設的更新都是針對單一文件(single document)，如果需要針對多個文件做更新則需在option中設定為multi，即可透過criteria將符合條件的文件一併做更新．</p>
<h1 id="MongoDB-NET-Driver-Upldate-Related-Function"><a href="#MongoDB-NET-Driver-Upldate-Related-Function" class="headerlink" title="MongoDB .NET Driver Upldate Related Function"></a>MongoDB .NET Driver Upldate Related Function</h1><p>而在MongoDB .NET Driver則將更新動作細分三種，又根據Sync與Async交易處理上的差別分為不同的Method:</p>
<h2 id="UpdateOne-UpdateOneAsync-UpdateMany-UpdateManyAsync"><a href="#UpdateOne-UpdateOneAsync-UpdateMany-UpdateManyAsync" class="headerlink" title="UpdateOne/UpdateOneAsync, UpdateMany/UpdateManyAsync"></a>UpdateOne/UpdateOneAsync, UpdateMany/UpdateManyAsync</h2><p>使用時機為更新指定物件/符合條件的物件群，且不需回傳該物件．此類型method的回傳為UpdateResult只會告訴你符合criteria的物件筆數與更新的物件筆數．這裡查詢的criteria可以為任何一個欄位，不限定_id．</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> UpdateResult <span class="title">Update</span>(<span class="params">Member dataObject</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line">    <span class="keyword">var</span> update = Builders&lt;Member&gt;.Update.Set(s =&gt; s.Balance, dataObject.Balance);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.UpdateOne(filter, update);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Update-with-upsert-option"><a href="#Update-with-upsert-option" class="headerlink" title="Update with upsert option"></a>Update with upsert option</h3><p>MongoDB在呼叫Update時有一個特殊的參數upsert，透過這個參數如果該物更新物件已存在在資料庫時則做更新的動作，但如果尚未存在指定查詢的物件時則執行新增動作：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> UpdateResult <span class="title">Update</span>(<span class="params">Member dataObject</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line">    <span class="keyword">var</span> update = Builders&lt;Member&gt;.Update.Set(s =&gt; s.Balance, dataObject.Balance);</div><div class="line">    <span class="keyword">var</span> option = <span class="keyword">new</span> UpdateOptions()&#123;</div><div class="line">        IsUpsert = <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.UpdateOne(filter, update,option);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ReplaceOne-ReplaceOneAsync"><a href="#ReplaceOne-ReplaceOneAsync" class="headerlink" title="ReplaceOne/ReplaceOneAsync"></a>ReplaceOne/ReplaceOneAsync</h2><p>相對於UpdateOne/UpdateOneAsync, UpdateMany/UpdateManyAsync 更新的action可以任意指定，ReplaceOne/ReplaceOneAsync則會將符合條件的物件內容直接用新值取代：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ReplaceOneResult <span class="title">Update</span>(<span class="params">Member dataObject</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.ReplaceOne(input.Item1, dataObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="FindOneAndUpdate-FindOneAndUpdateAsync"><a href="#FindOneAndUpdate-FindOneAndUpdateAsync" class="headerlink" title="FindOneAndUpdate/FindOneAndUpdateAsync"></a>FindOneAndUpdate/FindOneAndUpdateAsync</h2><p>而當我們實務上會需要在更新前/後將符合更新條件的交易物件內容回傳時，則需使用FindOneAndUpdate/FindOneAndUpdateAsync：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Update</span>(<span class="params">Member dataObject</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line">    <span class="keyword">var</span> update = Builders&lt;Member&gt;.Update.Set(s =&gt; s.Balance, dataObject.Balance);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.FindOneAndUpdate(input.Item1, update);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>預設回傳更新前的物件內容，如果需要回傳更新後的內容則需設定option，將ReturnDocument 設為 ReturnDocument.After(預設為Before):</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">Update</span>(<span class="params">Member dataObject</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line">    <span class="keyword">var</span> update = Builders&lt;Member&gt;.Update.Set(s =&gt; s.Balance, dataObject.Balance);</div><div class="line">    <span class="keyword">var</span> option = <span class="keyword">new</span> FindOneAndUpdateOptions&lt;Member&gt;()</div><div class="line">    &#123;</div><div class="line">        ReturnDocument = ReturnDocument.After</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Collection.FindOneAndUpdate(input.Item1, update,option);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.mongodb.com/v3.0/core/write-operations-introduction/" target="_blank" rel="external">MONGODB MANUAL : Write Operations Overview</a></li>
<li><a href="https://docs.mongodb.com/manual/indexes/" target="_blank" rel="external">MONGODB MANUAL : Indexes</a></li>
<li><a href="https://docs.mongodb.com/v3.0/core/write-operations-atomicity/" target="_blank" rel="external">MONGODB MANUAL : Atomicity and Transactions</a></li>
<li><a href="https://docs.mongodb.com/getting-started/csharp/update/" target="_blank" rel="external">MONGODB MANUAL : Update Data with C# Driver</a></li>
<li><a href="http://stackoverflow.com/questions/30739596/mongodb-map-property-new-in-findandmodify-using-findoneandupdateoptions-class" target="_blank" rel="external">MongoDB Map Property ‘new’ in findAndModify using FindOneAndUpdateOptions class C# Driver</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MongoDB .NET Driver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code More Guide Lines Extension]]></title>
      <url>https://blackie1019.github.io/2017/04/09/Visual-Studio-Code-More-Guide-Lines-Extension/</url>
      <content type="html"><![CDATA[<p>使用Guides 讓VSCode快速幫你對齊程式區塊</p>
<a id="more"></a>
<p>常寫js的人應該對於以下的波動拳法不陌生：</p>
<p><img src="before.png" alt="before"></p>
<p>雖然已經有JavaScript Promise了，但難免還是會看到一堆階層排版的code．當然除了js外其他語言也有這樣的問題．</p>
<p>而<a href="https://marketplace.visualstudio.com/items?itemName=spywhere.guides" target="_blank" rel="external">Guides</a>這個VS Code Extension就是幫我們增加快速對齊的格線，讓我們清楚的知道區塊的範圍</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>開啟 VS Code 快捷開啟指令碼 (⌘+P),然後貼上下面的指令</p>
<pre><code>ext install guides
</code></pre><p>或是在Extension區塊查詢Guides點選安裝</p>
<p>安裝完後我們就可以看到原先的波動拳增加隔線了～</p>
<p><img src="after.png" alt="after"></p>
<p>雖然不能解決波動拳的問題，但至少眼睛壓力可以減少不少…</p>
<p>而除了js檔案外，其他檔案也是支援的</p>
<p><img src="other.png" alt="other"></p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with MongoDB and MongoDB .NET Driver - Create and Delete]]></title>
      <url>https://blackie1019.github.io/2017/04/08/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Create-Delete/</url>
      <content type="html"><![CDATA[<p>針對MongoDB的Create(Insert)與Delete(Remove)進行介紹並應用MongoDB .NET Driver實作</p>
<a id="more"></a>
<p>關於專案環境請先下面兩篇文章</p>
<ul>
<li><a href="https://blackie1019.github.io/2017/03/31/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver/">ASP.NET Core play with MongoDB and MongoDB .NET Driver</a></li>
<li><a href="https://blackie1019.github.io/2017/04/05/ASP-NET-Core-play-with-MSTest/">ASP.NET Core play with MSTest</a></li>
</ul>
<h1 id="MongoDB-Data-Model-Overview"><a href="#MongoDB-Data-Model-Overview" class="headerlink" title="MongoDB Data Model Overview"></a>MongoDB Data Model Overview</h1><p>首先先看一下MongoDB的資料架構</p>
<p><img src="mongo_data.png" alt="mongo_data"></p>
<h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p>MongoDB中的每一個 databases 可以保存多個 collections. 而我們也可以指派設定相同或不同的user給予database存取的權限作為管理．</p>
<h2 id="Collection-and-Documents"><a href="#Collection-and-Documents" class="headerlink" title="Collection and Documents"></a>Collection and Documents</h2><p>MongoDB 將每一個資料記錄透過 <a href="https://docs.mongodb.com/manual/core/document/#bson-document-format" target="_blank" rel="external">BSON</a> 的格式做文件(document)儲存在指定的collection中</p>
<h2 id="Compare-with-RMDB"><a href="#Compare-with-RMDB" class="headerlink" title="Compare with RMDB"></a>Compare with RMDB</h2><p>這邊我們對比一下關連式資料庫的觀念：</p>
<p><img src="RMDB_MongoDB.jpg" alt="RMDB_MongoDB"></p>
<h1 id="MongoDB-Write-Operation-Overview"><a href="#MongoDB-Write-Operation-Overview" class="headerlink" title="MongoDB Write Operation Overview"></a>MongoDB Write Operation Overview</h1><p>在MongoDB中, 針對單一文件(single document)的寫入操作(write operation) 是處於基元((atomic)的狀態．<br>而atomic可以視為一種保護機制，基本上來講，是防止在寫未完成的時候被另外一個程序(thread)讀取而造成數據錯誤。</p>
<p>寫入操作(write operation)包含:</p>
<ul>
<li>新增(Insert)</li>
<li>修改(Update)</li>
<li>刪除(Remove)</li>
</ul>
<h1 id="MongoDB-Insert"><a href="#MongoDB-Insert" class="headerlink" title="MongoDB Insert"></a>MongoDB Insert</h1><p><img src="crud-annotated-mongodb-insert.png" alt="crud-annotated-mongodb-insert"></p>
<p>MongoDB的<a href="https://docs.mongodb.com/v3.0/reference/method/db.collection.insert/#db.collection.insert" target="_blank" rel="external"> db.collection.insert() </a>那幫我們在指定collection中新增一份document．</p>
<p>新增資料到MongoDB中，每筆record都會自動產生一個_id的參數(文字格式)，這是系統產生的唯一值，是在做查詢與交易時最佳的遍尋值．而這個在MongoDB .NET Driver當中是特別指定欄位為ObjectId這個class．</p>
<h2 id="MongoDB-NET-Driver-Create-Insert-Related-Function"><a href="#MongoDB-NET-Driver-Create-Insert-Related-Function" class="headerlink" title="MongoDB .NET Driver Create(Insert) Related Function"></a>MongoDB .NET Driver Create(Insert) Related Function</h2><h3 id="Basic-Insert"><a href="#Basic-Insert" class="headerlink" title="Basic Insert"></a>Basic Insert</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params">Member dataObject</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>.Collection.InsertOne(dataObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="MongoDB-Remove"><a href="#MongoDB-Remove" class="headerlink" title="MongoDB Remove"></a>MongoDB Remove</h1><p><img src="crud-annotated-mongodb-remove.png" alt="crud-annotated-mongodb-remove"></p>
<p>這邊稍微注意一下，由於MongoDB針對Update與Delete提供一樣的條件參數(criteria或 conditions)與表態式(syntax)，如果有不懂的需要確認可以參考<a href="https://docs.mongodb.com/v3.0/core/read-operations/" target="_blank" rel="external">read operations</a></p>
<p>而預設MongoDB的<a href="https://docs.mongodb.com/v3.0/reference/method/db.collection.remove/#db.collection.remove" target="_blank" rel="external"> db.collection.remove() </a>行為則是移除所有符合條件的資料紀錄．</p>
<h2 id="MongoDB-NET-Driver-Delete-Remove-Related-Function"><a href="#MongoDB-NET-Driver-Delete-Remove-Related-Function" class="headerlink" title="MongoDB .NET Driver Delete(Remove) Related Function"></a>MongoDB .NET Driver Delete(Remove) Related Function</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> DeleteResult <span class="title">Delete</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> filter = <span class="keyword">this</span>.GenerateFilterInput(id);</div><div class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.Collection.DeleteOne(filter);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> FilterDefinition&lt;Member&gt; <span class="title">GenerateFilterInput</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> Builders&lt;Member&gt;.Filter.Eq(<span class="string">"_id"</span>, ObjectId.Parse(id));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="補充-Member-CS"><a href="#補充-Member-CS" class="headerlink" title="[補充] Member.CS"></a>[補充] Member.CS</h1><p>因為之後的新增, 查詢, 更新與刪除都會帶到這個class所以這邊在特別拿出來看一下</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> MongoDB.Bson;</div><div class="line"><span class="keyword">using</span> MongoDB.Bson.Serialization.Attributes;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">MongoCRUD.Core.Pocos</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Member</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> ObjectId Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        [BsonElement(<span class="string">"name"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        [BsonElement(<span class="string">"balance"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">decimal</span> Balance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="http://www.qappdesign.com/using-mongodb-with-net-core-webapi/" target="_blank" rel="external">Using MongoDB .NET Driver with .NET Core WebAPI</a></li>
<li><a href="https://www.google.com.tw/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjcqJfp7JfTAhUJGJQKHdbYBb8QjhwIBQ&amp;url=https%3A%2F%2Fwww.codeproject.com%2FArticles%2F1037052%2FIntroduction-to-MongoDB&amp;psig=AFQjCNFjUm5qx4lQ0eya3w1jDO6PPmWgHA&amp;ust=1491843046801296" target="_blank" rel="external">Introduction to MongoDB - CodeProject</a></li>
<li><a href="https://www.slideshare.net/mongodb/webinar-back-to-basics-thinking-in-documents" target="_blank" rel="external">Webinar: Back to Basics: Thinking in Documents</a></li>
<li><a href="https://docs.mongodb.com/manual/core/databases-and-collections/" target="_blank" rel="external">MONGODB MANUAL : Databases and Collections</a></li>
<li><a href="https://docs.mongodb.com/v3.0/core/write-operations-introduction/" target="_blank" rel="external">MONGODB MANUAL : Write Operations Overview</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MongoDB .NET Driver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MSTest Skip Test Case]]></title>
      <url>https://blackie1019.github.io/2017/04/07/MS-Test-Skip-Test-Case/</url>
      <content type="html"><![CDATA[<p>如何在MSTest 中跳過特定測試案例</p>
<a id="more"></a>
<p>因為最近在開發ASP.NET Core的時候還是還找不到IDE支援UI點選執行特定測試案例或透過dotnet CLI來幫忙執行單一案例，目前都做法還是透過dotnet test的預設指令跑過所有測試，但難免有部分開發還沒完成或是想要跳過特定測試的情境，而此時我們就可以透過[IgnoreAttribute]來協助我們</p>
<p>一般來說，當我們執行dotnet test跑起我們的測試時，我們可以看到的輸出結果應該如下：</p>
<p><img src="general.png" alt="general"></p>
<p>這邊會有四個計數器：</p>
<ul>
<li>Total tests</li>
<li>Passed</li>
<li>Failed</li>
<li>Skipped</li>
</ul>
<p>而當我們在測試案例外層掛上[IgnoreAttribute]即可快速的skip掉特定的測試案例:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[IgnoreAttribute]</div><div class="line">[TestMethod]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MemberRepository_Delete</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> id = <span class="string">"r2"</span>;</div><div class="line">    <span class="keyword">var</span> data = MemberRepository.Instance.Delete(id);</div><div class="line"></div><div class="line">    Assert.IsNotNull(data);</div><div class="line">    Assert.AreEqual(data.DeletedCount,<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而再次執行dotnet test結果如下：</p>
<p><img src="skip.png" alt="skip"></p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> MSTest </tag>
            
            <tag> Unit Testing </tag>
            
            <tag> Automation Testing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSV to Markdown Table Generator]]></title>
      <url>https://blackie1019.github.io/2017/04/06/CSV-to-Markdown-Table-Generator/</url>
      <content type="html"><![CDATA[<p>介紹一個CSV轉Markdown Table的工具與函式庫</p>
<a id="more"></a>
<p>因為寫作上需要，常常會有要撰寫Markdown Table的需求，這邊分享一下最近找到的一個函式庫 - <a href="https://github.com/donatj/CsvToMarkdownTable" target="_blank" rel="external">CSV To Markdown Table</a></p>
<h1 id="General-Using"><a href="#General-Using" class="headerlink" title="General Using"></a>General Using</h1><p>原先都是使用<a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">Markdown Tables Generator</a>幫我產出Table後在一筆筆的放入資料，而今天介紹的<a href="https://github.com/donatj/CsvToMarkdownTable" target="_blank" rel="external">CSV To Markdown Table</a>則是可以幫我們直接將既有的CSV資料直接匯出markdown table格式，簡化我們的人工編輯時間．</p>
<p>從<a href="https://donatstudios.com/CsvToMarkdownTable" target="_blank" rel="external">Live Demo</a> 可以簡單地看到我們可以將CSV貼入網站後轉出對應的markdown語法後我們就可以貼入文章內做使用．</p>
<p><img src="intro.png" alt="intro"></p>
<h1 id="Source-Code-and-Library-Reference"><a href="#Source-Code-and-Library-Reference" class="headerlink" title="Source Code and Library Reference"></a>Source Code and Library Reference</h1><p>這個函式庫的使用很簡單，只需要載入後使用下面這一行呼叫即可以轉出我們要的markdown語法結果</p>
<p>而我們進一步地看他的原始碼(.js),其實就是幫我們把語法做parsing後進行分割處理</p>
<pre><code>&quot;use strict&quot;;

/**
* Converts CSV to Markdown Table
*
* @param {string} csvContent - The string content of the CSV
* @param {string} delimiter - The character(s) to use as the CSV column delimiter
* @param {boolean} hasHeader - Whether to use the first row of Data as headers
* @returns {string}
*/
function csvToMarkdown( csvContent, delimiter, hasHeader ) {
    if( delimiter != &quot;\t&quot; ) {
        csvContent = csvContent.replace(/\t/g, &quot;    &quot;);
    }
    var columns = csvContent.split(&quot;\n&quot;);

    var tabularData = [];
    var maxRowLen = [];

    columns.forEach(function( e, i ) {
        if( typeof tabularData[i] == &quot;undefined&quot; ) {
            tabularData[i] = [];
        }

        var row = e.split(delimiter);

        row.forEach(function( ee, ii ) {
            if( typeof maxRowLen[ii] == &quot;undefined&quot; ) {
                maxRowLen[ii] = 0;
            }

            maxRowLen[ii] = Math.max(maxRowLen[ii], ee.length);
            tabularData[i][ii] = ee;
        });
    });

    var headerOutput = &quot;&quot;;
    var seperatorOutput = &quot;&quot;;

    maxRowLen.forEach(function( len ) {
        var spacer;
        spacer = Array(len + 1 + 2).join(&quot;-&quot;);
        seperatorOutput += &quot;|&quot; + spacer;

        spacer = Array(len + 1 + 2).join(&quot; &quot;);
        headerOutput += &quot;|&quot; + spacer;
    });

    headerOutput += &quot;| \n&quot;;
    seperatorOutput += &quot;| \n&quot;;

    if( hasHeader ) {
        headerOutput = &quot;&quot;;
    }

    var rowOutput = &quot;&quot;;
    var initHeader = true;
    tabularData.forEach(function( col ) {
        maxRowLen.forEach(function( len, y ) {
            var row = typeof col[y] == &quot;undefined&quot; ? &quot;&quot; : col[y];
            var spacing = Array((len - row.length) + 1).join(&quot; &quot;);

            if( hasHeader &amp;&amp; initHeader ) {
                headerOutput += &quot;| &quot; + row + spacing + &quot; &quot;;
            } else {
                rowOutput += &quot;| &quot; + row + spacing + &quot; &quot;;
            }
        });

        if( hasHeader &amp;&amp; initHeader ) {
            headerOutput += &quot;| \n&quot;;
        } else {
            rowOutput += &quot;| \n&quot;;
        }

        initHeader = false;
    });

    return headerOutput + seperatorOutput + rowOutput;
}

if(typeof module != &quot;undefined&quot;) {
    module.exports = csvToMarkdown;
}
</code></pre><p>這樣短小精幹的程式碼真是太棒了！有興趣的朋友請關注作者並給予肯定！</p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with MSTest]]></title>
      <url>https://blackie1019.github.io/2017/04/05/ASP-NET-Core-play-with-MSTest/</url>
      <content type="html"><![CDATA[<p>紀錄一下如何在ASP.NET Core上透過ＭS Test撰寫Unit Testing</p>
<a id="more"></a>
<p>在ASP.NET Core開發環境上預設支援兩種測試框架MSTest與Nunit Test，首先來看看如何使用MSTest如何撰寫測試</p>
<h1 id="MSTest"><a href="#MSTest" class="headerlink" title="MSTest"></a>MSTest</h1><p>MSTest 是微軟提出的測試框架也是ASP.NET與ASP.NET Core內建的測試框架(Test Framework)，在親生老爸的支援下跟IDE的整合度高，且在大多使用情境皆可應付．如果偏好使用Total Solution或是剛入門測試框架的新手，可以使用此框架嘗試看看如何撰寫測試案例來協助開發品質．</p>
<h1 id="First-Unit-Test-on-ASP-NET-Core-and-MSTest"><a href="#First-Unit-Test-on-ASP-NET-Core-and-MSTest" class="headerlink" title="First Unit Test on ASP.NET Core and MSTest"></a>First Unit Test on ASP.NET Core and MSTest</h1><p>而這邊就實作如何在ASP.NET Core 上添加 MSTest專案並執行測試</p>
<h2 id="Create-Source-Project"><a href="#Create-Source-Project" class="headerlink" title="Create Source Project"></a>Create Source Project</h2><p>這邊我們開好三個資料夾，分別如下：</p>
<ul>
<li><p>MongoCRUD.Core</p>
<p>  取用與操作MongoDB內資料的函式庫</p>
</li>
<li><p>MongoCRUD.Test</p>
<p>  測試MongoCRUD.Core功能的測試專案</p>
</li>
<li><p>MongoCRUD.API</p>
<p>  API服務應用程式，將寫好的MongoCRUD.Core載入並根據參數提供資料</p>
</li>
</ul>
<p>所以我們先建立Library類型專案給MongoCRUD.Core</p>
<pre><code>cd MongoCRUD.Core
dotnet new classlib
</code></pre><p>接者我們建立MSTest類型專案給MongoCRUD.Test</p>
<pre><code>cd MongoCRUD.Test
dotnet new mstest
</code></pre><p>接者我們建立Web API類型專案給MongoCRUD.API</p>
<pre><code>cd MongoCRUD.API
dotnet new webapi
</code></pre><p><img src="foler.png" alt="folder"></p>
<h2 id="Add-Library-Reference-for-Test-Project-and-API-Project"><a href="#Add-Library-Reference-for-Test-Project-and-API-Project" class="headerlink" title="Add Library Reference for Test Project and API Project"></a>Add Library Reference for Test Project and API Project</h2><p>接著我們要幫測試專案與API專案加入函式庫的參考以便呼叫寫好的功能，這邊以測試專案加入參考為例：</p>
<pre><code>cd MongoCRUD.Test
dotnet add reference ../MongoCRUD.Core/MongoCRUD.Core.csporj
</code></pre><p><img src="reference.png" alt="reference"></p>
<p>這邊是使用專案參考(好處是建置時會一起連同相依的函式專案一起重新建置)，所以只要將專案檔(.csporj)位置加入至欲參考的專案內即可</p>
<h2 id="Complete-Source-Function"><a href="#Complete-Source-Function" class="headerlink" title="Complete Source Function"></a>Complete Source Function</h2><p>而這邊我們簡單的撰寫一個MongoDB取用資料的功能，開發前記得先將專案與參考該函式庫的專案加入MongoDB.Driver的參考</p>
<pre><code>&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;

    &lt;PropertyGroup&gt;
        &lt;TargetFramework&gt;netcoreapp1.1&lt;/TargetFramework&gt;
    &lt;/PropertyGroup&gt;

    &lt;ItemGroup&gt;
        &lt;PackageReference Include=&quot;MongoDB.Driver&quot; version=&quot;2.4.3&quot; /&gt;
    &lt;/ItemGroup&gt;

&lt;/Project&gt;
</code></pre><p>並執行dotnet restore將必要函式庫載入</p>
<pre><code>dotnet restore
</code></pre><h3 id="Member-cs"><a href="#Member-cs" class="headerlink" title="Member.cs"></a>Member.cs</h3><pre><code>using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;

namespace MongoCRUD.Core.Pocos
{
    public class Member
    {
        public ObjectId Id { get; set; }
        [BsonElement(&quot;name&quot;)]
        public string Name { get; set; }
        [BsonElement(&quot;balance&quot;)]
        public decimal Balance { get; set; }
    }
}
</code></pre><h3 id="MemberService-cs"><a href="#MemberService-cs" class="headerlink" title="MemberService.cs"></a>MemberService.cs</h3><pre><code>using System;
using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Driver;

using MongoCRUD.Core.Pocos;

namespace MongoCRUD.Core
{
    public sealed class MemberService
    {
        private static readonly Lazy&lt;MemberService&gt; lazy = new Lazy&lt;MemberService&gt;(() =&gt; new MemberService());

        public static MemberService Instance { get { return lazy.Value; } }

        private MongoCredential Credential {get;set;}

        private MongoClientSettings ClientSettings{get;set;}

        private MongoClient Client {get;set;}

        private IMongoDatabase Database {get;set;}

        private MemberService()
        {
            this.Credential = MongoCredential.CreateCredential(&lt;instance name&gt;, &lt;user account&gt;,&lt;password&gt;);
            this.ClientSettings  = new MongoClientSettings
            {
                Credentials = new[] { this.Credential },
                Server = new MongoServerAddress(&lt;domain&gt;, &lt;port&gt;)
            };
            this.Client = new MongoClient(this.ClientSettings);
            this.Database = this.Client.GetDatabase(&lt;database name&gt;);
        }

        public List&lt;Member&gt; GetMember()
        {
            var collection = this.Database.GetCollection&lt;Member&gt;(&lt;collection name&gt;);
            return collection.Find(new BsonDocument()).ToList();
        }
    }
}
</code></pre><p>這邊服務的部分是用Singleton的方式重複使用同一個連線實體，實務上這一個實體應該從外面傳入給建構子(constructor)才可以增加重複使用性與增加效能．</p>
<h2 id="Complete-Test-Case-and-Execute-it"><a href="#Complete-Test-Case-and-Execute-it" class="headerlink" title="Complete Test Case and Execute it"></a>Complete Test Case and Execute it</h2><p>而當我們要執行剛剛所撰寫好的測試案例，則須先切換至對應的專案下執行下面指令</p>
<pre><code>dotnet test
</code></pre><p><img src="execute_test.png" alt="execute_test"></p>
<p>這邊可以看到跑出來的測試結果是否通過或是失敗，這邊我們刻意寫一個失敗的測試案例(將Assert.IsTrue(data.Count&lt;0);):</p>
<p><img src="execute_test_failed.png" alt="execute_test_failed"></p>
<p>結果顯示我們的測試有一個失敗的案例</p>
<h1 id="MSTest-and-Nunit-Test"><a href="#MSTest-and-Nunit-Test" class="headerlink" title="MSTest and Nunit Test"></a>MSTest and Nunit Test</h1><p>先總結個人的喜好，MSTest雖然是比較陽春且微軟特有的測試框架，但絕對足夠做日常的測試開發．但如果要強調跨語言/環境的測試與負責的測試驗證，或許Nunit Test目前還是首選．</p>
<p>對於其他比較跟功能可以參考附錄其他網路大大幫忙整理的心得，以下節錄兩者使用的Attribue與Assert表幫助大家快速了解，參考來源：</p>
<ul>
<li><a href="http://xunit.github.io/docs/comparisons.html" target="_blank" rel="external">Comparing xUnit.net to other frameworks</a></li>
<li><a href="http://xunit.github.io/docs/comparisons.html" target="_blank" rel="external">MSTest,NUnit 3,xUnit.net 2.0 比較</a></li>
</ul>
<h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><table>
<thead>
<tr>
<th>MSTest (v1)</th>
<th>NUnit 3</th>
<th>xUnit.net 2.x</th>
<th>Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td>[AssemblyCleanup]</td>
<td>n/a</td>
<td>n/a</td>
<td>識別方法，該方法包含組件中的所有測試都執行完畢後，為釋放此組件所佔用資源而要使用的程式碼。</td>
</tr>
<tr>
<td>[AssemblyInitialize]</td>
<td>n/a</td>
<td>n/a</td>
<td>識別方法，該方法所包含的程式碼用於已執行組件中的所有測試之前，以便配置此組件所佔用的資源。</td>
</tr>
<tr>
<td>[ClassCleanup]</td>
<td>[OneTimeTearDown]</td>
<td>IClassFixture<t></t></td>
<td>指定測試執行後的結束方法，一個測試 class 只執行一次</td>
</tr>
<tr>
<td>[ClassInitialize]</td>
<td>[OneTimeSetUp]</td>
<td>IClassFixture<t></t></td>
<td>指定測試執行前的起始方法，一個測試 class 只執行一次</td>
</tr>
<tr>
<td>[CssIteration]</td>
<td>Repeat</td>
<td></td>
<td>表示這個測試所對應的專案反覆項目。</td>
</tr>
<tr>
<td>[CssProjectStructure]</td>
<td>n/a</td>
<td>n/a</td>
<td>表示這個測試所對應到之 Team 專案階層架構中的節點。</td>
</tr>
<tr>
<td>[DataSource]</td>
<td>[Theory]</td>
<td>[Theory]<br>[xxxData]”</td>
<td>data-driven test</td>
</tr>
<tr>
<td>[DeploymentItem]</td>
<td>n/a</td>
<td>n/a</td>
<td>指定應該在執行測試之前的組件一起部署的檔案或目錄。附加這個屬性對測試類別和測試方法。您可以使用多個執行個體。</td>
</tr>
<tr>
<td>[Description]</td>
<td>[Description]</td>
<td>n/a</td>
<td>用來指定測試的說明。</td>
</tr>
<tr>
<td>[ExpectedException]</td>
<td>Throws.TypeOf<exception>()</exception></td>
<td>Assert.Throws<br>Record.Exception”</td>
<td>測試的對象出現 exception Nunit 3 與 xUnit.net 都是直接從 code 處理掉，是比較方便直覺的</td>
</tr>
<tr>
<td>[ExpectedExceptionBase]</td>
<td>n/a</td>
<td>n/a</td>
<td>這是屬性的基底類別，這些屬性指定單元測試應擲回預期的例外狀況。</td>
</tr>
<tr>
<td>[HostType]</td>
<td>platform 有包含相關功該</td>
<td>n/a</td>
<td>指定將執行相關聯單元測試的主機的類型。</td>
</tr>
<tr>
<td>[Ignore]</td>
<td>[Ignore]</td>
<td>[Fact(Skip=”reason”)]</td>
<td>用來標示忽略該測試</td>
</tr>
<tr>
<td>[Owner]</td>
<td>[Author]</td>
<td>n/a</td>
<td>用來指定負責維護、執行和/或偵錯測試的人員。</td>
</tr>
<tr>
<td>[Priority]</td>
<td>[Order]</td>
<td>n/a</td>
<td>用來指定單元測試的優先權。</td>
</tr>
<tr>
<td>[TestCategory]</td>
<td>[Category]</td>
<td>n/a</td>
<td>用來指定單元測試分類別的類別。</td>
</tr>
<tr>
<td>[TestCategoryBase]</td>
<td>n/a</td>
<td>n/a</td>
<td>提供分類屬性的基底類別。</td>
</tr>
<tr>
<td>[TestClass]</td>
<td>[TestFixture]</td>
<td>n/a</td>
<td>將 class 標示測試 class. 特別的是 xUnit.net 不需要加上這樣的 attibute 會自動去搜尋所有 public class 中的測試方法，但這樣一來也代表著速度會受到影響;</td>
</tr>
<tr>
<td>[TestClassExtension]</td>
<td>n/a</td>
<td>n/a</td>
<td>啟動類別，以便將其辨認為單元測試延伸模組類別。</td>
</tr>
<tr>
<td>[TestCleanup]</td>
<td>[TearDown]</td>
<td>IDisposable.Dispose</td>
<td>指定測試執行後的方法，常用來清除測試產生的資料，每個測試皆會執行一次</td>
</tr>
<tr>
<td>[TestInitialize]</td>
<td>[SetUp]</td>
<td>Constructor</td>
<td>指定測試執行前的起始方法，常用來設定測試用的初始值，每個測試皆會執行一次</td>
</tr>
<tr>
<td>[TestMethod]</td>
<td>[Test]</td>
<td>[Fact]</td>
<td>標記為測試方法</td>
</tr>
<tr>
<td>[TestProperty]</td>
<td>[Property]</td>
<td>[Trait]</td>
<td>用來指定共用的測試屬性</td>
</tr>
<tr>
<td>[Timeout]</td>
<td>[Timeout]</td>
<td>n/a</td>
<td>用來指定單元測試的逾時期間。</td>
</tr>
<tr>
<td>[WorkItem]</td>
<td>n/a</td>
<td>n/a</td>
<td>用來指定與測試相關聯的工作項目。</td>
</tr>
<tr>
<td>n/a</td>
<td>[TestFixtureSource]</td>
<td>ICollectionFixture<t></t></td>
<td>用來與其他測試共用物件</td>
</tr>
<tr>
<td>n/a</td>
<td>[Apartment]</td>
<td>n/a</td>
<td>可以使用在組件、class、method，用來指定測試執行的模式-STA(Single-threaded apartment)/MTA(Multi-threaded apartment)</td>
</tr>
<tr>
<td>n/a</td>
<td>[Combinatorial]</td>
<td>n/a</td>
<td>給定參數集合，會自動產生所有參數組合的測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[Culture]</td>
<td>n/a</td>
<td>說明測試應該使用的語系，不會直接修改語系</td>
</tr>
<tr>
<td>n/a</td>
<td>[Datapoint]</td>
<td>n/a</td>
<td>為 theory 方法提供測試資料</td>
</tr>
<tr>
<td>n/a</td>
<td>[DatapointSource]</td>
<td>n/a</td>
<td>為 theory 方法提供測試資料，資料為集合或是陣列(ienumerable)</td>
</tr>
<tr>
<td>n/a</td>
<td>[Explicit]</td>
<td>n/a</td>
<td>如果沒有特別選定執行，預設為不執行</td>
</tr>
<tr>
<td>n/a</td>
<td>[LevelOfParallelism]</td>
<td>n/a</td>
<td>平行測試的 thread 數，組件層級的 attribute，預設值是 cpu 核心數或是2(看哪個比較大)</td>
</tr>
<tr>
<td>n/a</td>
<td>[Maxtime]</td>
<td>n/a</td>
<td>指定測試最大可以執行時間(單位：毫秒)，超出時間即為失敗，仍會執行結束</td>
</tr>
<tr>
<td>n/a</td>
<td>[Pairwise]</td>
<td>n/a</td>
<td>會產生所有參數的兩兩對應測試組合;combinatorial 適用於兩組參數,PairwiseAttribute 則適用於兩組以上</td>
</tr>
<tr>
<td>n/a</td>
<td>[Parallelizable]</td>
<td>n/a</td>
<td>用來標示哪些測試要平行執行(會影響下層),可以指定影響範圍 (None-不使用平行執行;Self-自己與其他測試使用平行執行;Choldren-所屬下層測試使用平行測試;Fixture-使用平行測試);ParallelScope.Self 是預設值;並未實作於 method 這層(ParallelizableAttribute 套用在 method 上會被忽略);ParallelScope.Children 與 ParallelScope.Fixtures 功能相同</td>
</tr>
<tr>
<td>n/a</td>
<td>[Platform]</td>
<td>n/a</td>
<td>用來指定測試的平台，詳細清單可以參考 <a href="https://github.com/nunit/docs/wiki/Platform-Attribute" target="_blank" rel="external">https://github.com/nunit/docs/wiki/Platform-Attribute</a></td>
</tr>
<tr>
<td>n/a</td>
<td>[Random]</td>
<td>n/a</td>
<td>產生隨機參數來測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[Range]</td>
<td>n/a</td>
<td>將範圍內所有可能參數代入測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[RequiresThread]</td>
<td>n/a</td>
<td>以獨立的 thread 來執行測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[Retry]</td>
<td>n/a</td>
<td>失敗重試</td>
</tr>
<tr>
<td>n/a</td>
<td>[Sequential]</td>
<td>n/a</td>
<td>將參數組合依序執行，而不是對所有組合執行 e.g. [a,b,c]*[1,2,3] –&gt; a-1,b-2,c-3</td>
</tr>
<tr>
<td>n/a</td>
<td>[SetCulture]</td>
<td>n/a</td>
<td>指定語言</td>
</tr>
<tr>
<td>n/a</td>
<td>[SetUICulture]</td>
<td>n/a</td>
<td>指定 UI 顯示語言</td>
</tr>
<tr>
<td>n/a</td>
<td>[SetUpFixture]</td>
<td>n/a</td>
<td>讓 class 在同一個 namespace 中有一次性的統一起始(setup)或是結束(teardown)行為</td>
</tr>
<tr>
<td>n/a</td>
<td>[SingleThreaded]</td>
<td>n/a</td>
<td>用來將 class 中的測試方法在同個 thread 中執行，Nunit 3.6 才加入</td>
</tr>
<tr>
<td>n/a</td>
<td>[TestCase]</td>
<td>n/a</td>
<td>給定測試案例參數來進行測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[TestCaseSource]</td>
<td>n/a</td>
<td>先定義測試案例參數，然後將參數指定給 method 來測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[TestOf]</td>
<td>n/a</td>
<td>用來標示是哪個 class 的測試</td>
</tr>
<tr>
<td>n/a</td>
<td>[Values]</td>
<td>n/a</td>
<td>為測試方法指定參數-用在描述 method 的參數</td>
</tr>
<tr>
<td>n/a</td>
<td>[ValueSource]</td>
<td>n/a</td>
<td>先定義參數資料，再指定給 method 來進行測試，可以給自訂型別 - 用在描述 method 的參數</td>
</tr>
</tbody>
</table>
<h2 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h2><table>
<thead>
<tr>
<th>MSTest (v1)</th>
<th>NUnit 3</th>
<th>xUnit.net 2.x</th>
</tr>
</thead>
<tbody>
<tr>
<td>AreEqual</td>
<td>AreEqual</td>
<td>Equal</td>
</tr>
<tr>
<td>AreNotEqual</td>
<td>AreNotEqual</td>
<td>NotEqual</td>
</tr>
<tr>
<td>AreNotSame</td>
<td>AreNotSame</td>
<td>NotSame</td>
</tr>
<tr>
<td>AreSame</td>
<td>AreSame</td>
<td>Same</td>
</tr>
<tr>
<td>Equals</td>
<td>n/a</td>
<td>Equals</td>
</tr>
<tr>
<td>Fail</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>Inconclusive</td>
<td>Inconclusive</td>
<td>n/a</td>
</tr>
<tr>
<td>IsFalse</td>
<td>False</td>
<td>False</td>
</tr>
<tr>
<td>IsInstanceOfType</td>
<td>IsInstanceOf</td>
<td>IsType</td>
</tr>
<tr>
<td>IsNotInstanceOfType</td>
<td>IsNotInstanceOf</td>
<td>IsNotType</td>
</tr>
<tr>
<td>IsNotNull</td>
<td>NotNull</td>
<td>NotNull</td>
</tr>
<tr>
<td>IsNull</td>
<td>Null</td>
<td>Null</td>
</tr>
<tr>
<td>IsTrue</td>
<td>True</td>
<td>True</td>
</tr>
<tr>
<td>ReplaceNullChars</td>
<td>n/a</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Catch</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>CatchAsync</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Contains</td>
<td>Contains</td>
</tr>
<tr>
<td>n/a</td>
<td>DoesNotThrow</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>DoesNotThrowAsync</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Fail</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Greater</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>GreaterOrEqual</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Ignore</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>IsAssignableFrom</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>IsEmpty</td>
<td>Empty</td>
</tr>
<tr>
<td>n/a</td>
<td>IsNaN</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>IsNotAssignableFrom</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>IsNotEmpty</td>
<td>NotEmpty</td>
</tr>
<tr>
<td>n/a</td>
<td>Less</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>LessOrEqual</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Pass</td>
<td>n/a</td>
</tr>
<tr>
<td>n/a</td>
<td>Throws</td>
<td>Throws</td>
</tr>
<tr>
<td>n/a</td>
<td>ThrowsAsync</td>
<td>ThrowsAsync</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>All</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>Collection</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>DoesNotContain</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>DoesNotMatch</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>EndsWith</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>InRange</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>IsAssignableFrom</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>Matches</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>NotInRange</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>NotStrictEqual</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>ProperSubset</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>ProperSuperset</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>PropertyChanged</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>ReferenceEquals</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>Single</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>StartsWith</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>StrictEqual</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>Subset</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>Superset</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>ThrowsAny</td>
</tr>
<tr>
<td>n/a</td>
<td>n/a</td>
<td>ThrowsAnyAsync</td>
</tr>
</tbody>
</table>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/articles/core/testing/unit-testing-with-mstest" target="_blank" rel="external">Unit testing with MSTest and .NET Core</a></li>
<li><a href="http://www.cnblogs.com/ColdJokeLife/p/3158812.html" target="_blank" rel="external">对比MSTest与NUnit Test框架</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> MSTest </tag>
            
            <tag> Unit Testing </tag>
            
            <tag> Automation Testing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio Code Icons Extension]]></title>
      <url>https://blackie1019.github.io/2017/04/04/Visual-Studio-Code-Icons-Extension/</url>
      <content type="html"><![CDATA[<p>使用vscode-icons 讓VSCode變得更一目瞭然</p>
<a id="more"></a>
<p>分享在VSCode上面不錯用的Extension - <a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a>．它可以快速的幫我們將資料夾與檔案的副黨格式顯示出對應的icon圖示，讓我們可以在VSCode上面一路瞭然的知道目前現在操作的是哪一份格式的檔案．</p>
<p>在還沒安裝套件前我們的VSCode針對目錄與檔案的呈現是下面這樣的：</p>
<p><img src="before.png" alt="before"></p>
<p>而當我們安裝完套件後並選定icon主題後(這邊以VSCode Icons為例)如下：</p>
<p><img src="after.png" alt="after"></p>
<p>我們可以看到左邊的每個資料夾與檔案都有了圖示對應他的副檔名，而實際上這個也會出現在文件編輯時的tab上面讓我們更加清楚目前所在處．</p>
<p>而使用該套件要稍微注意一下，套件下載安裝完後預設的theme是none（這邊跟disable的效果會是一樣的)，所以我們要手動更新到一個指定的theme</p>
<p><img src="cmd.png" alt="cmd"></p>
<p>而預設只有三種，如果還有其他需要也可以再從Extension Market上面下載後載入使用</p>
<p><img src="theme.png" alt="theme"></p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Singleton Pattern Implementation in C#]]></title>
      <url>https://blackie1019.github.io/2017/04/03/Singleton-Pattern-Implementation-In-CSharp/</url>
      <content type="html"><![CDATA[<p>紀錄C# Singleton Pattern實作的相關資料</p>
<a id="more"></a>
<p>在程式開發上我們時常會用到Singleton這個Pattern來幫我們處理有哪些物件須不需要大量產生，特別它是在執行/操作的時候，只”需要”一個就夠，而某些情況甚至我們也”只能”有一個．</p>
<p><img src="singleton.jpeg" alt="singleton"></p>
<h1 id="Singleton-Pattern-Positive-and-Negative-Aspects"><a href="#Singleton-Pattern-Positive-and-Negative-Aspects" class="headerlink" title="Singleton Pattern Positive and Negative Aspects"></a>Singleton Pattern Positive and Negative Aspects</h1><h2 id="Positive"><a href="#Positive" class="headerlink" title="Positive"></a>Positive</h2><p>Singleton Pattern 除了可以有效的控管資源避免不必要的產生外，也可以有效的管理全域變數的處理與生命週期，這可以讓我們更有效率的使用．</p>
<h2 id="Negative"><a href="#Negative" class="headerlink" title="Negative"></a>Negative</h2><p>Singleton Pattern 會導致程式與Singleton的instance 產生隱含的耦合關係，會使得系統變得不易理解，最大的麻煩則是增加測試的難度（是增加，而非不可測）．</p>
<h1 id="C-Implement-Singleton-Pattern"><a href="#C-Implement-Singleton-Pattern" class="headerlink" title="C# Implement Singleton Pattern"></a>C# Implement Singleton Pattern</h1><p>這邊參考<a href="http://csharpindepth.com/Articles/General/Singleton.aspx" target="_blank" rel="external">C# in Depth:Implementing the Singleton Pattern in C#</a>此篇文章的建議，分成兩種情況：</p>
<h2 id="NET-Framework-4-0’s-Lazy"><a href="#NET-Framework-4-0’s-Lazy" class="headerlink" title=".NET Framework 4.0’s Lazy"></a>.NET Framework 4.0’s Lazy</h2><p>如果你的.NET Framework版本在4.0之上或是使用ASP.NET Core那則放膽使用<a href="https://msdn.microsoft.com/zh-tw/library/dd642331.aspx" target="_blank" rel="external">System.Lazy<t></t></a>:</p>
<pre><code>public sealed class Singleton
{
    private static readonly Lazy&lt;Singleton&gt; lazy =
        new Lazy&lt;Singleton&gt;(() =&gt; new Singleton());

    public static Singleton Instance { get { return lazy.Value; } }

    private Singleton()
    {
    }
}
</code></pre><h2 id="Under-NET-Framework-4-0"><a href="#Under-NET-Framework-4-0" class="headerlink" title="Under .NET Framework 4.0"></a>Under .NET Framework 4.0</h2><p>如果你的.NET Framework版本在4.0之下則可參考下面做法:</p>
<h3 id="Not-Quite-as-Lazy-But-Thread-safe-without-using-Locks"><a href="#Not-Quite-as-Lazy-But-Thread-safe-without-using-Locks" class="headerlink" title="Not Quite as Lazy, But Thread-safe without using Locks"></a>Not Quite as Lazy, But Thread-safe without using Locks</h3><pre><code>public sealed class Singleton
{
    private static readonly Singleton instance = new Singleton();

    // Explicit static constructor to tell C# compiler
    // not to mark type as beforefieldinit
    static Singleton()
    {
    }

    private Singleton()
    {
    }

    public static Singleton Instance
    {
        get
        {
            return instance;
        }
    }
}
</code></pre><h3 id="Fully-Lazy-Instantiation"><a href="#Fully-Lazy-Instantiation" class="headerlink" title="Fully Lazy Instantiation"></a>Fully Lazy Instantiation</h3><pre><code>public sealed class Singleton
{
    private Singleton()
    {
    }

    public static Singleton Instance { get { return Nested.instance; } }

    private class Nested
    {
        // Explicit static constructor to tell C# compiler
        // not to mark type as beforefieldinit
        static Nested()
        {
        }

        internal static readonly Singleton instance = new Singleton();
    }
}
</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="http://teddy-chen-tw.blogspot.tw/2013/08/singleton-pattern.html" target="_blank" rel="external">搞笑談軟功:重新整理Singleton Pattern</a></li>
<li><a href="https://dotblogs.com.tw/pin0513/2010/03/08/13931" target="_blank" rel="external">獨體模式(Singleton Pattern)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hls.js for Chrome Desktop]]></title>
      <url>https://blackie1019.github.io/2017/04/02/HLS-js-for-Chrome-Desktop/</url>
      <content type="html"><![CDATA[<p>記錄一下如何讓Chrome的Desktop透過hls.js來support HLS格式的影音串流播放</p>
<a id="more"></a>
<p>今天工作上遇到一個問題是必須解決Chrome Desktop支援HLS的問題，並確保在flash被Chrome淘汰的情況下也不會受影響．這邊想起之前看過的一個套件hls.js可以做到這件事情，就稍微紀錄一下相關資料</p>
<h1 id="HLS-Introduction"><a href="#HLS-Introduction" class="headerlink" title="HLS Introduction"></a>HLS Introduction</h1><p>HTTP Live Streaming（縮寫是HLS）是一個由蘋果公司提出的基於HTTP的流媒體網絡傳輸協議．</p>
<h2 id="HLS-Overview"><a href="#HLS-Overview" class="headerlink" title="HLS Overview"></a>HLS Overview</h2><p>HLS 的協定本身運作方式相當好懂，其實就是透過一個 .m3u8 副檔名作為串流的播放列表，然後裡面有多個 .ts 的檔案<br>你只要照著播放列表裡面給你的檔案順序播放就好了．</p>
<p><img src="hls.png" alt="hls"></p>
<p>而如果我們真的將影片做上述的處理則會如下面的示意圖：</p>
<p><img src="hls_real.png" alt="hls_real"></p>
<h2 id="HLS-Browser-Compatibility"><a href="#HLS-Browser-Compatibility" class="headerlink" title="HLS Browser Compatibility"></a>HLS Browser Compatibility</h2><p>由於為Apple所推出的技術，所以HLS在macOS與iOS得safari上面全面支援．但Chrome與Firefox則沒有原生(native)支援:</p>
<p><img src="compare.png" alt="compare"></p>
<p>但好在HLS的decode可以透過javascript來完成，所以就算browser本身不支援我們也可以透過js的套件來幫我們處理，這也是今天要介紹的主角<a href="https://github.com/video-dev/hls.js" target="_blank" rel="external">hls.js</a>來協助Chrome Desktop做到播放HLS串流的功能</p>
<h1 id="hls-js-Introduction"><a href="#hls-js-Introduction" class="headerlink" title="hls.js Introduction"></a>hls.js Introduction</h1><p><a href="https://github.com/video-dev/hls.js" target="_blank" rel="external">hls.js</a> 是一個使用ECMAScript6所撰寫並透過Babel轉換為ES5語法的js套件，本身沒有任何外部js套件與flash player的依賴．完全透過js來做到HLS串流格式的解析與播放，並且相容於多個不同的瀏覽器與平台(桌機/手機)．而他運作則逼需仰賴<a href="http://www.html5rocks.com/en/tutorials/video/basics/" target="_blank" rel="external">HTML5 video</a> 與 <a href="http://w3c.github.io/media-source/" target="_blank" rel="external">MediaSource Extensions(MSE)</a>．</p>
<p>目前有相容的瀏覽器支援MSE(video/mp4)輸入的清單如下：</p>
<ul>
<li>Chrome for Android 34+</li>
<li>Chrome for Desktop 34+</li>
<li>Firefox for Android 41+</li>
<li>Firefox for Desktop 42+</li>
<li>IE11+ for Windows 8.1+</li>
<li>Edge for Windows 10+</li>
<li>Opera for Desktop</li>
<li>Vivaldi for Desktop</li>
<li>Safari for Mac 8+ (beta)</li>
</ul>
<p>而HLS的支援則必須透過 CORS headers permitting GET 請求來傳遞.</p>
<h2 id="hls-js-Setup"><a href="#hls-js-Setup" class="headerlink" title="hls.js Setup"></a>hls.js Setup</h2><p>我們可以透過npm快速幫我們安裝</p>
<pre><code>npm install --save hls.js
</code></pre><p>接著我們到Chrome的setting裡面把Flash disable，確保HLS沒有透過任何的flash播放器來載入．</p>
<p>hls.js 的使用很簡單，在載入套件並產生一個新的Hls物件後，透過attachMedia功能附加回去DOM即可．</p>
<pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/hls.js/latest/hls.min.js&quot;&gt;&lt;/script&gt;
&lt;video id=&quot;video&quot;&gt;&lt;/video&gt;
&lt;script&gt;
if(Hls.isSupported()) {
    var video = document.getElementById(&apos;video&apos;);
    var hls = new Hls();
    hls.loadSource(&apos;http://www.streambox.fr/playlists/test_001/stream.m3u8&apos;);
    hls.attachMedia(video);
    hls.on(Hls.Events.MANIFEST_PARSED,function() {
    video.play();
});
}
&lt;/script&gt;
</code></pre><p>以上範例與Demo都直接來至於官網範例</p>
<p><a href="http://video-dev.github.io/hls.js/demo" target="_blank" rel="external">Demo Site</a></p>
<h2 id="補充-Chrome-Firefox-Integraion-Extension-Addon"><a href="#補充-Chrome-Firefox-Integraion-Extension-Addon" class="headerlink" title="[補充] Chrome/Firefox Integraion Extension/Addon"></a>[補充] Chrome/Firefox Integraion Extension/Addon</h2><p>如果今天只是單純的使用者，我們則可以直接下載兩個Extension/addon讓我們的Chrome/Firefox正常播放HLS：</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/native-hls-playback/emnphkkblegpebimobpbekeedfgemhof" target="_blank" rel="external">Chrome : Native HLS Playback</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/native_hls_playback/" target="_blank" rel="external">Firefox : Native HLS</a></li>
</ul>
<h2 id="補充-HLS-RTMP"><a href="#補充-HLS-RTMP" class="headerlink" title="[補充] HLS, RTMP"></a>[補充] HLS, RTMP</h2><p>HLS本身最方便的地方是它直接走在http/https上來實作，對於傳播在公開的網路來說是比較方便的</p>
<p>而RTMP則是必須透過Adobe的Flash來做解析，以目前的趨勢與結果來看這一塊會慢慢的從公開網路或是client中移除，但Server端的需求則還是會持續保留，主要原因則是因為他依舊保有Latency相對低且穩定的特性．</p>
<p>這邊可以舉一個自製串流播放的案例來看兩邊如何合作：</p>
<p><img src="aws.jpg" alt="aws"></p>
<p>上圖由RTMP持續作為Server端轉換影片至streaming 處理主機的 source，這邊則可透過不同的轉換方式將影片轉成合適在公開網路播放的串流格式，如HLS．</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.google.com.tw/url?sa=i&amp;rct=j&amp;q=&amp;esrc=s&amp;source=images&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjTh-_B3JLTAhWONpQKHSo2B8MQjB0IBg&amp;url=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fcontent%2Freferencelibrary%2FGettingStarted%2FAboutHTTPLiveStreaming%2Fabout%2Fabout.html&amp;psig=AFQjCNEcaUgmFeIOCOzNzy_1r9B8Bn6t8w&amp;ust=1491667259714187" target="_blank" rel="external">Apple: About HTTP Live Streaming</a></li>
<li><a href="http://streaminglearningcenter.com/articles/how-to-encode-video-for-hls-delivery.html" target="_blank" rel="external">How to Encode Video for HLS Delivery</a></li>
<li><a href="http://blog.techbridge.cc/2016/12/03/livestreamming-hls-note/" target="_blank" rel="external">直播協定 hls 筆記</a></li>
<li><a href="https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Live_streaming_web_audio_and_video" target="_blank" rel="external">MDN: Live streaming web audio and video</a></li>
<li><a href="http://www.samirchen.com/ios-rtmp-vs-hls/" target="_blank" rel="external">直播协议的选择：RTMP vs. HLS</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> HLS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome Dev Tools for CPU and Network Throtting]]></title>
      <url>https://blackie1019.github.io/2017/04/01/Chrome-Dev-Tools-for-CPU-and-Network-Throtting/</url>
      <content type="html"><![CDATA[<p>紀錄如何透過Chrome來調節CPU與Network模擬較差的環境</p>
<a id="more"></a>
<p>現代網頁開發裡面，針對較差的環境(Network比較慢)與硬體(CPU比較慢)來測試應用程式針的回應已經變成一個必然的事情。這次分享一下如何透過Chrome Dev Tools來幫我們達到這樣的模擬。</p>
<h1 id="Chrome-Dev-Tools"><a href="#Chrome-Dev-Tools" class="headerlink" title="Chrome Dev Tools"></a>Chrome Dev Tools</h1><p>我們可以在 Chrome &gt; More Tools &gt; Developer Tools (Ctrl+Shift+i)　即可打開Dev Tools ：</p>
<p>如果對整個工具想有更近一步的認識可以參考<a href="https://www.gitbook.com/book/leeon/devtools/details" target="_blank" rel="external">Chrome DevTools中文手册</a></p>
<h1 id="Chrome-Dev-Tools-Network-Tab"><a href="#Chrome-Dev-Tools-Network-Tab" class="headerlink" title="Chrome Dev Tools - Network Tab"></a>Chrome Dev Tools - Network Tab</h1><p>這邊我們可以透過Network這個tab來調整模擬不同的網路狀況(2G,3G,4G, Wifi等)</p>
<p><img src="network_ui.png" alt="network_ui"></p>
<h1 id="Chrome-Dev-Tools-Timeline-Tab"><a href="#Chrome-Dev-Tools-Timeline-Tab" class="headerlink" title="Chrome Dev Tools - Timeline Tab"></a>Chrome Dev Tools - Timeline Tab</h1><p>而剛剛提及的網路速度調節也可以從Timeline這邊調整</p>
<p><img src="network.png" alt="network"></p>
<p>另外，如果針對ＣＰＵ也可以在此做調節</p>
<p><img src="cpu.png" alt="cpu"></p>
<p>如果有任何異動，上面的設定會呈現紅色的icon表示這邊進入了調節的模式，如果應用程式有變慢是正常的</p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with MongoDB and MongoDB .NET Driver]]></title>
      <url>https://blackie1019.github.io/2017/03/31/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver/</url>
      <content type="html"><![CDATA[<p>記錄如何使用MongoDB .NET Driver 取用MongoDB內的資料</p>
<a id="more"></a>
<p>先前介紹了如何使用MongoDB的UI工具來管理裡面的data，今天就讓我們實際透過MongoDB .NET Driver來透過ASP.NET Core連接至MongoDB內的資料</p>
<h1 id="MongoDB-NET-Driver"><a href="#MongoDB-NET-Driver" class="headerlink" title="MongoDB .NET Driver"></a>MongoDB .NET Driver</h1><p><a href="https://github.com/mongodb/mongo-csharp-driver" target="_blank" rel="external">MongoDB .NET Driver</a>是一個讓我們可以連接至MongoDB Instance的組件，架構如下：</p>
<p><img src="mongodb.jpg" alt="mongodb"></p>
<p>它從V2.3.0 開始支援.NET Core的開發．</p>
<h2 id="Library-Reference"><a href="#Library-Reference" class="headerlink" title="Library Reference"></a>Library Reference</h2><p>MongoDB .NET Driver 的安裝可以手動加入project reference後還原或是透過NuGet幫我們添加完成</p>
<ul>
<li><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><p>  在專案加入以下Reference:</p>
<pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include=&quot;MongoDB.Driver&quot; version=&quot;2.4.3&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre></li>
<li><h3 id="NET-CLI"><a href="#NET-CLI" class="headerlink" title=".NET CLI"></a>.NET CLI</h3><p>  我們也可以透過CLI直接加入</p>
<pre><code>dotnet add package MongoDB.Driver
</code></pre></li>
</ul>
<p>這邊無論手動或自動皆需要執行還原指令將Library透過nuget作載入</p>
<pre><code>dotnet restore
</code></pre><h2 id="Setup-MongoClient"><a href="#Setup-MongoClient" class="headerlink" title="Setup MongoClient"></a>Setup MongoClient</h2><p>我們可以透過以下方式來建立連線(這邊連線沒有特別使用者帳密):</p>
<pre><code>// To directly connect to a single MongoDB server
// (this will not auto-discover the primary even if it&apos;s a member of a replica set)
var client = new MongoClient();

// or use a connection string
var client = new MongoClient(&quot;mongodb://localhost:27017&quot;);

// or, to connect to a replica set, with auto-discovery of the primary, supply a seed list of members
var client = new MongoClient(&quot;mongodb://localhost:27017,localhost:27018,localhost:27019&quot;);
</code></pre><p>稍微注意一下，對於相同資源的存取，通常都是重複使用同一個MongoClient，所以建議寫成singleton會比較方便使用與管理．</p>
<h2 id="Get-a-Database"><a href="#Get-a-Database" class="headerlink" title="Get a Database"></a>Get a Database</h2><p>而當我們設定好client後，就可以來指定要連線的Database(假設我們的database 名稱為foo):</p>
<pre><code>var database = client.GetDatabase(&quot;foo&quot;);
</code></pre><h2 id="Get-a-Collection"><a href="#Get-a-Collection" class="headerlink" title="Get a Collection"></a>Get a Collection</h2><p>而當設定好Database後，我們需要將要取得的collection都指定好(假設我們的collection 名稱為bar):</p>
<pre><code>var collection = database.GetCollection&lt;BsonDocument&gt;(&quot;bar&quot;);
</code></pre><p>上面的BsonDocument是指我們要使他回傳後處理接收的class為何．我們今天也可以客制一個class去繫結回傳的類型，如果我們希望回傳的類型為Member，則可以新增一個類別如下</p>
<pre><code>using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;

namespace NetCoreTest.POCOs
{
    public class Member
    {
        public ObjectId Id { get; set; }
        [BsonElement(&quot;mongo-attribute-name&quot;)]
        public string Name { get; set; }
    }
}
</code></pre><p>而collection這邊則稍微修改為：</p>
<pre><code>var collection = database.GetCollection&lt;Member&gt;(&quot;bar&quot;);
</code></pre><h2 id="Get-Collection-data"><a href="#Get-Collection-data" class="headerlink" title="Get Collection data"></a>Get Collection data</h2><p>而當我們設定好上述內容後，其實我們還沒有正式的建立連線，我們需要將要取得的collection都操作都指定好才會開始將剛剛的連線建立，所以如果上面有錯(如帳號密碼設錯)實際上會拋出錯誤在這一行：</p>
<pre><code>var list = collection.Find(new BsonDocument()).ToList();
</code></pre><h1 id="How-to-get-data-from-MongoLab"><a href="#How-to-get-data-from-MongoLab" class="headerlink" title="How to get data from MongoLab"></a>How to get data from MongoLab</h1><p>而先前示範的是沒有帳號密碼的MongoDB Instance如何連線，但實務上不可能資料庫連線沒有帳號密碼，所以我們就要改用MongoCredential來建立連線，這邊我們已Mongo Lab的連線來做實際範例(記得先至<a href="https://mlab.com/" target="_blank" rel="external">MongoLab</a>將你的database與collection以及user資料都將好，並新增一筆資料在collection內)，接著我們就可以透過下面的程式取得資料：</p>
<pre><code>var mongoCredential = MongoCredential.CreateCredential(&lt;database name&gt;, &lt;user account&gt;, &lt;password&gt;);

var mongoClientSettings = new MongoClientSettings {
    Credentials = new []{mongoCredential},
    Server = new MongoServerAddress(&lt;domain&gt;,&lt;port&gt;)
};

var client = new MongoClient(mongoClientSettings);
var database = client.GetDatabase(&lt;database name&gt;);
var collection = database.GetCollection&lt;Member&gt;(&quot;member&quot;);
var list = collection.Find(new BsonDocument()).ToList();
</code></pre><h1 id="補充說明-Mongo-and-NOSQL"><a href="#補充說明-Mongo-and-NOSQL" class="headerlink" title="[補充說明]Mongo and NOSQL"></a>[補充說明]Mongo and NOSQL</h1><p>MongoDB是 NoSQL(Not Only SQL)的一種，整個NoSQL主要可以分為四種不同用途</p>
<table>
<thead>
<tr>
<th>分類</th>
<th>產品實例</th>
<th>應用場景</th>
<th>數據模型</th>
<th>優點</th>
<th>缺點</th>
</tr>
</thead>
<tbody>
<tr>
<td>In-Memory</td>
<td>Redis, VoltDB</td>
<td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td>Key 指向 Value 的键值对，通常用hash table来实现</td>
<td>尋找速度快</td>
<td>數據無結構化</td>
</tr>
<tr>
<td>Document-Oriented</td>
<td>MongoDB, CouchDB</td>
<td>以獨立的文件檔案儲存</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语法。</td>
</tr>
<tr>
<td>Column Store</td>
<td>Cassandra, Apache HBase, Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>功能相对局限</td>
</tr>
<tr>
<td>Graph</td>
<td>Neo4J, OrientDB</td>
<td>社交网络，推荐系统等。专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody>
</table>
<p>而MongoDB本身是一種「文件」為主題的資料庫。他沒有Schema，存放的格式為BSON。</p>
<p>BSON（Binary JSON），其實就是JSON的輕量化版本，其中有些差異並非完全相同，不過BSON範圍包含JSON是沒錯的。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://www.behance.net/gallery/29417501/How-to-Work-MongoDB-Driver" target="_blank" rel="external">MongoDB driver</a></li>
<li><a href="http://www.admin10000.com/document/9313.html" target="_blank" rel="external">NoSQL数据库的四大分类及分析</a></li>
<li><a href="https://dzone.com/articles/4-types-nosql-database" target="_blank" rel="external">The 4 Types of NoSQL Database</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> MongoDB </tag>
            
            <tag> MongoDB .NET Driver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Robomongo, Native and cross-platform MongoDB manager]]></title>
      <url>https://blackie1019.github.io/2017/03/31/Robomongo-Native-and-cross-platform-MongoDB-manager/</url>
      <content type="html"><![CDATA[<p>介紹一個跨平台的MongoDB UI Admin 工具</p>
<a id="more"></a>
<p>用了MongoDB好一陣子，分享一下最近在用的MongoDB Admin Tool，來幫助大家快速地做資料管理</p>
<h1 id="Robomongo"><a href="#Robomongo" class="headerlink" title="Robomongo"></a>Robomongo</h1><p>Robomongo是一個免費開源的跨平台MongoDB Admin UI Tool，標榜取之於社群用之於社群的開源精神，就是要給你免錢的大平台!!!!</p>
<p>而他目前提供三個平台Windows, macOS 與 Linux。目前三個的使用率如下:</p>
<p><img src="cross_platform.png" alt="cross_platform"></p>
<p>目前推出的1.0RC會在正式版的時候support MongoDB 3.4。</p>
<h1 id="Work-with-MongoLab"><a href="#Work-with-MongoLab" class="headerlink" title="Work with MongoLab"></a>Work with MongoLab</h1><h2 id="MongoLab"><a href="#MongoLab" class="headerlink" title="MongoLab"></a>MongoLab</h2><p>以往學習 MongoDB，總是要大家先去網站下載檔案、解壓縮、設定、執行。這樣真的很浪費時間，如果是小型測試或是demo就可以用MongoLab來快速幫我們免費建置 MongoDB Server，大小是 512 MB，而從學習的角度來說已經相當足夠。如果是需要正式hosting也可以調高預算(看你想要的主機配備)。</p>
<p><img src="plan.png" alt="plan"></p>
<h1 id="Robomongo-Features"><a href="#Robomongo-Features" class="headerlink" title="Robomongo Features"></a>Robomongo Features</h1><p>這邊全覽一下實際的操作介面:</p>
<p><img src="ui.png" alt="ui"></p>
<p>我們也可以打開操作的log看每一個指令實際上的訊息</p>
<p><img src="log.png" alt="log"></p>
<h2 id="Robomongo-Connection-Setup-with-MongoLab"><a href="#Robomongo-Connection-Setup-with-MongoLab" class="headerlink" title="Robomongo Connection Setup with MongoLab"></a>Robomongo Connection Setup with MongoLab</h2><p>設定上這邊要稍微注意一下，MongoLab需要如果要從外面連過去建議另外開一個user 帳戶。</p>
<p><img src="detail.png" alt="detail"></p>
<p>接著我們將連線資訊填寫到Robomongo的連線管理中</p>
<p><img src="setup1.png" alt="setup1"></p>
<p>切換至authentication分頁填寫我們剛剛申請的user帳號與密碼，並將要連線的database名稱填入</p>
<p><img src="setup2.png" alt="setup2"></p>
<p>接著我們再透過設定好的連線連結至指定資料庫即可</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>-<a href="https://github.com/Studio3T/robomongo/issues/949" target="_blank" rel="external">‘Unable to authorize’ when connect to mongolab sandbox</a></p>
]]></content>
      
        <categories>
            
            <category> Database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core using Nuget with Visual Studio Code]]></title>
      <url>https://blackie1019.github.io/2017/03/30/ASP-NET-Core-using-Nuget-with-Visual-Studio-Code/</url>
      <content type="html"><![CDATA[<p>整理如何在ASP.NET Core與Visual Studio Code中使用Nuget套件</p>
<a id="more"></a>
<p>在.NET Core 一開始的設計中，最大的改變之一就是將套件管理的設定而外獨立成一個package.json檔案。而到了今年.NET Core 1.1.0中最大個改變就是將這個檔案又合併回去project檔案中，而這項改變讓原本在Visual Studio code上面支援NuGet套件的<a href="https://marketplace.visualstudio.com/items?itemName=ksubedi.net-core-project-manager" target="_blank" rel="external">.NET Core Project Manager</a>頓時失效了。而這次要介紹的就是另外一個套件來管理.NET Core 1.1+的 .csproj file中的組件相依性。</p>
<h1 id="NuGet-Introduction"><a href="#NuGet-Introduction" class="headerlink" title="NuGet Introduction"></a>NuGet Introduction</h1><p>在介紹套件前先稍微介紹一下NuGet的功用，NuGet是一個管理與簡化專案中各組件相依性的延伸套件，從Visual Studio 2010開始支援，後來因為太受歡迎官方就在Visual Studio 2012時正式將NuGet視為.NET的官方推薦的組件工具。</p>
<p>如果對NuGet還想了解更多建議可以到<a href="http://www.devopsschool.com/slides/nuget/" target="_blank" rel="external">這個網站</a></p>
<h1 id="Visual-Studio-Code-Extension-for-NuGet"><a href="#Visual-Studio-Code-Extension-for-NuGet" class="headerlink" title="Visual Studio Code Extension for NuGet"></a>Visual Studio Code Extension for NuGet</h1><p>由於Visual Studio Code本身只是一個編輯器的功能，不具備NuGet相關執行的能力，所以我們就需要透過<a href="https://marketplace.visualstudio.com/items?itemName=jmrog.vscode-nuget-package-manager" target="_blank" rel="external">NuGet Package Manager</a>這個套件，幫我們透過NuGet快速的新增/移除組件，新增組件的效果如下:<br><img src="add_package.gif" alt="add_package"></p>
<p>而當我們將套件加入後別忘記要使用下面指令restore組件至專案才可以使用</p>
<pre><code>dotnet restore
</code></pre><p>而移除組件也很簡單:</p>
<p><img src="remove_package.gif" alt="remove_package"></p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> VSCode </tag>
            
            <tag> Nuget </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core SPA Biobiolerplate with React and Redux]]></title>
      <url>https://blackie1019.github.io/2017/03/29/ASP-NET-Core-SPA-Biobiolerplate-with-React-and-Redux/</url>
      <content type="html"><![CDATA[<p>介紹一下React與Redux在.NET Core的框架</p>
<a id="more"></a>
<p>先前有介紹過<a href="https://blackie1019.github.io/2017/03/17/ASP-NET-Core-Playing-with-SPA/">如何幫ASP.NET Core加入Web Single Page Application的架構</a></p>
<p>這邊稍微再補充一下React&amp;Redux的開發環境。</p>
<h2 id="Project-Setup"><a href="#Project-Setup" class="headerlink" title="Project Setup"></a>Project Setup</h2><p>這邊我們透過先前的Microsoft.AspNetCore.SpaTemplates建立一個React與Redux的開發環境</p>
<pre><code>dotnet new reactredux
</code></pre><p>建立完成後一樣restore nuget套件</p>
<pre><code>dotnet restore
</code></pre><p>如果我們接著直接執行dotnet run 就會看到以下錯誤</p>
<p><img src="exception.png" alt="exception"></p>
<p>原因是因為NodeJS這邊找不到專案的必要套件，所以要先執行一次npm 的套件restore</p>
<pre><code>npm install
</code></pre><p>接著我們再執行dotnet run 後打開browser連至<a href="http://localhost:5000/" target="_blank" rel="external">http://localhost:5000/</a>就可以正常運作了</p>
<p><img src="preview.png" alt="preview"></p>
<h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><p>當我們執行完dotnet restore與npm install之後將專案套件都還原的目錄結構會如下:</p>
<p><img src="structure.png" alt="structure"></p>
<p>整體的結構就是.Net Core WebAPI作為骨幹，加入了TypeScript與React+Redux的開發環境與設定，並將Webpack, Gulp與bootstrap等預設，完成的一個基礎專案。</p>
<ul>
<li><a href="https://get.asp.net/" target="_blank" rel="external">ASP.NET Core</a> and <a href="https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx" target="_blank" rel="external">C#</a> for cross-platform server-side code</li>
<li><a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>, <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>, and <a href="http://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> for client-side code</li>
<li><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a> for building and bundling client-side resources</li>
<li><a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a> for layout and styling</li>
</ul>
<p>所以整個專案目錄除了.NET Core WebAPI架構外，會有另外一個ClientApp來幫我們放關於SPA這邊TypeScript與在Client的設定:</p>
<p><img src="clientapp.png" alt="clientapp"></p>
<p>而在WebAPI的部分與先前使用.Net Framework的WebAPI2差異不大，若對.NET Web MVC4/5 或是WebAPI 1/2結構有實務經驗應該可以馬上上手。</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Streaming Frame Capture by FFmpeg and NodeJS]]></title>
      <url>https://blackie1019.github.io/2017/03/28/Streaming-Frame-Capture-by-FFmpeg-and-NodeJS/</url>
      <content type="html"><![CDATA[<p>透過NodeJS與FFmpeg來擷取串流中的指定frame的圖片</p>
<a id="more"></a>
<p>工作上有遇到一個需求需要將串流做pre-loading(播放器尚未播放時的圖片）．剛好遇到公司強者同事 - <em>Ticore</em> 分享的NodeJS+FFmpeg自製的串流截圖技巧．而這樣的架構不只可以弄出一張圖片，當我們把圖片做連續截圖並指定播放到前端後(pub/sub)即可產生出另一種streming 轉檔輸出的效果, 讓原本HTML5不支援的串流格式(如RTMP)改為用圖片播放．</p>
<p><img src="creating_multiple_outputs1.png" alt="creating_multiple_outputs1"></p>
<h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><p>整體架構我們會使用到下面的套件並透過pub/sub的方式來讓client端的browser主動subscript圖片的變化呈現到瀏覽器上．</p>
<p><img src="HLD_Default.png" alt="HLD"></p>
<p>下面會針對必要套件做說明，而沒有說明到的套件則表示為該架構額外的引入套件，僅為開發/除錯使用</p>
<h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><p>這是我們作為串流擷取圖片的主要工具．<a href="https://ffmpeg.org/" target="_blank" rel="external">FFmpeg</a>是一個免費開源、功能強大的影音處理框架，可以執行音訊和視訊多種格式的的錄影、轉檔、串流功能，包含了libavcodec ─這是一個用於多個專案中音訊和視訊的解碼器函式庫，以及 libavformat ——一個音訊與視訊格式轉換函式庫．它可以使用在Linux, Mac OS X, Microsoft Windows, BSDs, Solaris等多種不同的作業系統和多種硬體架構上．</p>
<p>安裝好套件後，在終端機下輸入「ffmpeg」，就可以使用ffmpeg幫我們轉檔了</p>
<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><p>這邊我們會透過NodeJS來幫我們處理兩件事情：</p>
<ol>
<li>呼叫FFmpeg處理Streaming截圖的服務器，並將擷取的圖片存至記憶體內．並透過socket.io傳給client的browser做連續呈現</li>
<li>Host靜態頁面(index.html)並準備接收伺服器端socket.io推送過來的更新圖片</li>
</ol>
<h3 id="fluent-ffmpeg"><a href="#fluent-ffmpeg" class="headerlink" title="fluent-ffmpeg"></a>fluent-ffmpeg</h3><p><a href="https://github.com/fluent-ffmpeg/node-fluent-ffmpeg" target="_blank" rel="external">fluent-ffmpeg</a>是一個NodeJs的套件可以幫我們簡化FFmpeg複雜的指令，變成可閱讀的程式碼．透過鏈結的方式將我們想執行的邏輯串連起來，方便我們閱讀與維護．</p>
<h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><p><a href="https://socket.io/" target="_blank" rel="external">socket.io</a>是一個提供即時訊息溝通的套件，透過event-based的方式來達到主動的推播． </p>
<p><img src="socket_io.png" alt="socket_io"></p>
<h1 id="SourceCode"><a href="#SourceCode" class="headerlink" title="SourceCode"></a>SourceCode</h1><p>原始碼公開至<a href="https://github.com/blackie1019/streaming-snapshot" target="_blank" rel="external">streaming-snapshot</a></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="http://albert-oma.blogspot.com/2013/03/ffmpeg-source-code.html" target="_blank" rel="external">FFMPEG – Source Code 學習心得</a></li>
<li><a href="https://magiclen.org/ffmpeg/" target="_blank" rel="external">FFmpeg 免費開源、功能強大的影音處理框架</a></li>
<li><a href="https://trac.ffmpeg.org/wiki/Creating%20multiple%20outputs" target="_blank" rel="external">wiki:Creating multiple outputs</a></li>
<li><a href="http://blog.lightstreamer.com/2013/05/benchmarking-socketio-vs-lightstreamer.html" target="_blank" rel="external">Benchmarking Socket.IO vs. Lightstreamer with Node.js</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> socket.io </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> Streaming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.Net Core nuget can't restore on macOS]]></title>
      <url>https://blackie1019.github.io/2017/03/27/ASP-NET-Core-nuget-can-t-restore-on-macOS/</url>
      <content type="html"><![CDATA[<p>紀錄一下在macOS上遇到Nuget無法抓取還原的問題</p>
<a id="more"></a>
<p>之前在ASP.NET Core的開發都在Ｗindows環境，所以沒有遭遇Nuget還原或是dotnet cli有類似問題的情況．<br>今天在安裝.NET Core SPATemplate時發生錯誤，問題詳細的錯誤訊息如下：</p>
<p><img src="Nuget_Exception.png" alt="Nuget_Exception"></p>
<p>後來在爬了官方的討論後發現可能是安裝上面有少安裝套件或是必要更新．</p>
<p>後來比較了我在Windows與macOS上安裝的步驟後發現我應該是Http Proxy相關的設定有問題，接著回去官網再看一次macOS的安裝發現第一步pre-requisites就說明需要更新OpenSSL，一整個被我忽略掉．這邊紀錄一下安裝流程．</p>
<h2 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h2><p>官方第一個要我們做的OpenSSL更新是brew指令，預設macOS不認識這指令，這邊我們透過Homebrew來讓我們的CLI支援brew指令．</p>
<p><img src="Brew_not_found.png" alt="Brew_not_found"></p>
<p><a href="https://brew.sh/index_zh-tw.html" target="_blank" rel="external">HomeBrew</a>是安裝 Apple 沒有預裝但是你需要的東西(很大一部分是指開發的時候/環境)．</p>
<p>這邊我們貼上頁面提供的指令即可</p>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre><h2 id="NET-Core-pre-requisites-on-macOS-10-11-or-higher-64-bit"><a href="#NET-Core-pre-requisites-on-macOS-10-11-or-higher-64-bit" class="headerlink" title=".NET Core pre-requisites on macOS 10.11 or higher(64 bit)"></a>.NET Core pre-requisites on macOS 10.11 or higher(64 bit)</h2><p>當完成brew指令安裝，接著我們就要執行<a href="https://www.microsoft.com/net/core#macos" target="_blank" rel="external">.NET Core官網</a>要我們做的更新指令</p>
<pre><code>brew update
brew install openssl
mkdir -p /usr/local/lib
ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/
ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/
</code></pre><p>當更新做完且.NET Core SDK也安裝完了我們就再回去zsh執行我們的指令就正常了．這邊我們再重新安裝一次Microsoft.AspNetCore.SpaTemplates這個套件就可以看到nuget可以正常運作了．</p>
<p><img src="Full_List.png" alt="Full_List"></p>
<h2 id="zsh補充說明"><a href="#zsh補充說明" class="headerlink" title="zsh補充說明"></a>zsh補充說明</h2><p>這一次的zsh安裝發現如果是使用VSCode的zsh他會需要把字串用“”包起來．如下方指令：</p>
<pre><code>dotnet new --install Microsoft.AspNetCore.SpaTemplates::*
</code></pre><p>這是官網建議的執行指令，丟到zsh的terminal時不需要特別用””把後面的Microsoft.AspNetCore.SpaTemplates::*包起來也可以正常執行．</p>
<p>但，如果是使用VSCode的Terminal為zsh去執行，就會拋出Not Found的問題．需要將指令改為下面：</p>
<pre><code>dotnet new --install &quot;Microsoft.AspNetCore.SpaTemplates::*&quot;
</code></pre><p>這邊小問題在VSCode的github討論串也是有人提出，不知道是zsh有問題還是VSCode這邊不一致，這邊分享給遇到這樣問題的朋友來解決．</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Nuget </tag>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with Docker]]></title>
      <url>https://blackie1019.github.io/2017/03/26/ASP-NET-Core-Play-with-Docker/</url>
      <content type="html"><![CDATA[<p>紀錄一下如何透過Docker來Deploy .NET Core環境</p>
<a id="more"></a>
<p>Docker 充分地發揮.NET Core的跨環境的特色，讓我們不管在任何作業環境與雲端部署上都可以更加的方便與快速！這也是我被吸引往.NET Core的主因，今天紀錄一下如何在Dokcer啟用第一個.NET Core的Web應用程式．</p>
<h2 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h2><p>先至官網安裝Docker Community Edition環境．</p>
<ul>
<li><a href="https://store.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="external">Windows 10</a></li>
<li><a href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="external">macOS</a></li>
<li><a href="https://store.docker.com/editions/community/docker-ce-server-centos" target="_blank" rel="external">Linux</a></li>
<li><a href="https://store.docker.com/editions/community/docker-ce-server-ubuntu" target="_blank" rel="external">Ubuntu</a></li>
</ul>
<h2 id="Create-ASP-NET-Core-Project"><a href="#Create-ASP-NET-Core-Project" class="headerlink" title="Create ASP.NET Core Project"></a>Create ASP.NET Core Project</h2><p>這邊我們簡單的起一個.NET Core的MVC Web專案，</p>
<pre><code>mkdir DotnetMVC
cd DotnetMVC
dotnet new -t mvc
</code></pre><p>接著我們還原套件並將他運行起來後我們可以在<a href="http://localhost:5000." target="_blank" rel="external">http://localhost:5000</a>看到目前的首頁已經成功運行．</p>
<pre><code>dotnet restore
dotnet run
</code></pre><h2 id="Create-Dockerfile"><a href="#Create-Dockerfile" class="headerlink" title="Create Dockerfile"></a>Create Dockerfile</h2><p>這邊我們取用<a href="https://hub.docker.com/r/microsoft/dotnet/" target="_blank" rel="external">microsoft/dotnet</a>的映像檔，官方提供的映像檔有三種：</p>
<ul>
<li><p>microsoft/dotnet:<version>-sdk</version></p>
<p>  這版本會包含：</p>
<ul>
<li>.NET Core</li>
<li>.NET Core command line tools</li>
</ul>
</li>
<li><p>microsoft/dotnet:<version>-runtime</version></p>
<p>  針對實際環境用(包含runtime 與 libraries)做最佳化的映像檔</p>
</li>
</ul>
<p>接著我們在專案的根目錄建立新的Dockerfile(這邊需要注意，副檔名格式不要存成.txt或其他類型)</p>
<pre><code>touch Dockerfile
</code></pre><p>再將我們的下列設定貼入Dockerfile中</p>
<pre><code>FROM microsoft/dotnet:latest
COPY . /app
WORKDIR /app

RUN [&quot;dotnet&quot;, &quot;restore&quot;]
RUN [&quot;dotnet&quot;, &quot;build&quot;]

EXPOSE 5000/tcp
ENV ASPNETCORE_URLS http://*:5000

ENTRYPOINT [&quot;dotnet&quot;, &quot;run&quot;]
</code></pre><h2 id="Creating-the-Docker-image"><a href="#Creating-the-Docker-image" class="headerlink" title="Creating the Docker image"></a>Creating the Docker image</h2><p>接著輸入下面的指令（注意最後面有一個.不要忘記）去建立Docker image</p>
<pre><code>docker build -t test:aspnetcorehelloworld .
</code></pre><p>然後我們必將剛剛建立的image運行起來並將port指定為8888(這邊隨你喜好)</p>
<pre><code>docker run -d -p 8888:5000 -t test:aspnetcorehelloworld
</code></pre><p>運行起來後我們可以用docker ps這個指令查看一下運行中的container有哪些跟他們的唯一識別號碼</p>
<p>最後我們在前往 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8888</a>確認網站是否正常運行.</p>
<p>如果要關閉container的話就直接輸入docker stop container唯一識別號，如</p>
<pre><code>docker stop 235
</code></pre><p>這邊識別號只要輸入前面幾碼可以區分出是哪一個container即可．</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://stormpath.com/blog/tutorial-deploy-asp-net-core-on-linux-with-docker" target="_blank" rel="external">Tutorial: Deploy an ASP.NET Core Application on Linux with Docker</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Container </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visaul Studio Code Quick Add gitingore File]]></title>
      <url>https://blackie1019.github.io/2017/03/22/Visaul-Studio-Code-Quick-Add-gitingore-File/</url>
      <content type="html"><![CDATA[<p>使用git一定會使用到gitignore檔案來幫我們忽略一些檔案，不要加入版本控管。介紹如何使用VSCode的套件 - gitignore 快速新增gitignore</p>
<a id="more"></a>
<h2 id="gitignore-plugin-Introduction"><a href="#gitignore-plugin-Introduction" class="headerlink" title="gitignore plugin Introduction"></a>gitignore plugin Introduction</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore" target="_blank" rel="external">gitignore</a>這個套件是透過抓取<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a> repository取得各語言/framework/環境的gitignore設定來幫我們快速新增到目前專案中使用。</p>
<h2 id="How-to-Use"><a href="#How-to-Use" class="headerlink" title="How to Use"></a>How to Use</h2><p>使用方法很簡單，只要至View&gt;command palette (with Ctrl+Shift+P or F1) 輸入 Add gitignore 即可。</p>
<p>接者會有一個輸入框幫你filter你想要的gitignore格式，</p>
<p>這邊我們用一個NodeJS的專案來嘗試新增gitignore:</p>
<p><img src="example.gif" alt="example"></p>
<h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><p>這邊可以調整的設定只有一個，我們可以設定動態幫你去github做filter的查詢可用的gitignore格式做新增，而這個查詢結果會放在我們的cache裡面做使用。</p>
<p>我們可以設定cache更新的時間避免太頻繁或是太久沒更新</p>
<pre><code>{
    // Number of seconds the list of `.gitignore` files retrieved from github will be cached
    &quot;gitignore.cacheExpirationInterval&quot;: 3600
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core Set Hosting environment]]></title>
      <url>https://blackie1019.github.io/2017/03/19/ASP-NET-Core-Set-Hosting-environment/</url>
      <content type="html"><![CDATA[<p>說明一下ASP.NET Core的Hosting environment如何做改變。</p>
<a id="more"></a>
<p>一般在應用程式在開發與發佈上常常會愈到參數不同或是設定不同的情形，這在網頁應用程式上更常遇到:如開發使用JS原始碼，但發佈時必須將JS檔案bundle並minify至一個js檔案中。</p>
<p>今天介紹一下ASP.NET Core的Hosting environment來幫我們達到這樣設定。</p>
<h1 id="Hosting-environment-Introduction"><a href="#Hosting-environment-Introduction" class="headerlink" title="Hosting environment Introduction"></a>Hosting environment Introduction</h1><p>ASP.NET Core提供了一個預設的環境參數設定的方法，可讓我們用WebHostBuilder自動的載入我們目前當下設定好的參數設定，而預設他提供我們 Development, Staging or Production這三種，而我們可以把參數與設定依據不同環境的需求作修改，方便我們開發與發佈的使用切換。</p>
<p>而Hosting environment其實也不僅限於上面這三組設定或是你也可以把設定換名稱，你可以任意建立新的設定(自己新增自訂名稱即可)。</p>
<p><em>這邊稍微注意一下Windows與MacOS都不區分大小寫(Case insensitive)，Linux的預設則是會區分大小寫(Case Sensitive)</em></p>
<p>下面即是ASP.NET Core MVC的_Layout.cshtml的預設:</p>
<p><img src="layout.png" alt="layout"></p>
<p>而ASP.NET Core 使用 ASPNETCORE_ENVIRONMENT這個環境變數來決定當前要使用的環境參數組的名稱。預設我們會使用Production這組環境組。如下預設不做修改執起啟動dotnet core 應用程式即可看到我們使用Production這個環境組的設定。</p>
<p><img src="default.png" alt="default"></p>
<h1 id="Change-Hosting-environment"><a href="#Change-Hosting-environment" class="headerlink" title="Change Hosting environment"></a>Change Hosting environment</h1><p>這邊示範在各環境，如何將目前運行的Production改為Development</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="Command-Line"><a href="#Command-Line" class="headerlink" title="Command Line"></a>Command Line</h3><p>在cmd上面輸入這個指令就會看到SUCCESS: Specified value was saved.</p>
<pre><code>setx ASPNETCORE_ENVIRONMENT &quot;Development&quot;
</code></pre><p>而cmd輸入的使用者環境變數不會在目前作用的視窗生效，所以必須重開cmd才能讓dotnet cli讀取到當前新增的使用者環境變數。如果還是不行的話可以嘗試重開機。</p>
<p>而我們也可以將此變數改為新增至系統環境變數，這樣多個使用者都可以適用這個參數</p>
<pre><code>setx ASPNETCORE_ENVIRONMENT &quot;Development&quot; /M
</code></pre><h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><pre><code>$Env:ASPNETCORE_ENVIRONMENT = &quot;Development&quot;
</code></pre><p>這邊稍微注意一下，如果你是用VSCode做開發的朋友，VSCode預設的Terminal是用PowerShell，所以千萬不要打cmd指令…(一定不會生效的..)</p>
<p><img src="windows_powershell.png" alt="windows"></p>
<h3 id="Windows-Control-Panel"><a href="#Windows-Control-Panel" class="headerlink" title="Windows Control Panel"></a>Windows Control Panel</h3><p>而我們也可以手動透過控制台的GUI介面加入該參數。</p>
<p>在Windows視窗查詢environment variables&gt;選擇System Properties&gt;點擊Environment Variables&gt;將ASPNETCORE_ENVIRONMENT變數與值，新增至user variables或是新增至system variables。</p>
<p><img src="controlpanel.png" alt="controlpanel"></p>
<h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>用任何一個編輯器打開.bash_profile(這邊我用VSCode)</p>
<pre><code>code ~/.bash_profile
</code></pre><p>新增ASPNETCORE_ENVIRONMENT=Development</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux可以使用export這個指令，而這指令也可以用在macOS上</p>
<pre><code>export ASPNETCORE_ENVIRONMENT=Development
</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments" target="_blank" rel="external">Working with multiple environments</a></li>
<li><a href="https://andrewlock.net/how-to-set-the-hosting-environment-in-asp-net-core/" target="_blank" rel="external">How to set the hosting environment in ASP.NET Core</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> VSCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with SPA]]></title>
      <url>https://blackie1019.github.io/2017/03/18/ASP-NET-Core-play-with-SPA/</url>
      <content type="html"><![CDATA[<p>今天來介紹一下如何幫ASP.NET Core加入Web Single Page Application的架構。</p>
<a id="more"></a>
<p>SPA是目前Web開發的一個主流，幾年前也寫過系列的文章介紹當時火紅的AngularJS如何幫忙實作這樣的架構。而目前主流的除了AngularJS(1/2)之外，React也在FB的發展下成為社交平台的主流Framework。</p>
<p>今天來介紹一下如何用Microsoft.AspNetCore.SpaTemplates幫我們快速建立一個ASP.NET Core+SPA的專案。</p>
<h1 id="JavaScriptServices-and-Microsoft-AspNetCore-SpaTemplates"><a href="#JavaScriptServices-and-Microsoft-AspNetCore-SpaTemplates" class="headerlink" title="JavaScriptServices and Microsoft.AspNetCore.SpaTemplates"></a>JavaScriptServices and Microsoft.AspNetCore.SpaTemplates</h1><p>微軟官方有提供一個JavaScriptServices的plugin，而這個plugin其實可以細分為下面三種 NuGet 套件 :</p>
<ul>
<li>Microsoft.AspNetCore.SpaTemplates<br>  這擴增dotnet cli的專案樣板，可讓我們透過dotnet new 加上專案類型的方式快速建立 Angular 2, Aurelia, Knockout, React, and React+Redux 等SPA架構的網頁應用程式專案.</li>
<li>Microsoft.AspNetCore.SpaServices<br>  這是 SpaTemplates-produced 內部運作的機制. 它為SPA應用程式提供如Angular和React的服務器端畫面呈現處理(server-side rendering)，以及與整合Webpack建置中介層(middleware)。</li>
<li>Microsoft.AspNetCore.NodeServices<br>  這是 SpaServices 內部運作的機制. 這個底層套件可以協助我們快速且可靠的在ASP.NET Core應用程式的主機上任意執行JavaScript程式。</li>
</ul>
<p>而今天重點放在第一項樣板的補丁。</p>
<h1 id="Microsoft-AspNetCore-SpaTemplates"><a href="#Microsoft-AspNetCore-SpaTemplates" class="headerlink" title="Microsoft.AspNetCore.SpaTemplates"></a>Microsoft.AspNetCore.SpaTemplates</h1><h2 id="Prerequistes"><a href="#Prerequistes" class="headerlink" title="Prerequistes"></a>Prerequistes</h2><ul>
<li>ASP.NET Core SDK 1.0 RC以上版本</li>
<li>Node.js, Version 6以上版本</li>
</ul>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>安裝指令</p>
<pre><code>dotnet new --install Microsoft.AspNetCore.SpaTemplates::*
</code></pre><p>安裝完後，馬上可以看到現在可以建置的樣板多了不少</p>
<p><img src="templates.png" alt="templates"></p>
<h2 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h2><p>這邊我們就可以透過新增的專案樣板去建置一個SPA專案，這邊我們以React+Redux為例建立一個新專案</p>
<pre><code>dotnew new reactredux
</code></pre><p><img src="reactredux.png" alt="reactredux"></p>
<p>整體的目錄結構會長這樣</p>
<p><img src="folder.png" alt="folder"></p>
<p>建置完成後我們依樣需要還原套件才可以建置這個專案</p>
<pre><code>dotnet restore

dotnet run
</code></pre><p>最後我們將專案運請起來即可看到這個新的SPA網站</p>
<p><img src="spa.png" alt="spa"></p>
<h1 id="Alternative-Creating-a-SPA-project-via-Yeoman"><a href="#Alternative-Creating-a-SPA-project-via-Yeoman" class="headerlink" title="Alternative: Creating a SPA project via Yeoman"></a>Alternative: Creating a SPA project via Yeoman</h1><p>當然，你也可以透過Yeoman這個NPM的套件來幫你建置ASP.NET Core的SPA專案結構。</p>
<p>安裝 Yeoman 的 ASP.NET Core套件</p>
<pre><code>npm install -g yo generator-aspnetcore-spa
</code></pre><p>即可透過下面指令建置專案結構</p>
<pre><code>yo aspnetcore-spa
</code></pre><p>同樣的，當專案樣板建立完成別忘記要還原套件才可以建置與運行!</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://blogs.msdn.microsoft.com/webdev/2017/02/14/building-single-page-applications-on-asp-net-core-with-javascriptservices/" target="_blank" rel="external">Building Single Page Applications on ASP.NET Core with JavaScriptServices</a> </li>
<li><a href="https://github.com/aspnet/JavaScriptServices" target="_blank" rel="external">Github - JavaScriptServices</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> React </tag>
            
            <tag> SPA </tag>
            
            <tag> AngularJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Travis CI Cron Job to build up Daily Release]]></title>
      <url>https://blackie1019.github.io/2017/03/17/Travis-CI-Cron-Job-to-build-up-Daily-Release/</url>
      <content type="html"><![CDATA[<p>介紹Travis CI官方的Cron Job功能，讓固定週期佈署可以一鍵完成。</p>
<a id="more"></a>
<p>早先有介紹過一個協助Travis CI每固定週期(每天，每週或每月)至少建置一次的套件nightli.es。而Travis CI其實已經把Cron Job的功能導入了，就讓我們學習如何設置。</p>
<p>而之後我們也可以結合Travis CI與Hexo的發佈指令達到Hexo部落格每日排程更新的效果</p>
<h1 id="Cron-jobs-Introduction"><a href="#Cron-jobs-Introduction" class="headerlink" title="Cron jobs Introduction"></a>Cron jobs Introduction</h1><p>Linux上面一值都有Crontab的概念，而Travis CI的Cron jobs就是一個固定時間/週期就會執行的一個排程服務，會幫我們把指定Repository的最後push進去的commits拿出來重新按照TraivsCI設定重新建置。 而我們可以透Cron jobs總是獲取特定分支上的最近提交的特性，在該狀態下持續重新建構項目。</p>
<p>Cron作業可以每天，每週或每月運行，這實際上是指在所選時間段之後最多一個小時內會執行，但它們也可以被跳過(如果你已經有手動執行過)。 </p>
<p>下面這邊是透過設定即可看到新增或是刪除Cron Jobs的按鈕。</p>
<p><img src="setting_1.png" alt="setting_1.png"></p>
<p><img src="setting_2.png" alt="setting_2.png"></p>
<p>目前Cron作業無法設置為在特定時間運行，最小單位也必須與日為單位是比較可惜的。而該服務目前還在Beta希望之後還能在強化這方面。</p>
<h1 id="Daily-Release"><a href="#Daily-Release" class="headerlink" title="Daily Release"></a>Daily Release</h1><p>這邊如何透過Travis偵測Github的push commit，可以參考另外一位MVP - Larry Nung的<a href="http://larrynung.github.io/tags/Travis/" target="_blank" rel="external">Travis系列文章</a></p>
<p>而我們直接從Travis CI的Build History這邊看結果:</p>
<p><img src="result.png" alt="result"></p>
<p>可以發現有一筆CRON標籤的紀錄，這就是排程幫我們執行。而這樣透過Cron Jobs在固定週期幫我們取出Hexo的Source Code做build，並透過Travis CI設定去執行NPM的指令達到Hexo Release我們即可輕鬆地做每日定期發布。</p>
<p>這樣的好處讓我們可以把Hexo的特定文章日期設為未來時間，透過這樣固定的發布就可以在我們在未來時間真的到的時候才做發布，達到部落格排程發佈的效果!!</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://docs.travis-ci.com/user/cron-jobs/" target="_blank" rel="external">Travis CI - Cron Jobs</a></li>
<li><a href="https://blackie1019.github.io/2016/08/19/Travis-CI-build-daily-with-nightli-es/">Travis CI build daily with nightli.es</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Continuous Integration </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Travis CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio 2017 new features in One Poster]]></title>
      <url>https://blackie1019.github.io/2017/03/15/Visual-Studio-2017-new-features-in-One-Poster/</url>
      <content type="html"><![CDATA[<p>隨著微軟新推出的Visual Studio 2017，讓我們用一張海報看完VS2017新的功能!</p>
<a id="more"></a>
<p>在3/7微軟最主要的產品Visual Studio迎接了它20歲的生日! 這邊官方也做了一個網頁來快速幫大家一覽所有新功能</p>
<p><img src="vsinfographic.png" alt="vs2017 poster"></p>
<p><a href="https://vs2017poster.azurewebsites.net/" target="_blank" rel="external">來源</a></p>
<p>這邊會持續針對VS2017帶來的新功能做完整的解紹</p>
<h2 id="VS2017-New-Features"><a href="#VS2017-New-Features" class="headerlink" title="VS2017 New Features"></a>VS2017 New Features</h2><ul>
<li>New Start page</li>
<li>Open Folder</li>
<li>Synchronize your environment</li>
<li>Advanced IntelliSense</li>
<li>Fast code navigation</li>
<li>Live code analysis</li>
<li>Connected services</li>
<li>Xamarin Profiler</li>
</ul>
<h3 id="Debugging-amp-Support"><a href="#Debugging-amp-Support" class="headerlink" title="Debugging &amp; Support"></a>Debugging &amp; Support</h3><ul>
<li>Run to click</li>
<li>Exception Helper</li>
<li>Make Visual Studio your own</li>
<li>Live Unit Testing</li>
<li>Docker support</li>
<li>PowerShell Tools for Visual Studio</li>
<li>Continuous Delivery Tools for Visual Studio</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core play with dotnet-watch]]></title>
      <url>https://blackie1019.github.io/2017/03/14/ASP-NET-core-play-with-dotnet-watch/</url>
      <content type="html"><![CDATA[<p>紀錄並介紹一下DotNetTools的其中一項工具 - dotnet-watch</p>
<a id="more"></a>
<h2 id="DotNetTools"><a href="#DotNetTools" class="headerlink" title="DotNetTools"></a>DotNetTools</h2><p>這專案主要是強化.NET Core CLI的command-line工具，目前已釋出了三項工具，分別是</p>
<ul>
<li><p><a href="https://github.com/aspnet/DotNetTools/tree/dev/src/Microsoft.DotNet.Watcher.Tools" target="_blank" rel="external">dotnet-watch (Microsoft.DotNet.Watcher.Tools)</a></p>
<p>  可以幫我們監視與偵測特定應用程式的原始碼是否有改變，如果有則立即重新編譯啟動    </p>
</li>
<li><p><a href="https://github.com/aspnet/DotNetTools/tree/dev/src/Microsoft.Extensions.SecretManager.Tools" target="_blank" rel="external">dotnet-user-secrets (Microsoft.Extensions.SecretManager.Tools)</a></p>
<p>  可以幫我們管理儲存在user secret store裡的資料</p>
</li>
<li><p><a href="https://github.com/aspnet/DotNetTools/tree/dev/src/Microsoft.Extensions.Caching.SqlConfig.Tools" target="_blank" rel="external">dotnet-sql-cache (Microsoft.Extensions.Caching.SqlConfig.Tools)</a></p>
<p>  可以幫我們在 Microsoft SQL Server database 新建table and indexes用於distributed caching</p>
</li>
</ul>
<p>今天我們要介紹的就是第一項 <em>dotnet-watch</em></p>
<p>影片參考(前面三分鐘)：</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/48J9JLvesVE" frameborder="0" allowfullscreen></iframe>

<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>將 Microsoft.DotNet.Watcher.Tools 加入專案的 DotNetCliToolReference 當中</p>
<pre><code>&lt;ItemGroup&gt;
    &lt;DotNetCliToolReference Include=&quot;Microsoft.DotNet.Watcher.Tools&quot; Version=&quot;1.0.0-msbuild3-final&quot; /&gt;
    &lt;!-- If you use .NET Core 1.1.1 please check your version should be greater than 1.0.0-* --&gt;
    &lt;!--&lt;DotNetCliToolReference Include=&quot;Microsoft.DotNet.Watcher.Tools&quot; Version=&quot;1.0.0-*&quot; /&gt;--&gt;
&lt;/ItemGroup&gt;
</code></pre><p><img src="add watch.png" alt="add watch"></p>
<p>然後重新restore專案取得工具，否則會出現下面的錯誤</p>
<p><img src="error.png" alt="error"></p>
<pre><code>dotnet restore
</code></pre><p><em>這邊稍微要注意一下，如果你是用.NET Core 1.1.1的朋友應該要把上面的dotnet-watch的版本改道1.0.0以上，否則會出現下面的錯誤</em></p>
<p><img src="version error.png" alt="version error"></p>
<h2 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h2><p>指令組成很簡單</p>
<pre><code>Usage: dotnet watch [options] [[--] &lt;args&gt;...]

Options:
-?|-h|--help  Show help information
-q|--quiet    Suppresses all output except warnings and errors
-v|--verbose  Show verbose output
</code></pre><table>
<thead>
<tr>
<th>What you want to run</th>
<th>Dotnet watch command</th>
</tr>
</thead>
<tbody>
<tr>
<td>dotnet run</td>
<td>dotnet <em>watch</em> run</td>
</tr>
<tr>
<td>dotnet run –arg1 value1</td>
<td>dotnet <em>watch</em> run –arg1 value</td>
</tr>
<tr>
<td>dotnet run –framework net451 – –arg1 value1</td>
<td>dotnet <em>watch</em> run –framework net451 – –arg1 value1</td>
</tr>
<tr>
<td>dotnet test</td>
<td>dotnet <em>watch</em> test</td>
</tr>
</tbody>
</table>
<p>所以就只要把原本的專案執行從dotnet [command]改為dotnet watch [command]就可以。</p>
<p>執行起來會出現下面的結果</p>
<p><img src="execute.png" alt="execute"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/dotnet-watch" target="_blank" rel="external">Developing ASP.NET Core apps using dotnet watch</a></li>
<li><a href="https://github.com/aspnet/DotNetTools/blob/dev/src/Microsoft.DotNet.Watcher.Tools/README.md" target="_blank" rel="external">Github - dotnet-watch</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> .NET Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core add Git Ignore File]]></title>
      <url>https://blackie1019.github.io/2017/03/13/ASP-NET-Core-add-Git-Ignore-File/</url>
      <content type="html"><![CDATA[<p>ASP.NET Core的gitignore設定分享</p>
<a id="more"></a>
<p>做版本管控一定會遇到有些檔案不想加入追蹤或是特定folder想要整個排除在外，這時候我們就可以用.gitignore這樣的一個檔案來幫我們設定我們想要排除的行為。而這些必須要排除這些檔案，我們稱為「忽略清單」。</p>
<p>設定忽略清單除了可以幫我們減少不必要的檔案空間，也可以幫我們在資料安全的考量下公布必要的資訊即可。</p>
<h2 id="Git-and-Git-Ignore"><a href="#Git-and-Git-Ignore" class="headerlink" title="Git and Git Ignore"></a>Git and Git Ignore</h2><p>在 Git 裡面，是透過 .gitignore 檔案來進行定義「忽略清單」，這些被設定為忽略的檔案、資料夾不會出現在 git status 的結果中(還是屬於Untracked file時)，如果這些檔案在設定忽略清單前就加入追蹤(Staged file)則不受.gitignore 檔案控制。</p>
<h2 id="ASP-NET-Core-gitignore"><a href="#ASP-NET-Core-gitignore" class="headerlink" title="ASP.NET Core .gitignore"></a>ASP.NET Core .gitignore</h2><p>網路上最常參考<a href="https://github.com/github/gitignore" target="_blank" rel="external">github - gitignore</a>，而如果你是使用Github，則可以在一開始建立Repository的最下方選擇加入的.gitignore語言設定。</p>
<p><img src="github.png" alt="github"></p>
<p>另外，也可以透過<a href="https://www.gitignore.io/" target="_blank" rel="external">gitignore.io</a>根據你輸入的語言、工具、環境等幫你產生.gitignore檔案</p>
<p>ASP.NET Core則有一份官方的<a href="https://github.com/aspnet/Docs/blob/master/.gitignore" target="_blank" rel="external">ASP.NET&amp;ASP.NET Core共用版本</a>。</p>
<h2 id="gitignore-設定"><a href="#gitignore-設定" class="headerlink" title=".gitignore 設定"></a>.gitignore 設定</h2><p>當我們在專案的根資料夾放入下載好的.gitignore後我們先看一次我們現在的檔案目錄結構與檔案</p>
<p><img src="tree.png" alt="tree"></p>
<p>而當我們commit並push至github後我們在看一次我們真實推出去的結果就可以發現我們已經過濾掉我們不想公開的檔案了</p>
<p><img src="git.png" alt="git"></p>
<h2 id="延伸主題-Visual-Stuido-Code-Plugin-vscode-icons"><a href="#延伸主題-Visual-Stuido-Code-Plugin-vscode-icons" class="headerlink" title="延伸主題 Visual Stuido Code Plugin - vscode-icons"></a>延伸主題 Visual Stuido Code Plugin - vscode-icons</h2><p>這邊介紹一下<a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a>這個套件，它幫VS Code補充了檔案的icon而且非常的豐富與完整。</p>
<p>可以看到我上圖我們新加入的.gitigore檔案會顯git的圖案，如果沒有加入這個plugin則會顯示為不認識的檔案內容。</p>
<p><img src="https://raw.githubusercontent.com/vscode-icons/vscode-icons/master/images/screenshot.gif" alt="demo-1"></p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>如果不能直接透過查詢找到該擴充套件，也可以直接透過指令安裝:</p>
<pre><code>ext install vscode-icons
</code></pre><p>如果在同一位置則可以嘗試下面指令:</p>
<pre><code>ext install icons
# or
ext install &quot;vscode-icons&quot;
</code></pre><h3 id="Enable-the-extension"><a href="#Enable-the-extension" class="headerlink" title="Enable the extension"></a>Enable the extension</h3><p>前往 <em>File</em> &gt; <em>Preferences</em> &gt; <em>File Icon Theme</em> &gt; <em>VSCode Icons</em>.</p>
<p>(注意:OSX it is <em>Code</em> &gt; <em>Preferences</em> &gt; <em>File Icon Theme</em> &gt; <em>VSCode Icons</em>.)</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://zlargon.gitbooks.io/git-tutorial/content/file/ignore.html" target="_blank" rel="external">Git - 忽略檔案</a></li>
<li><a href="http://italwaysrainonme.blogspot.tw/2013/01/git-gitignore-commit.html" target="_blank" rel="external">[GIT] 設定.gitignore 忽略檔案不被track</a></li>
<li><a href="http://ithelp.ithome.com.tw/articles/10138831" target="_blank" rel="external">30 天精通 Git 版本控管 (19)：設定 .gitignore 忽略清單</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows Containers on Windows 10]]></title>
      <url>https://blackie1019.github.io/2017/03/12/Windows-Containers-on-Windows-10/</url>
      <content type="html"><![CDATA[<p>Windows總算把Container放入OS中，讓使用者不用再透過VM來使用Docker，就讓我們來學習如何設定Windows Container的環境與原生Container帶來的好處吧</p>
<a id="more"></a>
<h2 id="Windows-Container-Introduction"><a href="#Windows-Container-Introduction" class="headerlink" title="Windows Container Introduction"></a>Windows Container Introduction</h2><p>首先，Windows Container 與先前Docker所推出的 Docker for Windows 是不一樣的東西!</p>
<p><img src="docker client.png" alt="docker client"></p>
<p>Windows Container 是 Microsoft 初次在 Windows Server 2016 提供的功能，而這功能提早開放到Azure上已經一陣子了。 Microsoft 比照 Docker 的架構，開發了 Windows 版的 container engine. container 共用的是 windows kernel，不是 linux kernel. </p>
<p>換句話說，你在 Windows Container 內能執行的，是真真實實的 Windows Application，而不是多用一層VM包起來的LINUX Application.</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul>
<li>One physical computer system running Windows 10 Anniversary Edition (Professional or Enterprise).</li>
<li><p>This quick start can be run on a Windows 10 virtual machine however nested virtualization will need to be enabled. More information can be found in the Nested Virtualization Guide.</p>
<pre><code>You must install critical updates for Windows Containers to work. To check your OS version, run winver.exe, and compare the version shown to Windows 10 update history. Make sure you have 14393.222 or later before continuing.
</code></pre></li>
</ul>
<p><em>因為14393.222包含在Windows 10 Creators Update Version 1607這的週年的大更新版裡面，但災情實在太可怕了…建議安裝這版要有心理準備，或是直接跳到最新的Windows 10 Creators Update Version  1703(目前僅可透過Windows update下載，尚無iso檔案)</em></p>
<h4 id="Install-Container-Feature"><a href="#Install-Container-Feature" class="headerlink" title="Install Container Feature"></a>Install Container Feature</h4><p>用Administrator在PowerShell進行以下操作:</p>
<pre><code>Enable-WindowsOptionalFeature -Online -FeatureName containers -All
</code></pre><p><em>如果先前沒安裝更新就會出現找不到指令的情況</em></p>
<p><img src="power_shell_error.png" alt="power_shell_error"></p>
<p>而因為Windows 10只支援Hyper-V Containers，所以我們也要把Hyper-V打開來</p>
<pre><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All
</code></pre><p>成功後記得將手邊檔案存檔後重啟電腦</p>
<pre><code>Restart-Computer -Force
</code></pre><h4 id="Install-Docker-for-Windows"><a href="#Install-Docker-for-Windows" class="headerlink" title="Install Docker for Windows"></a>Install Docker for Windows</h4><p>這邊建議大家到<a href="http://www.docker.com/products/docker" target="_blank" rel="external">Docker官方</a>直接下載Docker CE for Windows版就可以了</p>
<p>安裝好後會在你的右下角出現一隻鯨魚的圖示</p>
<p><img src="icon.png" alt="icon"></p>
<p>而我們可以直接右鍵打開menu操作(如:開啟Kitermatic)</p>
<p><img src="icon_menu.png" alt="icon_men"></p>
<p>到這邊容器的環境已經準備好了，有些磁碟資料夾與網路的設定就見仁見智了，如果是新手不知道怎麼設定建議下載Kitermatic，由它來幫你完成預設與UI操作即可達到的容器使用。</p>
<h3 id="Detail-of-Windows-Container-Prerequisites"><a href="#Detail-of-Windows-Container-Prerequisites" class="headerlink" title="Detail of Windows Container Prerequisites"></a>Detail of Windows Container Prerequisites</h3><p>附上整個完整的Windows Container Prerequisites</p>
<h4 id="OS-Requirements"><a href="#OS-Requirements" class="headerlink" title="OS Requirements"></a>OS Requirements</h4><ul>
<li>The Windows container feature is only available on Windows Server 2016 (Core and with Desktop Experience), Nano Server, and Windows 10 Professional and Enterprise (Anniversary Edition).</li>
<li>The Hyper-V role must be installed before running Hyper-V Containers</li>
<li>Windows Server Container hosts must have Windows installed to c:. This restriction does not apply if only Hyper-V Containers will be deployed.</li>
</ul>
<h4 id="Virtualized-Container-Hosts"><a href="#Virtualized-Container-Hosts" class="headerlink" title="Virtualized Container Hosts"></a>Virtualized Container Hosts</h4><p>If a Windows container host will be run from a Hyper-V virtual machine, and will also be hosting Hyper-V Containers, nested virtualization will need to be enabled. Nested virtualization has the following requirements:</p>
<ul>
<li>At least 4 GB RAM available for the virtualized Hyper-V host.</li>
<li>Windows Server 2016, or Windows 10 on the host system, and Windows Server (Full, Core) or Nano Server in the virtual machine.</li>
<li>A processor with Intel VT-x (this feature is currently only available for Intel processors).</li>
<li>The container host VM will also need at least 2 virtual processors.</li>
</ul>
<p>另外需注意的是，Windows Container 不能執行現有的 Docker Container Image。它只能執行 Windows Application，你必須準備製作或取得的Windows container image。</p>
<p>官方可以參考<a href="https://hub.docker.com/u/microsoft/" target="_blank" rel="external">Microsoft on DockerHub</a>，而<a href="http://hub.docker.com/" target="_blank" rel="external">hub.docker.com</a>上面當然也可以找到 for windows 的 container image。</p>
<p>若想自己寫 dockerfile，想參考微軟官方這邊的範例的話，可以參考 <a href="https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-container-samples/windowsservercore" target="_blank" rel="external">Windows Container Samples</a>。</p>
<p>若對Windows Container有興趣可以關注另一個台灣微軟MVP - 安德魯的<a href="http://columns.chicken-house.net" target="_blank" rel="external">部落格</a>與<a href="https://www.facebook.com/andrew.blog.0928/" target="_blank" rel="external">粉絲團</a></p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>容器是未來開發跟部屬的重要一部分，也是目前整體的趨勢。如何做好CI與CD去提供一個有品質且高效彈性部屬的應用程式，這中間最重要的一塊就是容器的運用。<br>而針對ASP.NET Core之後的文章也會以容器為開發的主體去跟大家做分享。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/quick-start-windows-10" target="_blank" rel="external">Windows Containers on Windows 10</a></li>
<li><a href="https://azure.microsoft.com/en-us/blog/new-windows-server-containers-and-azure-support-for-docker/" target="_blank" rel="external">New Windows Server containers and Azure support for Docker</a></li>
<li><a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements" target="_blank" rel="external">Windows container requirements</a></li>
<li><a href="http://kevintsengtw.blogspot.tw/2016/11/docker-for-windows-aspnet-core-part1.html" target="_blank" rel="external">Docker for Windows 與 ASP.NET Core - Part.1 安裝與使用 Visual Studio 2015</a></li>
<li><a href="http://blog.miniasp.com/post/2016/08/01/Docker-for-Windows-1-12-Released.aspx" target="_blank" rel="external">新版 Docker for Windows 正式推出：全新安裝與快速上手</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Cotainer &amp; VM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Container </tag>
            
            <tag> Docker </tag>
            
            <tag> Windows Container </tag>
            
            <tag> Windows 10 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core Unable to Start Kestrel]]></title>
      <url>https://blackie1019.github.io/2017/03/11/ASP-NET-Core-Unable-to-Start-Kestrel/</url>
      <content type="html"><![CDATA[<p>紀錄一下Kestrel意外沒關閉的狀況該如何解決</p>
<a id="more"></a>
<p>這邊在開發ASP.NET Core MVC的時候常遇到Kestrel沒關閉造成下面的問題。</p>
<p>順手分享一下問題的原因與解決辦法</p>
<h3 id="Kestrel-介紹"><a href="#Kestrel-介紹" class="headerlink" title="Kestrel 介紹"></a>Kestrel 介紹</h3><p><a href="https://github.com/aspnet/KestrelHttpServer" target="_blank" rel="external">Kestrel</a>是一專門為ASP.NET Core設計的Web Server Host，而他也是基於另外一個高效能的I/O伺服器專案 - <a href="https://github.com/libuv/libuv" target="_blank" rel="external">libuv</a>。</p>
<p>相較於我們長久開發ASP.NET所搭配的IIS，kestrel就是一個專門為ASP.NET Core所誕生的Web應用程式伺服器，解決跨平台服務的問題。</p>
<p>而因為ASP.NET Core改寫了原先ASP.NET Web應用程式與程式伺服器之間的處理關係，這強化了我們開發與建置上的選擇，在Windows的環境我們可以沿用原有的IIS來掛載ASP.NET Core程式，也可以採用新的Kestrel來取代IIS。但相較於IIS的全面性，Kestrel比較單純針對效能做了不錯的處理。根本來說 Kestel 是一個 I/O 元件，並沒有像 IIS 提供其他的功能來保護與管理，這也是架構上要考量跟注意的地方。</p>
<p>下圖我們可以清楚的了解Kestrel與ASP.NET Core如何互動與繫結(參考官方文件-<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/" target="_blank" rel="external">Web server implementations in ASP.NET Core</a>)</p>
<p><img src="kestrel cycle.png" alt="kestrel cycle"></p>
<p>開發上預設會使用kestrel，而如果你是用Visual Studio開發的則會使用IIS Express。而官方則是建議如果是要上正式環境使用則以IIS, Nginx, or Apache當作反轉伺服器再搭配Kestrel做調配。</p>
<p><img src="IIS cycle.png" alt="IIS cycle"></p>
<h3 id="問題-Unable-to-start-Kerstrel"><a href="#問題-Unable-to-start-Kerstrel" class="headerlink" title="問題 = Unable to start : Kerstrel"></a>問題 = Unable to start : Kerstrel</h3><p>而今天所發生的問題則是在運行ASP.NET Core MVC時，可以在Terminal會有下面的成功訊息</p>
<p><img src="success.png" alt="success"></p>
<p>但有時候會因為不明原因而無法啟動(顯示該port已被其他應用程式佔用而無法繫結)</p>
<p><img src="dotnet_exe.png" alt="dotnet_exe"></p>
<p>目前發生該問題還沒有特定流程，但出現的頻率真的過高…</p>
<h3 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h3><p>因為造成該問題的主因在於原先該終止的Kerstel未能正確停止﹐所以導致我們即將開始運行的Kerstel無法正確的啟動(因為相同port無法綁定至兩個應用程式)</p>
<p>其實解決方法很簡單，就是把Host的應用程式(kerstrel)關閉即可，只是當我們打開工作管理員後可能都找不到對應的關鍵字，原來是因為它的名稱叫做:dotnet.exe</p>
<p><img src="solution.png" alt="solution"></p>
<p>這邊就簡單的透過滑鼠右鍵End tasks即可。</p>
<h3 id="延伸主題-Web-Listener"><a href="#延伸主題-Web-Listener" class="headerlink" title="[延伸主題] Web Listener"></a>[延伸主題] Web Listener</h3><p>如果你是在windows環境因為一些內外在因素而不能使用IIS，我們在開發與執行上也可以透過另外一個替代方案來取代，那就是Web Listener。流程會變成如下:</p>
<p><img src="web listener_iis.png" alt="Web Listener IIS"></p>
<p>同樣的如果在內部網路無法使用kerstrel也可以改用這個方法。</p>
<p><img src="web listener_iis.png" alt="Web Listener Kerstrel"></p>
<p><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/weblistener" target="_blank" rel="external">官方說明</a>，之後也會花點時間在這個題目上跟大家分享。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel" target="_blank" rel="external">Kestrel</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/aspnet-core-module" target="_blank" rel="external">Kestrel with IIS</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction" target="_blank" rel="external">Kestrel with Nginx</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/publishing/apache-proxy" target="_blank" rel="external">Kestrel with Apache</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/weblistener" target="_blank" rel="external">WebListener</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/owin" target="_blank" rel="external">Open Web Interface for .NET (OWIN) guide</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Kerstrel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core CLI upgrade]]></title>
      <url>https://blackie1019.github.io/2017/03/10/ASP-NET-Core-CLI-upgrade/</url>
      <content type="html"><![CDATA[<p>這邊記錄一下ASP.NET Core CLI的更新方式</p>
<a id="more"></a>
<p>剛好在最近重新研究ASP.NET Core的時候遭逢VS 2017的上市，很多套件也同步作了更新。而.NET Core的CLI也在此時更新到1.0.1版本，這邊就剛好來研究一下怎麼做更新。</p>
<h2 id="如何查詢現在的版本"><a href="#如何查詢現在的版本" class="headerlink" title="如何查詢現在的版本"></a>如何查詢現在的版本</h2><pre><code>dotnet --version
</code></pre><p><img src="dotnet_cli.png" alt="dotnet_cli"></p>
<h2 id="更新CLI"><a href="#更新CLI" class="headerlink" title="更新CLI"></a>更新CLI</h2><p>更新方式有兩種:</p>
<ul>
<li>SDK下載(目前包含 .NET Core 1.0 and 1.1)</li>
<li>Binary下載(通常是因為要測試Beta版或是舊版)</li>
</ul>
<h3 id="SDK-下載"><a href="#SDK-下載" class="headerlink" title="SDK 下載"></a>SDK 下載</h3><ol>
<li>至ASP.NET Core官網下載新版SDK</li>
<li>安裝完後可再輸入一次版本查詢安裝是否成功</li>
</ol>
<p><img src="dotnet_cli_update.png" alt="dotnet_cli_update"></p>
<h2 id="Template的-–help指令"><a href="#Template的-–help指令" class="headerlink" title="Template的 –help指令"></a>Template的 –help指令</h2><p>基本上官網沒有寫明dotnet cli所提供的template有哪些，不過我們可以透過–help幫我們查詢一下:</p>
<pre><code>dotnet new --help
</code></pre><p><img src="templates.png" alt="templates"></p>
<p>所以這邊我們就知道如果要建立一個新的ASP.NET Core Web API專案可以透過下面指令:</p>
<pre><code>dotnet new webapi
</code></pre><p>而如果你要過濾某個套件如Authority並指定framework版本，則需要透過下面指令:</p>
<pre><code>dotnet new mvc --auth None --framework netcoreapp1.1
</code></pre><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>而從CLI 1.0.0升級到1.0.1主要是下面這個改變</p>
<ul>
<li>Available in the SDK and via Docker SDK images</li>
</ul>
<p>這功能蠻方便使用docker作為主要開發環境的工具，也適合我們在透過CI工具做整合時也更具備彈性。</p>
<p>詳細的Release Note請參考<a href="https://blogs.msdn.microsoft.com/dotnet/2017/03/07/announcing-net-core-tools-1-0/" target="_blank" rel="external">Announcing .NET Core Tools 1.0</a></p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET Core HelloWorld on Windows]]></title>
      <url>https://blackie1019.github.io/2017/03/06/ASP-NET-Core-HelloWorld-on-Windows/</url>
      <content type="html"><![CDATA[<p>安裝與設定.Net Core的Windows環境</p>
<a id="more"></a>
<h3 id="SDK安裝"><a href="#SDK安裝" class="headerlink" title="SDK安裝"></a>SDK安裝</h3><ol>
<li>至<a href="https://www.microsoft.com/net/download/core" target="_blank" rel="external">.Net Core 官網</a>下載.Net Core的SDK與工具，這邊我是選擇Current(1.1 SDK -Installer)，會包含.Net Core的Runtime與cli</li>
<li>直接點擊.exe檔案完成安裝</li>
<li><p>安裝完成後我們可以開啟指令並輸入一下dotnet看一下有無回應</p>
<pre><code>dotnet -v
</code></pre></li>
</ol>
<h3 id="IDE安裝"><a href="#IDE安裝" class="headerlink" title="IDE安裝"></a>IDE安裝</h3><p>這邊我們下載Visual Studio Code(簡稱VS Code)作為我們的開發編輯器。</p>
<p>Visual Studio Code是微軟在 Build 2015 大會上，所推出的免費跨平台編輯器。他本身支持語言特寫、智能代碼補全、自定義熱鍵、括號匹配、代碼片段、代碼對比 Diff、GIT 等特性，並針對網頁開發和雲端應用開發做了優化。軟體跨平台支持 Win、Mac 以及 Linux，是一個輕巧卻強悍的編輯器。比小編之前自費買的Sublime Text與Atom相比毫不遜色，且也是越來越普及。</p>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="external">VS Code官方網站</a></p>
<h4 id="安裝-UI"><a href="#安裝-UI" class="headerlink" title="安裝 - UI"></a>安裝 - UI</h4><p>而在我們安裝完編輯器後，我們可以安裝一些不錯的擴充套件來幫我們強化編輯器，加速我們的開發。這邊我們會安裝的編輯器擴充套件-<a href="https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions" target="_blank" rel="external">C# extension</a>來協助我們快速建立新的C# Class, Interface, 增添建構子的屬性等，一切的操作我們都可以透過滑鼠右鍵點選即可。</p>
<p><img src="newclass.gif" alt="newclass"></p>
<p><img src="newinterface.gif" alt="newinterface"></p>
<p><img src="fieldfromctor.gif" alt="fieldfromctor"></p>
<p>安裝步驟也很簡單，如下圖在編輯器的最左下角點選Extensions後在上方查詢輸入你要查詢的擴充套件，再點選install完成安裝後重啟編輯器即可。</p>
<p><img src="vscode-extension.png" alt="vscode-extension.png"></p>
<h4 id="安裝-編輯器快速開啟-Ctrl-P"><a href="#安裝-編輯器快速開啟-Ctrl-P" class="headerlink" title="安裝 - 編輯器快速開啟(Ctrl+P)"></a>安裝 - 編輯器快速開啟(Ctrl+P)</h4><p>我們也可以用VS Code快速開啟的功能，在按下Ctrl+P後輸入指令完成安裝</p>
<pre><code>ext install csharpextensions　
</code></pre><h3 id="Command-Line-Tooling"><a href="#Command-Line-Tooling" class="headerlink" title="Command Line Tooling"></a>Command Line Tooling</h3><p>dotnet cli是我們在安裝SDK時會順便幫我們裝入的工具，可以幫我們建立專案,執行, 還原套件等工作。</p>
<ul>
<li>new<br>  建立新專案</li>
<li>restore<br>  根據project.json使用NuGet還原專案相依的套件</li>
<li>run<br>  執行專案程式碼</li>
<li>build<br>  建置專案</li>
<li>test<br>  建置並以測試模式執行專案</li>
<li>publish<br>  發布專案</li>
<li>pack<br>  將專案包成套件進行發布</li>
</ul>
<p>針對dotcore cli可以來<a href="https://github.com/dotnet/cli/" target="_blank" rel="external">這邊</a>看更詳細的說明。</p>
<h3 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h3><ol>
<li><p>首先我們打開cmd後運用指令幫我們建立一個名為HelloWorld的資料夾</p>
<pre><code>mkdir HellowWorld
</code></pre></li>
<li><p>進入新建的資料夾</p>
<pre><code>cd HellowWorld
</code></pre></li>
<li><p>接者執行透過dotnet cli指令建立一個新的專案</p>
<pre><code>dotnet new
</code></pre></li>
</ol>
<p>這邊可以看到我們資料夾內建立對應的檔案。</p>
<p><img src="folder.png" alt="folder"></p>
<h3 id="執行程式"><a href="#執行程式" class="headerlink" title="執行程式"></a>執行程式</h3><p>接者我們就直接執行程式看預設的專案輸出</p>
<pre><code>dotnet run
</code></pre><p><img src="error.png" alt="error"></p>
<p>這邊我們可以看到如果直接執行會有錯誤拋出，請我們先執行dotnet restore將必要的套件載入，我們按照指示先進行還原</p>
<pre><code>dotnet restore
</code></pre><p><img src="restore.png" alt="restore"></p>
<p>還原成功後，我們再次執行dotnet run即可看到該專案的輸出</p>
<pre><code>dotnet run
</code></pre><p><img src="output.png" alt="output"></p>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>.Net Core的安裝相對ASP.Net來說真的是簡單與輕巧(SDK才45M)太多了。只需下載.Net Core的SDK(官方把Runtime與cli兩個包在一起了)即可開始開發。</p>
<h4 id="C-extension-介紹"><a href="#C-extension-介紹" class="headerlink" title="C# extension 介紹"></a>C# extension 介紹</h4><p>這邊也推薦另外一個擴充套件-<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp" target="_blank" rel="external">C#</a>，他提供了以下的功能：</p>
<ul>
<li>Lightweight development tools for .NET Core.</li>
<li>Great C# editing support, including Syntax Highlighting, IntelliSense, Go to Definition, Find All References, etc.</li>
<li>Debugging support for .NET Core (CoreCLR). NOTE: Mono and Desktop CLR debugging is not supported.</li>
<li>Support for project.json and csproj projects on Windows, macOS and Linux.</li>
</ul>
<p>如果上面有不清楚的，可以參考一下<a href="https://channel9.msdn.com/Blogs/dotnet/Get-started-with-VS-Code-using-CSharp-and-NET-Core" target="_blank" rel="external">Channel9提供的教學影片</a>!</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> .NET Core </tag>
            
            <tag> Iron Man </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ironman for ASP.NET Core]]></title>
      <url>https://blackie1019.github.io/2016/11/30/Ironman-30-days-for-ASP-NET-Core/</url>
      <content type="html"><![CDATA[<p>此為系列為文章目錄，本系列文章將為大家介紹.NET Core 與 ASP.NET Core並將如何運用它跨平台的特性去開發 Web App 並將其推至真實世界的雲端服務之上運行。最後會用一個專案實例如帶大家從系統的設計到架構運行，如何做到持續整合與開發並用最少的成本發揮最大的效能運行．</p>
<a id="more"></a>
<p>文章持續更新，最新更新時間: <strong>2017-05-10</strong></p>
<h2 id="NET-Core-and-ASP-NET-Core-Introduction"><a href="#NET-Core-and-ASP-NET-Core-Introduction" class="headerlink" title=".NET Core and ASP.NET Core Introduction"></a>.NET Core and ASP.NET Core Introduction</h2><p>ASP.NET Core 是一個基於.NET Core全新的跨平台Framework, 類似於使用已知的.NET Framework的方式，可以開發如電腦桌面程式、網頁應用程式、IoT應用程式與手機行動程式等不同的應用，並且正常運行在Windows, Mac與Linux上。而他也是完全的Open-source的Framework</p>
<p><img src="overview.png" alt="overview"></p>
<ul>
<li><a href="https://github.com/aspnet/Home" target="_blank" rel="external">Offical ASP.NET Core Github</a></li>
<li><a href="https://github.com/aspnet/Home/wiki/Roadmap" target="_blank" rel="external">ASP.NET Core Schedule and Roadmap</a></li>
</ul>
<h3 id="NET-Standard"><a href="#NET-Standard" class="headerlink" title=".NET Standard"></a>.NET Standard</h3><p>而這邊順便提起會有一個與ASP.NET Core有點關係的.NET Standard，簡單來講就是ASP.NET Core<em>“未來”</em>要呼叫的底層應用庫。</p>
<p><img src="overview_standard.png" alt="overview_standard"></p>
<p>相較於先前那張一覽表，可以清楚地發現微軟想把目前三套不一樣的App Models運行在同一套底層應用庫，而非現在三套分別維護。而<em>“現在”</em>ASP.NET Core是跑在.NET Core上面的!</p>
<p>這對開發者來說是個好事，但不幸的是這還是有過渡期的</p>
<p><img src="standard_matrix.png" alt="standard_matrix"></p>
<p>目前發行的版本為.NET Standard 1.6，可以看到包含了.NET Framework 4.6.2與ASP.NET Core 1.0(目前最新的是1.1)，而2.0目標則是有下面的既定目標:</p>
<p><img src="standard_2.png" alt="standard_2"></p>
<h2 id="Goal-and-Subject"><a href="#Goal-and-Subject" class="headerlink" title="Goal and Subject"></a>Goal and Subject</h2><p>要會在接下來的幾天會介紹與分享如何享受ASP.NET Core帶來的跨平台好處與其相關的生態圈。</p>
<p>由於開發上我們會在 <em>macOS</em> + <em>visual studio code</em> 為主來開發，所以對VSCode有興趣的朋友歡迎參考另外的<a href="http://blackie1019.github.io/tags/VSCode/">VSCode分類</a></p>
<p>下面為目前計畫內容(內容會根據開發需求做調整)，過程當中主旨是希望實作一個具有存取DB資料的Web App並發佈至雲端使用:</p>
<h3 id="Developement"><a href="#Developement" class="headerlink" title="Developement"></a>Developement</h3><h4 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h4><ul>
<li><a href="http://blackie1019.github.io/2017/04/29/ASP-NET-and-ASP-NET-Core-NET-Framework-and-NET-core-and-NET-Standard/">ASP.NET and ASP.NET Core, .NET Framework and .NET core and .NET Standard</a></li>
<li><a href="https://blackie1019.github.io/2017/03/06/ASP-NET-Core-HelloWorld-on-Windows/">ASP.NET Core Hello World on Windows</a></li>
<li><a href="https://blackie1019.github.io/2017/03/27/ASP-NET-Core-nuget-can-t-restore-on-macOS/">ASP.NET Core Hello World on Mac</a></li>
<li><a href="https://blackie1019.github.io/2017/03/26/ASP-NET-Core-Play-with-Docker/">ASP.NET Core play with Docker</a></li>
<li><a href="https://blackie1019.github.io/2017/03/12/ASP-NET-Core-add-Git-Ignore-File/">ASP.NET Core add Git Ignore File</a></li>
<li><a href="ASP.NET Core play with Solution File">ASP.NET Core play with Solution File</a></li>
</ul>
<h4 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h4><ul>
<li>ASP.NET Core Middleware</li>
<li>ASP.NET Core Framework-Provided Services</li>
<li>ASP.NET Core IServiceCollection</li>
<li><a href="https://blackie1019.github.io/2017/03/30/ASP-NET-Core-using-Nuget-with-Visual-Studio-Code/">ASP.NET Core using Nuget with Visual Studio Code</a></li>
<li><a href="https://blackie1019.github.io/2017/04/05/ASP-NET-Core-play-with-MSTest/">ASP.NET Core play with MSTest</a></li>
<li><a href="http://blackie1019.github.io/2017/04/27/ASP-NET-Core-Create-New-Project-Template/">ASP.NET Core Create New Project Template</a></li>
</ul>
<h4 id="Data-and-Caching"><a href="#Data-and-Caching" class="headerlink" title="Data and Caching"></a>Data and Caching</h4><ul>
<li>ASP.NET Core Caching</li>
<li>ASP.NET Core Working with ADO.NET and MSSQL</li>
<li>ASP.NET Core Working with Dapper and MSSQL</li>
<li><a href="http://blackie1019.github.io/2017/04/16/ASP-NET-Core-play-with-Redis-and-StackExchange-Redis/">ASP.NET Core play with Redis and StackExchange.Redis</a></li>
<li><a href="https://blackie1019.github.io/2017/03/31/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver/">ASP.NET Core play with MongoDB and MongoDB .NET Driver</a></li>
<li><a href="https://blackie1019.github.io/2017/04/08/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Create-Delete/">ASP.NET Core play with MongoDB and MongoDB .NET Driver - Create</a></li>
<li><a href="ASP.NET Core play with MongoDB and MongoDB .NET Driver - Read">ASP.NET Core play with MongoDB and MongoDB .NET Driver - Read</a></li>
<li><a href="https://blackie1019.github.io/2017/04/10/ASP-NET-Core-play-with-MongoDB-and-MongoDB-NET-Driver-Update/">ASP.NET Core play with MongoDB and MongoDB .NET Driver - Update</a></li>
</ul>
<h4 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h4><ul>
<li><a href="http://blackie1019.github.io/2017/05/02/ASP-NET-Core-play-with-Log4Net/">ASP.NET Core play with log4net</a></li>
</ul>
<h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><ul>
<li>ASP.NET Core play with MVC</li>
<li>ASP.NET Core play with WebAPI</li>
<li><a href="https://blackie1019.github.io/2017/03/13/ASP-NET-core-play-with-dotnet-watch/">ASP.NET Core play with dotnet-watch</a></li>
<li>Hosting ASP.NET Core Web Application on Kestrel</li>
<li>Hosting ASP.NET Core Web Application on Kestrel with Reverse Proxy</li>
</ul>
<h4 id="Web-Advance"><a href="#Web-Advance" class="headerlink" title="Web Advance"></a>Web Advance</h4><ul>
<li><a href="https://blackie1019.github.io/2017/03/19/ASP-NET-Core-Set-Hosting-environment/">ASP.NET Core Set Hosting Environment</a></li>
<li><a href="https://blackie1019.github.io/2017/03/17/ASP-NET-Core-play-with-SPA/">ASP.NET Core play with SPA</a></li>
<li><a href="https://blackie1019.github.io/2017/03/28/ASP-NET-Core-SPA-Biobiolerplate-with-React-and-Redux/">ASP.NET Core SPA Biobiolerplate with React and Redux</a></li>
<li>ASP.NET Core Web Session with Redis</li>
<li>ASP.NET Core play with SignalR Core</li>
</ul>
<h4 id="Continuous-Delivery"><a href="#Continuous-Delivery" class="headerlink" title="Continuous Delivery"></a>Continuous Delivery</h4><ul>
<li><a href="https://blackie1019.github.io/2017/03/26/ASP-NET-Core-Play-with-Docker/">ASP.NET Core play with Docker</a></li>
<li>ASP.NET Core Build up with Jenkins</li>
<li>ASP.NET Core Build up with TravisCI</li>
</ul>
<h4 id="Hosting-and-Cloud"><a href="#Hosting-and-Cloud" class="headerlink" title="Hosting and Cloud"></a>Hosting and Cloud</h4><p>這邊都會以專欄的方式介紹，有興趣的朋友請到各專欄閱讀：</p>
<ul>
<li>ASP.NET Core Hosting on Cloud - Azure</li>
<li>ASP.NET Core Hosting on Cloud - AWS</li>
<li><a href="http://blackie1019.github.io/categories/Google-Cloud-Platform/">ASP.NET Core play with Google Cloud Platform</a></li>
</ul>
<h2 id="Project-Goal"><a href="#Project-Goal" class="headerlink" title="Project Goal"></a>Project Goal</h2><p>這邊為了對學習有個目標，我們就來明定過程當中要做出來的網站功能。 在這接下來的日子內我們將實作一個可以會員資料的app，可透過該平台查詢會員資料，並透過後臺來管理該系統的資料。</p>
<h3 id="前台會員系統"><a href="#前台會員系統" class="headerlink" title="前台會員系統"></a>前台會員系統</h3><ul>
<li>會員可以自行前台註冊</li>
<li>會員可以更改個人資料</li>
<li>會員可以瀏覽系統公告</li>
<li>會員可以在系統收到推播訊息</li>
</ul>
<h3 id="後台管理系統"><a href="#後台管理系統" class="headerlink" title="後台管理系統"></a>後台管理系統</h3><ul>
<li>需登入才可以進入系統</li>
<li>會員管理</li>
<li>公告管理</li>
<li>推播管理</li>
<li>系統管理</li>
</ul>
<p>過程當中會加減帶到系統功能的開發，最後希望在活動結束的時候這個demo site也能同時上線</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>過程中找到學習資料統一更新至此處以便閱讀</p>
<h3 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h3><ul>
<li><a href="https://weblog.west-wind.com/posts/2016/jun/13/aspnet-core-and-net-core-overview" target="_blank" rel="external">ASP.NET Core and .NET Core Overview</a></li>
<li><a href="https://www.slideshare.net/AlexThissen/overview-of-the-new-net-core-and-net-platform-standard" target="_blank" rel="external">Overview of the new .NET Core and .NET Platform Standard</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/" target="_blank" rel="external">Introduction to ASP.NET Core</a></li>
<li><p><a href="http://myget.org/gallery/aspnetcidev" target="_blank" rel="external">ASP.NET Core quick build “dev” branch feed</a> </p>
<p>  這是產品團隊所使用的 “開發版” 元件清單，也就是 GitHub 裡面 dev branch 的實際內容，你可以在這最快速的看到每個元件目前最新的版號與更新時間．</p>
</li>
<li><p><a href="http://dotnetthoughts.net/" target="_blank" rel="external">dotnetthoughts</a></p>
</li>
</ul>
<h3 id="Web-Host"><a href="#Web-Host" class="headerlink" title="Web Host"></a>Web Host</h3><ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel" target="_blank" rel="external">Kestrel</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/aspnet-core-module" target="_blank" rel="external">Kestrel with IIS</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction" target="_blank" rel="external">Kestrel with Nginx</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/publishing/apache-proxy" target="_blank" rel="external">Kestrel with Apache</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/weblistener" target="_blank" rel="external">WebListener</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/owin" target="_blank" rel="external">Open Web Interface for .NET (OWIN) guide</a></li>
</ul>
<h3 id="Third-Party-Library"><a href="#Third-Party-Library" class="headerlink" title="Third Party Library"></a>Third Party Library</h3><ul>
<li><a href="https://github.com/thangchung/awesome-dotnet-core" target="_blank" rel="external">Awesome .NET Core</a></li>
<li><a href="http://ef.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Entity Framework Core</a></li>
<li><a href="https://stackexchange.github.io/StackExchange.Redis/" target="_blank" rel="external">StackExchange.Redis</a></li>
<li><a href="https://github.com/mongodb/mongo-csharp-driver" target="_blank" rel="external">MongoDB .NET Driver</a></li>
<li><a href="http://logging.apache.org/log4net/" target="_blank" rel="external">log4net</a></li>
</ul>
<h3 id="Architecture-Template-Framework"><a href="#Architecture-Template-Framework" class="headerlink" title="Architecture/Template/Framework"></a>Architecture/Template/Framework</h3><ul>
<li><a href="https://github.com/aspnet/JavaScriptServices/tree/dev/src/Microsoft.AspNetCore.SpaServices#server-side-prerendering" target="_blank" rel="external">Microsoft.AspNetCore.SpaServices</a></li>
<li><a href="https://github.com/Squidex/squidex" target="_blank" rel="external">Squidex is an open source headless CMS</a></li>
<li><a href="https://aspnetzero.com/" target="_blank" rel="external">ASP.NET Zero</a></li>
<li><a href="https://github.com/aspnetboilerplate/aspnetboilerplate" target="_blank" rel="external">ASP.NET Boilerplate</a></li>
<li><a href="https://github.com/aspnetboilerplate/module-zero" target="_blank" rel="external">ASP.NET Boilerplate - Module Zero</a></li>
</ul>
<h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><ul>
<li><a href="http://blog.csdn.net/chinahuyong/article/details/46480995" target="_blank" rel="external">微軟良心之作——Visual Studio Code 開源免費跨平台代碼編輯器</a></li>
<li><a href="https://github.com/viatsko/awesome-vscode" target="_blank" rel="external">awesome-vscode</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="external">vscode-icons</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=spywhere.guides" target="_blank" rel="external">Guides</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore" target="_blank" rel="external">gitignore</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="external">GitLens</a></li>
</ul>
<h4 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h4><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp" target="_blank" rel="external">C#</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions" target="_blank" rel="external">C# Extensions</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jmrog.vscode-nuget-package-manager" target="_blank" rel="external">NuGet Package Manager</a></li>
</ul>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>內容看起很多但主要是把目前實作一個網站會用到的大部分技術都包裹在內，希望能將此技術實際用在真實的商場上而非只將此當作實驗性質的技術為目標。對此系列內容有興趣或是有任何建議歡迎留言與討論!讓我們一起學習吧!</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> Iron Man </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConcurrentQueue - Thread safe collections in .NET]]></title>
      <url>https://blackie1019.github.io/2016/11/08/ConcurrentQueue-Thread-safe-collections-in-NET/</url>
      <content type="html"><![CDATA[<p>介紹一下如何使用.Net Framework 4.0開始提供Thread-Safe的集合 - ConcurrentQueue</p>
<a id="more"></a>
<p>.NET Framework 4.0 新增System.Collections.Concurrent命名空間，此命名空間中提供多種Thread-Safe的集合，可以搭配TPL (Task Parallel Library) 平行處理的功能來進行運算，很適合用來撰寫多執行緒的應用程式。</p>
<h2 id="ConcurrentQueue-Class"><a href="#ConcurrentQueue-Class" class="headerlink" title="ConcurrentQueue Class"></a>ConcurrentQueue<t> Class</t></h2><p><a href="https://msdn.microsoft.com/zh-tw/library/dd267265(v=vs.110" target="_blank" rel="external">MSDN:ConcurrentQueue<t> class</t></a>.aspx)</p>
<blockquote>
<p>Represents a thread-safe first in-first out (FIFO) collection.</p>
</blockquote>
<p>簡單說 concurrent queue是一種設計給多執行同時讀寫時避免自行lock的資料結構。</p>
<p>使用這些執行緒安全(Thread-Safe)類別的好處是不用自行鎖定資源；不管並行CPU的數量有多少；也不用管多執行緒的<a href="https://zh.wikipedia.org/zh-tw/%E7%AB%B6%E7%88%AD%E5%8D%B1%E5%AE%B3" target="_blank" rel="external">Race Condition</a>，全交由System.Collections.Concurrent下的類別幫你處理。</p>
<p>這樣我們在開發上只要專心寫我們真的要運作的程式邏輯即可以。</p>
<h2 id="Official-Sample-Code"><a href="#Official-Sample-Code" class="headerlink" title="Official Sample Code"></a>Official Sample Code</h2><pre><code>// Construct a ConcurrentQueue.
var cq = new ConcurrentQueue&lt;int&gt;();

// Populate the queue.
for (int i = 0; i &lt; 10000; i++)
{
    cq.Enqueue(i);
}

// Peek at the first element.
int result;
if (!cq.TryPeek(out result))
{
    Console.WriteLine(&quot;CQ: TryPeek failed when it should have succeeded&quot;);
}
else if (result != 0)
{
    Console.WriteLine(&quot;CQ: Expected TryPeek result of 0, got {0}&quot;, result);
}

int outerSum = 0;
// An action to consume the ConcurrentQueue.
Action action = () =&gt;
{
    int localSum = 0;
    int localValue;
    while (cq.TryDequeue(out localValue)) localSum += localValue;
    Interlocked.Add(ref outerSum, localSum);
};

// Start 4 concurrent consuming actions.
Parallel.Invoke(action, action, action, action);
Console.WriteLine(&quot;Processor Count = {0}&quot;, Environment.ProcessorCount);

Console.WriteLine(&quot;outerSum = {0}, should be 49995000&quot;, outerSum);
Console.ReadLine();
</code></pre><p>從上面的範例我們可以知道，我們透過四個併行的action 去執行一次並加總每一個號碼的結果。</p>
<p>最後的結果總和應該為=&gt; (開始+結束)<em>總數/2 =&gt; (1+10000)</em>10000/2 =&gt; 49995000。</p>
<p>這邊另外附上CPU, Thread與Task之間的關係!</p>
<p><img src="threads.gif" alt="threads"></p>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net Framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 10 browser inline video play]]></title>
      <url>https://blackie1019.github.io/2016/10/06/iOS-10-browser-inline-video-play/</url>
      <content type="html"><![CDATA[<p>在上個月iOS 10發佈後更新了safari上面支援inline播放的功能，這邊來解釋一下該如何使用。</p>
<a id="more"></a>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>很多同時有iPad與iPhone的朋友在使用Safari時都覺得很奇怪，為什麼iPad的影片可以直接inline播放，但iPhone卻被強制只能在全螢幕觀看。</p>
<p>而在iOS 10的升級上面提供了<a href="https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html" target="_blank" rel="external">這項彈性</a>，這邊也總算提供跟iPad一樣的功能給iPhone了，只是你需要稍微對使用的HTML5 Video Tag上添加一個<strong><em>playsinline</em></strong>屬性即可。</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這邊介紹一下兩個做法來達到iOS可以支援inline play的作法</p>
<h3 id="Pure-HTML-Video-Tag"><a href="#Pure-HTML-Video-Tag" class="headerlink" title="Pure HTML Video Tag"></a>Pure HTML Video Tag</h3><p>可以用你的iOS 10裝置使用Safari看看這<a href="http://jsfiddle.net/ogm88ach/2/embedded/result/" target="_blank" rel="external">成果參考</a>。而當然iphone上的Chrome或是尚未支援的就會看到兩個影片都是先播放讓他放大後才能縮小繼續inline觀看。</p>
<p><strong>Code snippet:</strong></p>
<pre><code>&lt;body&gt;
    &lt;h2&gt;playsinline&lt;/h2&gt;
    &lt;video width=&quot;320&quot; height=&quot;240&quot; controls autoplay loop muted playsinline&gt;
        &lt;source src=&quot;http://www.w3schools.com/TAGS/movie.mp4&quot;  type=&quot;video/mp4&quot; /&gt;
    &lt;/video&gt;
    &lt;br/&gt;
    &lt;h2&gt;Without playsinline&lt;/h2&gt;
    &lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;
        &lt;source src=&quot;http://www.w3schools.com/TAGS/movie.mp4&quot;  type=&quot;video/mp4&quot; /&gt;
    &lt;/video&gt;
&lt;/body&gt;
</code></pre><h3 id="JavaScript-Soluion"><a href="#JavaScript-Soluion" class="headerlink" title="JavaScript Soluion"></a>JavaScript Soluion</h3><p>其實有些人可能知道iOS 8 - iOS 9.3有另外一個JS的解決辦法<br><a href="https://github.com/bfred-it/iphone-inline-video" target="_blank" rel="external">iphone-inline-video</a>。 如果要廣大的支援到iOS的版本可能考慮這樣的作法會較佳!</p>
<h3 id="Native-APP"><a href="#Native-APP" class="headerlink" title="Native APP"></a>Native APP</h3><p>除了Web外，如果你是開發APP的朋友也要記得做一些修改來支援HTML5的Video inline屬性</p>
<h4 id="iOS-UIWebView"><a href="#iOS-UIWebView" class="headerlink" title="iOS UIWebView"></a>iOS UIWebView</h4><ol>
<li>設定<strong><em>allowsInlineMediaPlayback</em></strong>屬性</li>
<li>添加<strong><em>webkit-playsinline</em></strong>屬性至video tag內</li>
<li>如果要支援autoplay則需要在設定<strong><em>mediaPlaybackRequiresUserAction</em></strong>屬性</li>
</ol>
<h4 id="Android-WebView"><a href="#Android-WebView" class="headerlink" title="Android WebView"></a>Android WebView</h4><ol>
<li>在 AndroidManifest.xml中啟用 hardware acceleration (add <strong><em>android:hardwareAccelerated=”true”</em></strong>) </li>
<li>設定WebChromeClient在你的 WebView當中.</li>
</ol>
]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Safari </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[No Access-Control-Allow-Origin header is present on the requested resource]]></title>
      <url>https://blackie1019.github.io/2016/10/04/No-Access-Control-Allow-Origin-header-is-present-on-the-requested-resource/</url>
      <content type="html"><![CDATA[<p>解決Chrome在本機開發使用localhost時遇到Access-Control-Allow-Origin的問題</p>
<a id="more"></a>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>一般來說browser都會阻擋跨網域的XMLHttpRequest請求而造成情求發生錯誤，主要是基於安全考量。</p>
<p>下面就是發生問題時的畫面</p>
<p><img src="ori.png" alt="錯誤畫面"></p>
<h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>Chrome會阻擋CORS的原因可以看一下<a href="https://developer.chrome.com/extensions/xhr" target="_blank" rel="external">官方說明</a>，節錄重點部分如下:</p>
<blockquote>
<p>Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they’re limited by the same origin policy. Extensions aren’t so limited. An extension can talk to remote servers outside of its origin, as long as it first requests cross-origin permissions.</p>
</blockquote>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><a href="https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US" target="_blank" rel="external">原文</a>，依樣節錄重點:</p>
<blockquote>
<p>This is not a fix for production or when application has to be shown to the client, this is only helpful when UI and Backend development are on different servers and in production they are actually on same server. For example: While developing UI for any application if there is a need to test it locally pointing it to backend server, in that scenario this is the perfect fix. For production fix, CORS headers has to be added to the backend server to allow cross origin access.</p>
</blockquote>
<p>所以最簡單的方法就是就增加extension去允許CORS.<br>例如以下解法:</p>
<h3 id="NodeJS-Express"><a href="#NodeJS-Express" class="headerlink" title="NodeJS+Express"></a><a href="http://enable-cors.org/server_expressjs.html" target="_blank" rel="external">NodeJS+Express</a></h3><pre><code>app.use(function(req, res, next) {
  res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
  res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;);
  next();
});

app.get(&apos;/&apos;, function(req, res, next) {
  // Handle the get for this route
});

app.post(&apos;/&apos;, function(req, res, next) {
 // Handle the post for this route
});
</code></pre><h3 id="IIS7"><a href="#IIS7" class="headerlink" title="IIS7"></a><a href="http://enable-cors.org/server_iis7.html" target="_blank" rel="external">IIS7</a></h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;configuration&gt;
 &lt;system.webServer&gt;
   &lt;httpProtocol&gt;
     &lt;customHeaders&gt;
       &lt;add name=&quot;Access-Control-Allow-Origin&quot; value=&quot;*&quot; /&gt;
     &lt;/customHeaders&gt;
   &lt;/httpProtocol&gt;
 &lt;/system.webServer&gt;
&lt;/configuration&gt;
</code></pre><p>對於不同語言的完整解法有興趣的可以參考<a href="http://enable-cors.org/index.html" target="_blank" rel="external">enable cross-origin resource sharing</a>.</p>
<p>或是直接用下列指令另開一個新的Chrome視窗也可以快速解決你的問題.</p>
<pre><code>chrome.exe --user-data-dir=&quot;C:/Chrome dev session&quot; --disable-web-security
</code></pre><p>開啟來後就可以正常執行了</p>
<p><img src="success.png" alt="成功畫面"></p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> CORS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HttpWebRequest Timeout and ReadWriteTimeout]]></title>
      <url>https://blackie1019.github.io/2016/08/22/HttpWebRequest-Timeout-and-ReadWriteTimeout/</url>
      <content type="html"><![CDATA[<p>分享如何正確的使用在Asp.Net中的HttpWebRequest兩個Timeout，Timeout與ReadWriteTimeout。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在開始前要先談一下TCP datagrams 與 Chunked transfer encoding。</p>
<h3 id="TCP-datagrams"><a href="#TCP-datagrams" class="headerlink" title="TCP datagrams"></a>TCP datagrams</h3><p><img src="tcp.png" alt="tcp"></p>
<p>使用TCP協議來傳輸數據的HTTP是Web服務器和客戶端使用的特殊協議。而TCP在傳輸中會將封包拆成一份IP header與多份TCP segment(TCP header + TCP data)。</p>
<p><img src="TCP_segment.png" alt="TCP+IPData"></p>
<p><img src="TCP_IPData.png" alt="TCP+IPData"></p>
<p>簡單來看就是一個header來告訴你連線位置與請求狀況後，會切分成多份封包依序傳輸，當封包都接收完才算完成傳輸，並將傳輸內容整理成真實的檔案。</p>
<h3 id="Chunked-transfer-encoding"><a href="#Chunked-transfer-encoding" class="headerlink" title="Chunked transfer encoding"></a>Chunked transfer encoding</h3><p>分塊傳輸編碼（Chunked transfer encoding）是HTTP中的一種數據傳輸機制，允許HTTP由網頁伺服器發送給客戶端應用的數據可以分成多個部分。分塊傳輸編碼只在HTTP協議1.1版本（HTTP/1.1）中提供。</p>
<p>通常，HTTP應答消息中發送的數據是整個發送的，Content-Length消息頭欄位表示數據的長度。數據的長度很重要，因為客戶端需要知道哪裡是應答消息的結束，以及後續應答消息的開始。</p>
<p>也因為有此機制導致我們在寫程式時需要用一個stream來當緩衝接收所收到資料並把他讀出。</p>
<p><img src="chunk_transfer.png" alt="Chunked flow"></p>
<h3 id="HttpWebRequest-Timeout"><a href="#HttpWebRequest-Timeout" class="headerlink" title="HttpWebRequest.Timeout"></a>HttpWebRequest.Timeout</h3><p>The time before which the server has to accept the client’s request. Note that this doesn’t include the DNS resolution time, which is managed by the ServicePointManager.</p>
<h3 id="HttpWebRequest-ReadWriteTimeout"><a href="#HttpWebRequest-ReadWriteTimeout" class="headerlink" title="HttpWebRequest.ReadWriteTimeout"></a>HttpWebRequest.ReadWriteTimeout</h3><p>The time before which the client has to receive the entire body of the response from the server. Note that this timeout starts only after the server accepts the request.</p>
<p><strong><em>Default value is 300,000 milliseconds (5 minutes).</em></strong></p>
<p>而無論TCP datagrams或是分塊傳輸編碼的機制將導致我們需要ReadWriteTimeout來判斷是否寫入每一個chunk資料流讀寫都在時間內。</p>
<h2 id="Use-Scenario"><a href="#Use-Scenario" class="headerlink" title="Use Scenario"></a>Use Scenario</h2><h3 id="使用HttpWebRequest-Timeout"><a href="#使用HttpWebRequest-Timeout" class="headerlink" title="使用HttpWebRequest.Timeout"></a>使用HttpWebRequest.Timeout</h3><ul>
<li>判斷Connection是否在指定時間內建立連線</li>
<li>每段封包建立連線限定時間</li>
</ul>
<h3 id="使用HttpWebRequest-ReadWriteTimeout"><a href="#使用HttpWebRequest-ReadWriteTimeout" class="headerlink" title="使用HttpWebRequest.ReadWriteTimeout"></a>使用HttpWebRequest.ReadWriteTimeout</h3><ul>
<li>指定時間內做完single chunk資料流(data streaming)的讀寫</li>
</ul>
<p>簡單來講當我們需要強制在一段時間內做完一個使用HttpWebRequest的回應用TimeoutStream會較佳。</p>
<h2 id="Misconceptions"><a href="#Misconceptions" class="headerlink" title="Misconceptions"></a>Misconceptions</h2><p>但這邊要聲明如果用HttpWebRequest.ReadWriteTimeout則是錯誤的觀念。要達到在限制的下載時間內完成下載否則就拋出例外錯誤的話是需要自己去實作該功能的。 這邊提供一個範例來說明該如何實作:</p>
<p>請求遠端的一個檔案，這邊用<a href="http://engineerhammad.blogspot.tw/2015/04/Download-Test-Files.html" target="_blank" rel="external"><br>DOWNLOAD<br>Download Test Files | 100Kb, 1Mb, 10Mb, 100Mb, 1Gb, 5Gb and 10 Gb.</a>的10MB檔案做範例:</p>
<p><img src="speed.png" alt="speed"></p>
<p>這邊建置一個MVC空的Action來測試，而執行的範例程式碼如下:</p>
<ul>
<li>設定HttpWebRequest.Timeout 確認連線建立不超過3秒</li>
<li>設定HttpWebRequest.ReadWriteTimeout 確認3秒內做完每一個chunk的讀寫</li>
<li>使用自行建置的TimeoutStream來控制整個下載的過程不超過10秒</li>
</ul>
<pre><code>public ActionResult Test2Speed()
{
    var result = new JObject();
    var request = (HttpWebRequest)WebRequest.Create(&quot;http://speedtest.ftp.otenet.gr/files/test10Mb.db&quot;);
    request.Timeout = 3 * 1000;
    request.ReadWriteTimeout = 3 * 1000;
    try
    {

        using (var pageResponse = request.GetResponse())
        {
            var stream = pageResponse.GetResponseStream();
            using (var myStreamReader = new StreamReader(new TimeOutStream(stream, 10 * 1000), Encoding.GetEncoding(&quot;UTF-8&quot;)))
            {
                var data = myStreamReader.ReadToEnd();
                result.Add(&quot;content&quot;, &quot;success&quot;);
            }
        }
    }
    catch (TimeOutException e)
    {
        result.Add(&quot;content&quot;, e.Message);
    }
    catch (Exception e)
    {
        result.Add(&quot;content&quot;, e.Message);
        result.Add(&quot;stack&quot;, e.StackTrace);
    }
    return this.Content(JsonConvert.SerializeObject(result), &quot;application/json&quot;);
}
</code></pre><p>這邊建置一個TimeOutStream繼承Stream，並設定一個計時器，在逾時時會丟出例外(TimeOutException)</p>
<pre><code>public class TimeOutStream : Stream
{
    private Stream inner;
    private System.Timers.Timer timer;

    private Exception ex;

    public TimeOutStream(Stream inner, int fetchTimeoutInMs)
    {
        this.timer = new System.Timers.Timer();
        this.timer.Enabled = true;
        this.timer.AutoReset = false;
        this.timer.Interval = fetchTimeoutInMs;
        this.timer.Elapsed += this.TimeOutEvent;
        this.inner = inner;
        this.timer.Start();
    }

    public override void Flush()
    {
        this.inner.Flush();
    }

    public override long Seek(long offset, SeekOrigin origin)
    {
        this.ThrowException();
        return this.inner.Seek(offset, origin);
    }

    public override void SetLength(long value)
    {
        this.inner.SetLength(value);
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        this.ThrowException();
        var result = inner.Read(buffer, offset, count);

        /* HERE I COULD CALL A CUSTOM EVENT */
        return result;
    }

    public override void Write(byte[] buffer, int offset, int count)
    {
        this.ThrowException();
        this.inner.Write(buffer,offset,count);
    }

    public override bool CanRead {
        get
        {
            return this.inner.CanRead;
        }
    }

    public override bool CanSeek
    {
        get
        {
            return this.inner.CanSeek;
        }
    }

    public override bool CanWrite
    {
        get
        {
            return this.inner.CanWrite;
        }
    }

    public override long Length
    {
        get
        {
            return this.inner.Length;
        }
    }

    public override long Position
    {
        get
        {
            return this.inner.Position;
        }

        set
        {
            this.inner.Position = value;
        }
    }

    private void TimeOutEvent(object sender, ElapsedEventArgs eArgs)
    {
        this.ex = new TimeOutException(&quot;Timeout exception&quot;);
        this.timer.Stop();
    }

    private void ThrowException()
    {
        if (this.ex!=null)
        {
            throw this.ex;
        }
    }
}
</code></pre><p>這邊自行定義TimeOutException</p>
<pre><code>public class TimeOutException : Exception
{
    public TimeOutException()
    {
    }

    public TimeOutException(string message)
        : base(message)
    {
    }

    public TimeOutException(string message, Exception inner)
        : base(message, inner)
    {
    }
}
</code></pre><p>結果如下:</p>
<p><img src="Exception.png" alt="exception"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.google.com.tw/search?q=TCP/IP+HTTP&amp;espv=2&amp;biw=1745&amp;bih=828&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjno9vGkdXOAhUBu5QKHckZDO0Q_AUIBigB&amp;dpr=1.1#imgrc=3zlIHfpxOE1UGM%3A" target="_blank" rel="external">TCP/IP, Winsock, and WinInet</a></li>
<li><a href="http://stackoverflow.com/questions/7250983/httpwebrequests-timeout-and-readwritetimeout-what-do-these-mean-for-the-unde" target="_blank" rel="external">HttpWebRequest’s Timeout and ReadWriteTimeout — What do these mean for the underlying TCP connection?</a></li>
<li><a href="http://stackoverflow.com/questions/1410602/how-do-set-a-timeout-for-a-method/1533975#1533975" target="_blank" rel="external">how do set a timeout for a method</a></li>
<li><a href="http://lnbogen.com/2008/10/14/httpwebrequest-avoiding-the-pitfalls/" target="_blank" rel="external">HttpWebRequest, avoiding the pitfalls</a></li>
<li><a href="https://www.ibm.com/support/knowledgecenter/SSPREK_6.1.0/com.ibm.itame.doc_6.1/am61_webseal_admin91.htm" target="_blank" rel="external">HTTP Fragment</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank" rel="external">分塊傳輸編碼</a></li>
<li><a href="https://doc.micrium.com/display/httpref/Chunked+Transfer+Encoding" target="_blank" rel="external">Chunked Transfer Encoding</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[reCAPTCHA for .NET]]></title>
      <url>https://blackie1019.github.io/2016/08/22/reCAPTCHA-for-NET/</url>
      <content type="html"><![CDATA[<p>reCAPTCHA計畫原本是由卡內基美濃大學所發展的系統，後來普遍被發展到防止非人為行為的自動程式上，包含Facebook與Twitter都有使用。此篇跟大家分享如何在Asp.Net上使用<br>reCAPTCHA for .NET來實現該功能。</p>
<a id="more"></a>
<h2 id="運作方式"><a href="#運作方式" class="headerlink" title="運作方式"></a>運作方式</h2><blockquote>
<p>為了驗證人類所輸入的文字是正確的，而不是隨意輸入，有兩個字會被顯示出來；一個是光學文字辨識軟體無法辨別的字，另一個是一個已經知道正確答案的字。如果使用者正確的回答出已知正確答案的字，那麼就假設所輸入的另一個光學辨識軟體無法辨識的字是認真的檢視後被輸入而非隨便輸入。</p>
</blockquote>
<p>官方解說可以參考這部影片:</p>
<iframe width="560" height="315" src="http://www.youtube.com/embed/jwslDn3ImM0" frameborder="0" allowfullscreen></iframe>

<p>架構流程:</p>
<p><img src="Recaptcha-api-diagram.gif" alt="流程"></p>
<h2 id="Google-reCAPTCHA-演進"><a href="#Google-reCAPTCHA-演進" class="headerlink" title="Google reCAPTCHA 演進"></a>Google reCAPTCHA 演進</h2><p>其實目前Google的reCAPTCHA已經經過三次的演進，改變的目的都是降低人為辨識失敗率跟加速過程，避免在防止機器人的時候讓真的操作者使用者經驗更差。</p>
<h3 id="第一代"><a href="#第一代" class="headerlink" title="第一代"></a>第一代</h3><p>reCAPTCHA問題的所需的文字圖片，首先會由reCAPTCHA計畫網站利用Javascript API取得[6]，在終端使用者回答問題後，伺服器再連回reCAPTCHA計畫的主機驗證使用者的輸入是否正確。</p>
<p><img src="reCaptcha_1_o.jpg" alt="g1_ori"></p>
<p>2012年起，reCAPTCHA除了原來的文字掃描圖片外，也採用Google街景拍攝的門牌號碼相片</p>
<p><img src="reCaptcha_1.jpg" alt="g1"></p>
<h3 id="第二代"><a href="#第二代" class="headerlink" title="第二代"></a>第二代</h3><p>更新後的版本改用圖片來取代文字辨識率較差的問題，但有時圖片也不是真的很容易辨識..因為常常會有模擬兩可的答案…(畢竟不是自己拍的圖片呀)</p>
<p><img src="reCaptcha_2.jpg" alt="g2"></p>
<h3 id="第三代"><a href="#第三代" class="headerlink" title="第三代"></a>第三代</h3><p>最新的版本在2014年底推出，這版只要勾選I’m not a rebot即可!是不是更簡單了</p>
<p><img src="reCaptcha_3.png" alt="g3"></p>
<h2 id="reCAPTCHA-for-NET"><a href="#reCAPTCHA-for-NET" class="headerlink" title="reCAPTCHA for .NET"></a>reCAPTCHA for .NET</h2><p><a href="https://github.com/tanveery/recaptcha-net" target="_blank" rel="external">recaptcha-net</a>，這是Nuget上面的一個專案可讓.Net 同時支援Google reCAPTCHA Version 1與Version 2。設定與使用都相當簡單</p>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul>
<li>Render recaptcha control (HTML) with appropriate options for pre-defined themes and culture (language).</li>
<li>Verify user’s answer to recaptcha’s challenge.</li>
<li>Supports ASP.NET Web Forms and ASP.NET MVC.</li>
<li>Supprts reCAPTCHA version 1 and version 2 in a seamless fashion.</li>
<li>One of the most well-documented reCAPTCHA libraries in the open source community.</li>
</ul>
<h3 id="Creating-a-reCAPTCHA-API-Key"><a href="#Creating-a-reCAPTCHA-API-Key" class="headerlink" title="Creating a reCAPTCHA API Key"></a>Creating a reCAPTCHA API Key</h3><ul>
<li>前往<a href="https://www.google.com/recaptcha" target="_blank" rel="external">Google’s reCAPTCHA</a></li>
<li>點選Get reCAPTCHA. 此時會需要你登入Google帳號綁定該服務.</li>
<li>選擇註冊一個新網站(domain)並輸入一個識別名稱(tag/label)給該網站.</li>
<li>新增成功後會獲得一組 <em>Site Key</em> 與 <em>Secret Key</em>，這部分等等要被我們放進網站的 web.config 中設定.</li>
</ul>
<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ol>
<li><p>安裝reCAPTCHA Nuget Package</p>
<pre><code>Install-Package RecaptchaNet
</code></pre></li>
<li><p>將 reCAPTCHA Key 放入 Web.config File</p>
<p> 這邊範例放的是Version 2，如果要改成Version 1只需改成1就好</p>
<pre><code>&lt;appSettings&gt;
    &lt;add key=&quot;recaptchaPublicKey&quot; value=&quot;Your site key&quot; /&gt;
    &lt;add key=&quot;recaptchaPrivateKey&quot; value=&quot;Your secret key&quot; /&gt;
    &lt;add key=&quot;recaptchaApiVersion&quot; value=&quot;2&quot; /&gt;
&lt;/appSettings&gt;
</code></pre></li>
</ol>
<h3 id="Added-Code"><a href="#Added-Code" class="headerlink" title="Added Code"></a>Added Code</h3><p>這邊官方提供兩個版本:WebForm與Web MVC(目前無WebAPI版本)。這邊因為不推廣WebForm了所以只講Web MVC的使用，如下:</p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>這邊簡單定義一個Model作為稍後傳入的資料結構，這邊設定為[Required]則表示稍後後段會驗證該參數是否有值，如果沒有給值則會視同表單驗證失敗</p>
<pre><code>namespace BKPlatform.App.MemberSite.Site.Models
{
    using System.ComponentModel.DataAnnotations;

    public class MemberRegistrationModel
    {
        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        public string MemberCode { get; set; }

    }
}
</code></pre><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>使用上需載入Namespace</p>
<pre><code>using Recaptcha.Web;
using Recaptcha.Web.Mvc;
</code></pre><p>然後加入新的Routing Action - RegisterMember</p>
<pre><code>public ActionResult RegisterMember([FromBody] MemberRegistrationModel model)
{
    var recaptchaHelper = this.GetRecaptchaVerificationHelper();
    if (String.IsNullOrEmpty(recaptchaHelper.Response))
    {
        this.ModelState.AddModelError(&quot;&quot;, &quot;Captcha answer cannot be empty.&quot;);
        return View(model);
    }

    var recaptchaResult = recaptchaHelper.VerifyRecaptchaResponse();

    if (recaptchaResult != RecaptchaVerificationResult.Success)
    {
        this.ModelState.AddModelError(&quot;&quot;, &quot;Incorrect captcha answer.&quot;);
        return View(model);
    }

    if (this.ModelState.IsValid)
    {
        return RedirectToAction(&quot;Index&quot;);
    }

    return View(model);
}
</code></pre><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>這邊在頁面只要透過官方寫好的Helper簡單的載入即可，記得要先載入google recaptcha的JavaScript API(這邊使用Layout客製的headScripts區域在head載入)</p>
<pre><code>@model BKPlatform.App.MemberSite.Site.Models.MemberRegistrationModel
@using Recaptcha.Web.Mvc
@{
    Layout = &quot;~/Views/Shared/_Layout.cshtml&quot;;
}

@section headScripts{
    &lt;script src=&apos;https://www.google.com/recaptcha/api.js&apos;&gt;&lt;/script&gt;
}

&lt;h2&gt;User Registration Form&lt;/h2&gt;

@using (Html.BeginForm())
{
    @Html.ValidationSummary()
    &lt;p&gt;
        &lt;label&gt;Member Code:&lt;/label&gt;
        @Html.PasswordFor(m =&gt; m.MemberCode)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;First name:&lt;/label&gt;
        @Html.TextBoxFor(m =&gt; m.FirstName)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;Last name:&lt;/label&gt;
        @Html.TextBoxFor(m =&gt; m.LastName)
    &lt;/p&gt;

    @Html.Recaptcha(theme: Recaptcha.Web.RecaptchaTheme.Clean);

    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
}
</code></pre><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p>這邊就是我們完成的畫面</p>
<p><img src="result.gif" alt="result"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/ReCAPTCHA" target="_blank" rel="external">ReCAPTCHA</a></li>
<li><a href="http://www.ithome.com.tw/news/92757" target="_blank" rel="external">Google釋出新版reCAPTCHA機制，只要點「我不是機器人」！</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Web MVC/WebApi </tag>
            
            <tag> CAPTCHA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SignalR tuning experience]]></title>
      <url>https://blackie1019.github.io/2016/08/21/signalr-tuning-experience/</url>
      <content type="html"><![CDATA[<p>整理使用SignalR的一些經驗與調校內容</p>
<a id="more"></a>
<p>使用SignalR作為公司處理client-server的訊息傳遞的功能已經好一陣子，這邊整理一下相關知識。</p>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="Web-Browser-Support"><a href="#Web-Browser-Support" class="headerlink" title="Web Browser Support"></a>Web Browser Support</h3><p>Applications that use SignalR in browsers must use jQuery version 1.6.4 or major later versions (such as 1.7.2, 1.8.2, or 1.9.1).</p>
<p>SignalR can be used in the following browsers:</p>
<ul>
<li>Microsoft Internet Explorer versions 8, 9, 10, and 11. Modern, Desktop, and Mobile versions are supported.</li>
<li>Mozilla Firefox: current version - 1, both Windows and Mac versions.</li>
<li>Google Chrome: current version - 1, both Windows and Mac versions.</li>
<li>Safari: current version - 1, both Mac and iOS versions.</li>
<li>Opera: current version - 1, Windows only.</li>
<li>Android browser</li>
</ul>
<h3 id="Application-Support"><a href="#Application-Support" class="headerlink" title="Application Support"></a>Application Support</h3><p>SignalR can be hosted in standalone Windows client or Silverlight applications. Windows Desktop and Silverlight SignalR applications</p>
<ul>
<li>Applications using .NET 4 are supported on Windows XP SP3 or later.</li>
<li>Applications using .NET Framework 4.5 are supported on Windows Vista or later.</li>
</ul>
<h3 id="Transport-Medium"><a href="#Transport-Medium" class="headerlink" title="Transport Medium"></a>Transport Medium</h3><p>SignalR提供四種傳輸方式，依據瀏覽器的支援你可以自行設定(預設四種都支援，但會有先後順序的使用，Websocket最優先!)</p>
<p><img src="type.png" alt="type"></p>
<ul>
<li><p>HTML 5 transports</p>
<ul>
<li>WebSocket</li>
<li>Server-Sent Events</li>
</ul>
</li>
<li><p>Comet transports</p>
<ul>
<li>Forever Frame</li>
<li>Long Polling</li>
</ul>
</li>
</ul>
<p><img src="support.png" alt="support"></p>
<h3 id="Config-Transport"><a href="#Config-Transport" class="headerlink" title="Config Transport"></a>Config Transport</h3><p>我們可以手動設定自己要的Transport</p>
<pre><code>$.connection.hub.start({ transport: [&apos;longPolling&apos;] });
</code></pre><h3 id="Logging-and-Monitoring-Transports-in-SignalR"><a href="#Logging-and-Monitoring-Transports-in-SignalR" class="headerlink" title="Logging and Monitoring Transports in SignalR"></a>Logging and Monitoring Transports in SignalR</h3><p>SignlaR本身可以開啟Logging機制，只要透過簡單的設定打開即可</p>
<pre><code>$.connection.hub.logging = true;
</code></pre><h2 id="Tuning-Experience"><a href="#Tuning-Experience" class="headerlink" title="Tuning Experience"></a>Tuning Experience</h2><p>以下是正式環境上遇到的問題跟處理的方式:</p>
<ul>
<li>Reducing message size. All messaging solution concern size, smaller is better.</li>
<li><p>Use latest SignalR to solved connection increase issue.</p>
<p>  To fix known knowing issue of early version, suggest to upgrade signalR to latest stable version. *SignalR 2 is only supported on .NET Famework 4.5 or higher version.</p>
<ul>
<li><a href="https://github.com/SignalR/SignalR/issues/1790" target="_blank" rel="external">https://github.com/SignalR/SignalR/issues/1790</a></li>
<li><a href="https://github.com/SignalR/SignalR/issues/2950" target="_blank" rel="external">https://github.com/SignalR/SignalR/issues/2950</a></li>
</ul>
</li>
<li><p>Update windows service pack for SinglaR connection issue(Window Server 2012 以上不需要特別安裝)</p>
<p>  <a href="https://support.microsoft.com/en-us/kb/980368" target="_blank" rel="external">Update for Windows Server 2008/2008 R2 with IIS 7/7.5 endless connection with a period</a></p>
</li>
<li><p>Web request optimized</p>
<ul>
<li>Move static file to CDN(JS, CSS, png, audio file and etc…)</li>
<li>Concatenate request to less request(only one request to retrieve data is best)</li>
</ul>
</li>
<li><p>SignalR web socket issue, caused Network setting limitation.</p>
<p>  Found SignalR using unsupported transport type and create a lot of connection.</p>
<ul>
<li><p>Short-term: To turn off web socket from SignalR, pass the transport type(longPolling, foreverFrame, serverSentEvents, webSocket) you want.</p>
<pre><code>$.connection.hub.start({ transport: [&apos;longPolling&apos;] });
</code></pre></li>
<li><p>Long-term: Using sub-domain and update system architecture to support SignalR with Web Socket Issue.</p>
</li>
</ul>
</li>
<li><p>Avoid unobserved exceptions stop application due to too many connection from SignalR in global.asax.cs</p>
<pre><code>protected void Application_Start()
{

    this.RegisterUnobservedTaskException();
}

private void RegisterUnobservedTaskException()
{
    TaskScheduler.UnobservedTaskException += (s, e) =&gt;
    {
        e.SetObserved();
        e.Exception.Handle(
            t =&gt;
            {
                this.log.Exception(string.Format(&quot;UnobservedTaskException happen on Message={0}&quot;, e.Exception.Message));
                return true;
            });
    };
}
</code></pre></li>
</ul>
<h2 id="SignalR-ScaleOut-Design"><a href="#SignalR-ScaleOut-Design" class="headerlink" title="SignalR ScaleOut Design"></a>SignalR ScaleOut Design</h2><p>If still have connection issue, review web application design for SignalR scaleout design.</p>
<p><a href="http://www.asp.net/signalr/overview/performance/scaleout-in-signalr" target="_blank" rel="external">ScaleOut In SignalR</a></p>
<h2 id="Performance-Tuning-with-IIS-and-net-framework"><a href="#Performance-Tuning-with-IIS-and-net-framework" class="headerlink" title="Performance Tuning with IIS and .net framework"></a>Performance Tuning with IIS and .net framework</h2><p>Sharing the tuning guide of official post.</p>
<p><a href="https://github.com/SignalR/SignalR/wiki/Performance" target="_blank" rel="external">Performance Tuning SignalR</a></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.asp.net/signalr/overview/getting-started/introduction-to-signalr" target="_blank" rel="external">Introduction to SignalR</a></li>
<li><a href="http://dailydotnettips.com/2014/03/20/identifying-the-signalr-transport-medium/" target="_blank" rel="external">Identifying the SignalR Transport Medium</a></li>
<li><a href="http://www.asp.net/signalr/overview/getting-started/supported-platforms" target="_blank" rel="external">SignalR Supported Platforms</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> SignalR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Travis CI build daily with nightli.es]]></title>
      <url>https://blackie1019.github.io/2016/08/20/Travis-CI-build-daily-with-nightli-es/</url>
      <content type="html"><![CDATA[<p>協助Travis CI建立每24小時至少建置一次的行為，確保外部套件或內部程序可正常被建置</p>
<a id="more"></a>
<p>在開發時難免會有用到別人套件的情況，而使用Travis CI雖然可以幫我們在push code到remote repository時，即時建立專案編譯與發佈至對應的位置，但如果我們有遇到使用的Library會不定時建置同一版本時你就需要<a href="https://nightli.es/" target="_blank" rel="external">nightli.es</a>協助，可以每天至少建置一次的Travis CI排程。</p>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>使用上很簡單只要上<a href="https://nightli.es/" target="_blank" rel="external">nightli.es</a>後登入你的github帳號並設定要建立daily build的專案，將他turn on即可。</p>
<p><img src="1.png" alt="turn on"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本部落格是用Hexo來建立的，而Hexo在建立文章時可以加入date來指定該文章的時間。但卻點是如果要將該篇文章正常的被建置至首頁節錄顯示或是新增至routing則一定要經過編譯與重新發佈。</p>
<p><img src="2.png" alt="date"></p>
<p>此時，就是需要nightli.es協助我們建立每天執行一次daily build來確保每天的文章都正常地顯示在首頁上。</p>
<p>而此篇文章也是前一天預先寫好跟透過daily build來發佈的歐! 有需求的朋友快點來嘗試看看吧。</p>
]]></content>
      
        <categories>
            
            <category> Continuous Integration </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Travis CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gulp run-sequence - Run a Series of Dependent Gulp Tasks in Order]]></title>
      <url>https://blackie1019.github.io/2016/08/19/gulp-run-sequence/</url>
      <content type="html"><![CDATA[<p>讓Gulp可以建立有相依性的系列工作，協助我們解決在有必要依序執行的工作上做更彈性的設置</p>
<a id="more"></a>
<p>當我們在使用Gulp預設的相依性是單一且十分單純的。當我們今天有較為複雜的使用情形就會不堪使用。 </p>
<blockquote>
<p>Runs a sequence of gulp tasks in the specified order. This function is designed to solve the situation where you have defined run-order, but choose not to or cannot use dependencies.</p>
</blockquote>
<p>而<a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="external">run-sequence</a>則是專門解決這樣情形的gulp套件</p>
<h2 id="run-sequence-基本操作"><a href="#run-sequence-基本操作" class="headerlink" title="run-sequence 基本操作"></a>run-sequence 基本操作</h2><p>開始正式使用前先來看一下基本配置</p>
<h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><pre><code>npm install --save-dev run-sequence
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>以下是官方簡單的介紹與載入方式</p>
<p>This will run in this order: </p>
<ol>
<li>build-clean </li>
<li>build-scripts and build-styles in parallel </li>
<li>build-html </li>
<li>Finally call the callback function </li>
</ol>
<p>代碼:</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var runSequence = require(&apos;run-sequence&apos;);
var del = require(&apos;del&apos;);
var fs = require(&apos;fs&apos;);

gulp.task(&apos;build&apos;, function(callback) {
  runSequence(&apos;build-clean&apos;,
              [&apos;build-scripts&apos;, &apos;build-styles&apos;],
              &apos;build-html&apos;,
              callback);
});

gulp.task(&apos;build-clean&apos;, function() {
    // Return the Promise from del() 
    return del([BUILD_DIRECTORY]);
//  ^^^^^^ 
//   This is the key here, to make sure asynchronous tasks are done! 
});

gulp.task(&apos;build-scripts&apos;, function() {
    // Return the stream from gulp 
    return gulp.src(SCRIPTS_SRC).pipe(...)...
//  ^^^^^^ 
//   This is the key here, to make sure tasks run to completion! 
});

gulp.task(&apos;callback-example&apos;, function(callback) {
    // Use the callback in the async function 
    fs.readFile(&apos;...&apos;, function(err, file) {
        console.log(file);
        callback();
//      ^^^^^^^^^^ 
//       This is what lets gulp know this task is complete! 
    });
});
</code></pre><h2 id="Web-development-工作情境"><a href="#Web-development-工作情境" class="headerlink" title="Web development 工作情境"></a>Web development 工作情境</h2><p>接者我們以常見的前端開發來做配置，工作情境需求如下(工作順序如號碼從小到大):</p>
<ol>
<li>清空發布的資料夾</li>
<li>搬移js,css檔案(一起做)</li>
<li>合併js,css檔案(一起做)</li>
<li>最小化js,css檔案(一起做)</li>
<li>清除所有暫存目錄與檔案</li>
</ol>
<h2 id="使用run-sequence建立工作"><a href="#使用run-sequence建立工作" class="headerlink" title="使用run-sequence建立工作"></a>使用run-sequence建立工作</h2><p>直接來看gulpfile.js的設定</p>
<pre><code>var gulp = require(&apos;gulp&apos;);
var uglify = require(&apos;gulp-uglify&apos;); // JS最佳化
var cleanCSS = require(&apos;gulp-clean-css&apos;); // CSS最佳化
var concat = require(&apos;gulp-concat&apos;); // 檔案合併
var del = require(&apos;del&apos;); // 清空資料夾
var runSequence = require(&apos;run-sequence&apos;); 

var public_dir = __dirname + &apos;/public&apos;;
var bundle_dir = public_dir + &apos;/bundle&apos;;
var bundle_js = bundle_dir + &apos;/js&apos;
var bundle_css = bundle_dir + &apos;/css&apos;;

gulp.task(&apos;clean&apos;, function() {
    return del([bundle_dir + &apos;/*&apos;]);
});

gulp.task(&apos;copy-js&apos;, function() {
    return gulp.src([
             public_dir + &apos;/vendors/jquery/index.js&apos;,
             public_dir + &apos;/vendors/fastclick/lib/fastclick.min.js&apos;,
             public_dir + &apos;/vendors/jquery_lazyload/jquery.lazyload.js&apos;,
             public_dir + &apos;/vendors/velocity/velocity.min.js&apos;,
             public_dir + &apos;/vendors/velocity/velocity.ui.min.js&apos;,
             public_dir + &apos;/vendors/fancybox/source/jquery.fancybox.pack.js&apos;,
             public_dir + &apos;/js/src/utils.js&apos;,
             public_dir + &apos;/js/src/motion.js&apos;,
             public_dir + &apos;/js/src/bootstrap.js&apos;,
             public_dir + &apos;/js/src/scrollspy.js&apos;,
             public_dir + &apos;/js/src/post-details.js&apos;,
             public_dir + &apos;/js/src/swig/localsearch.js&apos;,
             public_dir + &apos;/js/src/swig/achive-year.js&apos;

        ])
        .pipe(gulp.dest(bundle_js));
})

gulp.task(&apos;minify-js&apos;, function() {
    return gulp.src(bundle_js)
        .pipe(uglify())
        .pipe(gulp.dest(bundle_js));
})

gulp.task(&apos;concat-js&apos;, function() {
    return gulp.src([
             bundle_js + &apos;/index.js&apos;,
             bundle_js + &apos;/fastclick.min.js&apos;,
             bundle_js + &apos;/jquery.lazyload.js&apos;,
             bundle_js + &apos;/velocity.min.js&apos;,
             bundle_js + &apos;/velocity.ui.min.js&apos;,
             bundle_js + &apos;/jquery.fancybox.pack.js&apos;,
             bundle_js + &apos;/utils.js&apos;,
             bundle_js + &apos;/motion.js&apos;,
             bundle_js + &apos;/bootstrap.js&apos;,
             bundle_js + &apos;/scrollspy.js&apos;,
             bundle_js + &apos;/post-details.js&apos;,
             bundle_js + &apos;/localsearch.js&apos;,
             bundle_js + &apos;/achive-year.js&apos;

        ])
        .pipe(concat(&apos;all.min.js&apos;))
        .pipe(gulp.dest(bundle_dir));
});

gulp.task(&apos;copy-css&apos;, function() {
    return gulp.src([
            public_dir + &apos;/vendors/fancybox/source/jquery.fancybox.css&apos;,
            public_dir + &apos;/vendors/font-awesome/css/font-awesome.min.css&apos;,
            public_dir + &apos;/css/main.css&apos;
        ])
        .pipe(gulp.dest(bundle_css));
})

gulp.task(&apos;minify-css&apos;, function() {
    return gulp.src(bundle_css)
        .pipe(cleanCSS({
            debug: true
        }, function(details) {
            console.log(`${details.name}:[${Math.round(details.stats.efficiency *100)}%]${details.stats.originalSize}=&gt;${details.stats.minifiedSize}`);
        }))
        .pipe(gulp.dest(bundle_css));
})

gulp.task(&apos;concat-css&apos;, function() {
    return gulp.src([
            bundle_css + &apos;/jquery.fancybox.css&apos;,
            bundle_css + &apos;/font-awesome.min.css&apos;,
            bundle_css + &apos;/main.css&apos;
        ])
        .pipe(concat(&apos;advance.css&apos;))
        .pipe(gulp.dest(bundle_dir));
});

gulp.task(&apos;finish-task&apos;, function() {
    return del([bundle_js, bundle_css]);
});

gulp.task(&apos;default&apos;, function() {
    runSequence(
        &apos;clean&apos;, 
        [&apos;copy-js&apos;, &apos;copy-css&apos;], 
        [&apos;minify-js&apos;, &apos;minify-css&apos;], 
        [&apos;concat-js&apos;, &apos;concat-css&apos;],
    &apos;finish-task&apos;);
});
</code></pre><p><img src="1.png" alt="gulp-run-sequence"></p>
<p>以上是不是很簡單就可以建立出複雜的工作事項，並且可以讓他們同步或是依序執行，彈性相當高呢!</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>官方其實有特別註明以下一段話:</p>
<blockquote>
<p>This is intended to be a temporary solution until the release of gulp 4.0 which has support for defining task dependencies in series or in parallel.</p>
</blockquote>
<p>Gulp自身也知道大家都有需要使用相依性工作的情境，而在即將推出的Gulp 4.0裡面其實已經包含了這樣的特性跟解決方法，而這也是大家非常期待的一個新功能。在還沒有正式發布前大家就先用這個套件來解決問題吧。</p>
<p>對Gulp 4.0 其他特性有興趣的朋友可以參考官方發布的<a href="https://github.com/gulpjs/gulp/blob/4.0/CHANGELOG.md" target="_blank" rel="external">CHANGELOG</a></p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> Front-End Optimization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NodeJS del - sDelete Files and Folder]]></title>
      <url>https://blackie1019.github.io/2016/08/18/gulp-node-del/</url>
      <content type="html"><![CDATA[<p>使用NodeJS的<a href="https://www.npmjs.com/package/del" target="_blank" rel="external">del</a>模組來協助Gulp快速地設定需清理的檔案與目錄夾</p>
<a id="more"></a>
<p>在使用Gulp時最常見的需求就是先清空目標目錄內的檔案或是將暫存檔案移除，這邊分享給大家使用del來取代fs module。</p>
<h2 id="del-基本操作"><a href="#del-基本操作" class="headerlink" title="del 基本操作"></a>del 基本操作</h2><h3 id="安裝指令"><a href="#安裝指令" class="headerlink" title="安裝指令"></a>安裝指令</h3><pre><code>$ npm install --save del
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>這邊示範的內容為:</p>
<ul>
<li>刪除tmp目錄下的所有.js檔案</li>
<li>但須保留unicorn.js</li>
</ul>
<p>代碼:</p>
<pre><code>var del = require(&apos;del&apos;);

del([&apos;tmp/*.js&apos;, &apos;!tmp/unicorn.js&apos;]).then(paths =&gt; {
    console.log(&apos;Deleted files and folders:\n&apos;, paths.join(&apos;\n&apos;));
});
</code></pre><h3 id="del-cli"><a href="#del-cli" class="headerlink" title="del-cli"></a>del-cli</h3><p>如果有需要透過指令來加速開發或日常使用的，可以參考<a href="https://github.com/sindresorhus/del-cli" target="_blank" rel="external">del-cli</a></p>
<p>但因為del的刪除是永久性的刪除，如果是還有可能會需要還原的可能要參考<a href="https://github.com/sindresorhus/trash-cli" target="_blank" rel="external">trash-cli</a>。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在目前的使用上我是最常拿del來幫我做gulp建置前的清除與建置後的暫存檔案清楚，確保發布的專案沒有帶到不必要的內容。</p>
<p>不同於Grunt，因為Gulp是以JavaScript為主的Task manager，所以在使用上我們就能借用NodeJS已經有的模組來開發而無須重複製造輪子。</p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Gulp </tag>
            
            <tag> Front-End Optimization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript Object and compare with == and ===]]></title>
      <url>https://blackie1019.github.io/2016/08/17/javascript-object-compare-equal-with-value-and-reference/</url>
      <content type="html"><![CDATA[<p>在JavaScript的世界裡面應該用===來比對真實的值是否相等，而非使用==。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>會想寫這篇是因從去年看了兩本JavaScript必讀聖經後，在昨天又購入了<a href="http://www.tenlong.com.tw/items/9863470120?item_id=887445" target="_blank" rel="external">JavaScript深入精要</a>第三本聖經，第一章開宗明義地讓我了解了這些觀念，這些以前一直讓我感到困惑或是不甚理解的地方(此文章原撰寫在2014/1/4)。</p>
<h2 id="and"><a href="#and" class="headerlink" title="== and ==="></a>== and ===</h2><p>這邊參考<a href="http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm" target="_blank" rel="external">JavaScript tutorial:<br>Comparison operators
</a></p>
<h3 id=""><a href="#" class="headerlink" title="=="></a>==</h3><blockquote>
<p>The == operator will compare for equality after doing any necessary type conversions.</p>
</blockquote>
<p>寬鬆的相等性(lenient equality)，會先嘗試轉換不同型(type)的值，然後再以嚴格相等性的方式來比較它們。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h3><blockquote>
<p>The === operator will not do the conversion, so if two values are not the same type === will simply return false</p>
</blockquote>
<p>嚴格的相等性(strict equality)，只考量具有同樣型別的值是否相等。</p>
<h2 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h2><p>這邊簡單來看JS個別的判斷後就可以知道差異了</p>
<pre><code>&apos;&apos; == &apos;0&apos;           // false
0 == &apos;&apos;             // true
0 == &apos;0&apos;            // true

false == &apos;false&apos;    // false
false == &apos;0&apos;        // true

false == undefined  // false
false == null       // false
null == undefined   // true

&apos; \t\r\n &apos; == 0     // true
</code></pre><p>簡單來講 === 會測試兩個 values 的類型 (object type)，而==則是會將兩邊轉型成可以判斷的判別式後才進行比對，這會導致我們真的在做比對時容易有誤差。而我們長久以來有部分開發習慣可能是利用這個誤差來做一些判斷如:</p>
<pre><code>if(testObject){
    // do something if testObject != null
}
</code></pre><p>這邊就是用 testObject != null 這樣的判斷來進行。但常見的陷阱卻有下面這些:</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><pre><code>NaN == NaN;        // false
</code></pre><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><pre><code>2 == true;        // 2 === 1, false
2 == false;        // 2 === 0, false

1 == true;        // 1 === 1, true
0 == false;        // 0 === 0, true

&apos;&apos; == false;    // 0 === 0, true
&apos;1&apos; == true ;    // 1 === 1, true
&apos;0&apos; == false;    // 0 === 0, true
&apos;test&apos; == true    // NaN === 1, false 
</code></pre><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><pre><code>{} ==&apos;[object Objec]&apos;;    // true
[&apos;123&apos;] == 123;            // true
[] == 0;                // true
</code></pre><p>看完上面的反例相信你已經吐血了，簡單來講==根本沒有令人信服的案例。有的只是因為轉型帶來比較簡化的判斷而已。</p>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>曾經有一派宣稱如果==能滿足需求，則使用===較為麻煩與不必要。但在某些情況你實在無法去思考到底寫這段判別式的人如果用==是已經預測到他會轉型還是根本沒料想到這樣會發生問題。當在用了比較嚴格的XXLint(ESLint, jsLint, jshint and etc…)工具後習慣用===則是大家的通識。</p>
<h2 id="JS學習推薦"><a href="#JS學習推薦" class="headerlink" title="JS學習推薦"></a>JS學習推薦</h2><p>對於JavaScript學習推薦的書籍三本書分別如下:</p>
<ul>
<li><p>JavaScript設計模式</p>
<p>  <img src="A301.jpg" alt="JavaScript設計模式"></p>
</li>
<li><p>JavaScript優良部分</p>
<p>  <img src="A302.gif" alt="JavaScript優良部分"></p>
</li>
<li><p>JavaScript深入精要</p>
<p>  <img src="A367.jpg" alt="JavaScript深入精要"></p>
</li>
</ul>
<p>如果看三本沒時間或太麻煩的話，建議直接看下面這本</p>
<ul>
<li><p>Speaking JavaScript｜簡明完整的 JS 精要指南 (Speaking JavaScript)</p>
<p>  <img src="22.jpg" alt="Speaking JavaScript"></p>
</li>
</ul>
<p>除此之外必讀就是Mozilla的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank" rel="external">Core JavaScript 1.5 Guide</a></p>
<p>也另外推薦兩本書可以參考:</p>
<ul>
<li><p>JavaScript高性能</p>
<p>  <img src="s4538004.jpg" alt="JavaScript高性能"></p>
</li>
<li><p>Object-Oriented JavaScript - Second Edition</p>
<p>  <img src="3127OT_Object%20Oriented%20JavaScript.jpg" alt="Object-Oriented JavaScript - Second Edition"></p>
</li>
</ul>
<p>最後強力推薦<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Don’t Know JS</a> 這系列的線上書籍(實體書本也有，英文已經出版，中文要等<strong>2017</strong>才會出完)</p>
<p><img src="JS_you_dont_know.png" alt="You Don&#39;t Know JS"></p>
<p>如果對JavaScript有興趣，且願意把手弄髒去了解它實際原理的非常推薦你看完這些書籍。</p>
<p>很多人知道台灣的這些學習書籍不算少但大多都入門書，扣除沒能力寫之外也沒幾個出版社願意讓這些大師們出進階的書籍(入門書的銷量就不是很好了，出進階書籍還得了…)，請用行動支持這些願意花人生短短沒幾年的時間來寫書並分享給你經驗的大師，有他們的付出我們才能站在巨人的肩上看得更高更遠。</p>
<p>P.S. 大師包含國外與國內這些願意寫書分喜的作家們</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Isomorphic Javascript with React and NodeJS]]></title>
      <url>https://blackie1019.github.io/2016/08/16/isomorphic-javascript-with-react-and-nodejs/</url>
      <content type="html"><![CDATA[<p>Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構</p>
<a id="more"></a>
<p><img src="building-isomorphic-javascript-apps-ndc-2015-12-638.jpg" alt="header-img"></p>
<blockquote>
<p>Isomorphic JavaScript apps are JavaScript applications that can run both client-side and server-side.<br>The backend and frontend share the same code.</p>
</blockquote>
<p>Reuse，這是developer最喜歡但也最難做到的部分，往往在一些限制與挑戰下我們會遇到無法重用我們既有的經驗與能力。但如果有機會讓我們再選一次，我們一定會先問有可以參考或是重用的嗎? Isomorphic正是強調這樣精神的一個架構。 此外，Isomorphism的好處有:</p>
<ol>
<li>Faster Perceived Load Times + Better Global UX</li>
<li>Search Engine Indexability</li>
<li>Easier Code Maintenance</li>
</ol>
<p>使用這樣架構最有名的案例則是<a href="http://www.slideshare.net/spikebrehm/the-evolution-of-airbnbs-frontend/56" target="_blank" rel="external">Airbnb</a>本身的產品。</p>
<h2 id="How-to-make-a-web-application"><a href="#How-to-make-a-web-application" class="headerlink" title="How to make a web application"></a>How to make a web application</h2><p>在看開始新的架構時我們先回頭看一下一個網頁應用程式不能或缺的三元素為:</p>
<ul>
<li>HTML</li>
<li>CSS</li>
<li>JavaScript</li>
</ul>
<p>如果是動態網頁需要一些資料處理的能力大就需要再結合後端的程式來幫我們，所以原本的架構就會疊加一個後端的語言(C# or Java or PHP or Ruby or Python or Go..etc)。但如果稍微大型的網頁應用程式在開發上多少都會使用網頁框架來加速與統一開發，如Xuenn使用的.Net MVC或Web form，而這樣又帶入了一個頁面語言Razer或是Web page, 結果則是變成下面</p>
<p><img src="Front-end.png" alt="front-end"></p>
<p>如先前說的Reuse實務上太難達到了，但如果能透過JavaScript幫忙統一後端開發與頁面使用的開發語言，這樣就可以幫我們重新使用我們已經會的技術與經驗來替換掉C#與Razer/Web pages，可以讓開發少點重複但不同語言的學習，多花時間用同一語言與經驗處理實際且進階的應用。 而架構也會變成如此:</p>
<p><img src="front-end2.png" alt="front-end2"></p>
<p>我們有了可以Shared的Library，縮減Frontend與Backend開發重複功能的時間也避免了重複犯錯的機會，而Back-end這邊則是可以沿用JavaScript這個語言，用同一個開發語言除了減少學習上的分歧也代表我們能沿用這個語言大部分的解決方案(如最佳化, 測試與部屬等等)，而這也讓我們回歸到最基本的網頁應用程式的三個基礎元素。</p>
<p>接下來我們就從架構到實作一步一步的應用NodeJS與ReactJS來幫我們做出第一個Isomorphic web application.</p>
<h2 id="Technical-Overview"><a href="#Technical-Overview" class="headerlink" title="Technical Overview"></a>Technical Overview</h2><h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h3><p>ReactJS是Facebook打造的framework，專注於解決view的問題，透過Virtual DOM 與單一流向的方式來加速與減少前端開發的問題。以往我們所知用更改一個DOM的Element來呈現畫面改變的這個方法在大型頻繁更新的網站上面是非常可怕的效能瓶頸。可以看到的是ReactJS要解決的是Web開發上面UI呈現的問題，隨者網頁功能越多與越多人互相使用與交流，FB遇到越來越多需要在同一個頁面即時更新的情況，ReactJS就是因此而誕生的一個Framework．</p>
<p>整理以下有幾個的優點:</p>
<ul>
<li>模組化的設計：提高了程式碼的複用性、並且很好地隔離了不同組件的程式碼</li>
<li>提倡單向資料流：無論是Flux或Redux都可將資料與業務邏輯很好的分離</li>
<li>聲明式風格：可讀性高，可以很直覺地透過 Render() 函數的內容來想像頁面是如何被組成的</li>
<li>讓 Server-Side Rendering 這件事變成可能：Isomorphic Web Design, SEO</li>
<li>React Native 統一了行動開發，同時保有原生 APP 的體驗</li>
</ul>
<p>React是一個以JavaScript為主打照的語言，而這也產生一種為JSX的開發語言。當然有人對JavaScript裡面包含HTML這種寫法是非常感冒的，這邊就是要稍微遷就一下了。</p>
<p><em>提醒一下JSX只是一種選項，並非開發ReactJS一定要用JSX。</em></p>
<h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><p>NodeJS本身透過HTTP模組已經可以簡單地去做網頁相關處理，但對於一個較為複雜的網站還是會建議額外加裝網頁應用程式模組，減少重複的開發。這邊我們使用NodeJS上面最常使用的Express作為我們的開發的框架，幫我們架設起第一個NodeJS網站。 如果考慮使用ES6/7，也推薦KOA這個框架。</p>
<h3 id="Express-react-views"><a href="#Express-react-views" class="headerlink" title="Express-react-views"></a>Express-react-views</h3><p>Jade模組是Express.js預設的模版引擎(Template Engine)。Jade最大的特點是語法非常的優雅，這是優點同時也是缺點。因為學習曲線較陡（跟HTML差挺多的），而且難以與其他人（像只懂HTML的設計人員）溝通。所以很多人喜歡把Jade換成更接近HTML的模版引擎，這邊我們會改用React來統一所有跟View相關的使用。</p>
<p>這邊我們使用<a href="https://github.com/reactjs/express-react-views" target="_blank" rel="external">Express-react-views</a> 作為範例。</p>
<p>沒錯，減少Server Side還要學習Jade語言而直接使用React，這也我們其中一個Isomorphic的地方。</p>
<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p><img src="webpack-module-bundler.png" alt="webpack"></p>
<p><a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a> 是一個模組打包工具（module bundler），主要功能： </p>
<ul>
<li>將 CSS、圖片與其他資源打包 </li>
<li>打包之前預處理（Less、CoffeeScript、JSX、ES6 等）的檔案 </li>
<li>依 entry 文件不同，把 .js 分拆為多個 .js 檔案</li>
<li>支援熱模組(Hot Module)做即時動態更新，減少開發時繁複的建置時間與步驟 </li>
<li>整合豐富的 loader 可以使用</li>
<li>整合grunt, gulp, bower, karma等前端套件工具</li>
</ul>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p><img src="babel.png" alt="babel"></p>
<blockquote>
<p>The compiler for writing next generation JavaScript</p>
</blockquote>
<p>這就是Babel主要的使命，而這邊我們使用它來幫我們達到前端開發模組化的功能，因為NodeJS本身已經有模組化的架構了，但ReactJS則需要透過外部套件來幫助它做到這點。而它所帶來的ECMA6的語言特性與其他好處不在此篇多做說明。</p>
<h2 id="Play-by-Steps"><a href="#Play-by-Steps" class="headerlink" title="Play by Steps"></a>Play by Steps</h2><p>在開始前我們先簡單的描述一下我們要做出來的成品所需要符合的需求,</p>
<ul>
<li>後端:網頁title需顯示該網站建立的時間</li>
<li>前端:頁面顯示時間變化</li>
<li>兩者時間格式必須相同</li>
</ul>
<h3 id="懶人DEMO"><a href="#懶人DEMO" class="headerlink" title="懶人DEMO"></a>懶人DEMO</h3><ol>
<li><ul>
<li>複製程式庫 :<strong> <em><a href="https://github.com/blackie1019/Isomorphic-JavaScript-Example.git" target="_blank" rel="external">https://github.com/blackie1019/Isomorphic-JavaScript-Example.git</a></em></strong></li>
</ul>
</li>
<li><ul>
<li>安裝套件 : <strong><em>npm install</em></strong></li>
</ul>
</li>
<li><ul>
<li>啟動node : <strong><em>npm start</em></strong></li>
</ul>
</li>
<li><ul>
<li>打開瀏覽器瀏覽 : <strong><em><a href="http://localhost:9527" target="_blank" rel="external">http://localhost:9527</a></em></strong></li>
</ul>
</li>
</ol>
<h3 id="Setup教學"><a href="#Setup教學" class="headerlink" title="Setup教學"></a>Setup教學</h3><p><strong><em>以下指令如果在Windows環境下操作，建議執行在Git BASH上面，避免Windows不支援</em></strong></p>
<p>首先先到NodeJS官網下載並安裝，安裝完後在Command Line確認一下版本</p>
<pre><code>$ node -v
</code></pre><p><img src="node%20version.png" alt="node-v"></p>
<p>如果看到有正確的回應版本即代表安裝成功。 接者我們就透過指令並依序輸入資訊(或按enter帶入預設即可)後建立我們的package.json檔案</p>
<pre><code>$ npm init
</code></pre><p><img src="packagejson.png" alt="package.json"></p>
<h4 id="一鍵安裝指令如下"><a href="#一鍵安裝指令如下" class="headerlink" title="一鍵安裝指令如下"></a>一鍵安裝指令如下</h4><pre><code>$ npm install --save express-react-views react react-dom express
</code></pre><h4 id="或是我們一步步解說"><a href="#或是我們一步步解說" class="headerlink" title="或是我們一步步解說:"></a>或是我們一步步解說:</h4><p>接著用NPM來安裝Express模組(安裝 Node 模組時，如果指定了 –save 選項，則會將這些模組新增至 package.json 檔中的 dependencies 清單。之後，當您在該目錄中執行 npm install 時，就會自動安裝相依關係清單中的模組)。</p>
<pre><code>$ npm install express --save
</code></pre><p>我們這邊要修改一下scripts裡面的test，讓我們執行test指令的時候可以幫我們成功運行NodeJS指定的主程式</p>
<pre><code>&quot;test&quot;: &quot;node app.js&quot;
</code></pre><p><img src="addexpress.png" alt="addexpress"></p>
<p>接著我們新增一個app.js的檔案作為我們預設的主程式，在這邊我們先簡單用3000 port來起一個Express網頁程式並顯示Hello World!</p>
<pre><code>var express = require(&apos;express&apos;);
var app = express();

app.get(&apos;/&apos;, function (req, res) {
  res.send(&apos;Hello World!&apos;);
});

app.listen(3000, function () {
  console.log(&apos;Example app listening on port 3000!&apos;);
});
</code></pre><p>然後我們回到Command Line輸入透過前面設定好的test指令將我們的Express運行起來</p>
<pre><code>$ npm test
</code></pre><p><img src="helloworld.png" alt="helloworld"></p>
<p>最後我們安裝ReactJS套件，這邊要安裝react與react-dom</p>
<pre><code>$ npm install --save react react-dom
</code></pre><p>然後我們新增一個index.html並放入以下內容後儲存，這邊我們可以直接透過瀏覽器先檢視一下呈現是否如預期</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;title&gt;React Test&lt;/title&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;
    &lt;script&gt;
        var Demo = React.createClass({
                displayName: &quot;HelloMessage&quot;,
                render: function() {
                    return React.createElement(&quot;div&quot;, null, &quot;Hello, world!I am a React App &quot;, null);
                }
            }),
            mountNode = document.getElementById(&apos;app&apos;);

        React.render(React.createElement(Demo, null), mountNode);
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><p><img src="reacthelloworld.png" alt="helloworld"></p>
<p>目前我們已經成功的把Express與ReactJS分別成功執行了，接下我們就來調整一下把他們合為一體吧。</p>
<p>首先我們稍微調整一下我們目錄結構，讓它們可以分別註冊在不同的資料夾內自動繫結到我們的專案中，請直接參考Express的<a href="http://expressjs.com/en/starter/generator.html" target="_blank" rel="external">Express application generator</a>，以下為建立出來的結構。</p>
<p>接著安裝Express-react-views套件並修改一下原本的app.js，將Express設定ReactJS當作加入的view engines修改內容如下:</p>
<pre><code>$ npm install --save Express-react-views
</code></pre><p><img src="reactappjs.png" alt="expressreactview"></p>
<p>在原本的app.js中移除Jade並加入react為預設View Engine</p>
<pre><code>app.set(&apos;view engine&apos;, &apos;jsx&apos;);
app.engine(&apos;jsx&apos;, require(&apos;express-react-views&apos;).createEngine());
</code></pre><p>將我們剛剛寫的index.html寫成jsx放到views下面</p>
<pre><code>var React = require(&apos;react&apos;);

var AppComponent = React.createClass({
    render: function() {
        return (
                &lt;html&gt;
                    &lt;head&gt;
                        &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                        &lt;title&gt;React Test&lt;/title&gt;
                        &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
                        &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
                        &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
                        &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                        &lt;div id=&quot;app&quot;&gt;
                        &lt;/div&gt;
                        &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/demo.jsx&quot;&gt;&lt;/script&gt;   
                    &lt;/body&gt;
                &lt;/html&gt;
            );
    }
});

module.exports = AppComponent;
</code></pre><p>接著我們再來組合先前的HelloMessage component轉換成jsx格式，並將原本的內容貼入後做下面修改後存至demo.jsx:</p>
<pre><code>var Demo = React.createClass({
    render: function() {
        return (
               &lt;div&gt;
                    Hello, world!I am a React App.
                &lt;/div&gt;
            );
    }
});

ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&apos;app&apos;));
</code></pre><p>檢視一下我們的Package.json最後的樣子</p>
<p><img src="packagejson2.png" alt="package2.json"></p>
<p>開發需求前我們重新檢視一下目前的專案結構</p>
<p><img src="Folder.png" alt="folder"></p>
<p>到這邊，我們已經從無到有的建立了專案的底層，接下來就讓我們來開發這次的需求吧</p>
<h3 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h3><p>這邊只有一個需求是將目前的時間顯示到html的title裡面，這邊我們會使用javascripts目錄裡面的date-helper.js來幫我們。</p>
<pre><code>&apos;use strict&apos;;
var helper = {};
helper.getShortDatetime = function() {
    var datetime = new Date();
    return [datetime.getFullYear(),
        (datetime.getMonth() + 1),
        datetime.getDate()
    ].join(&apos;/&apos;) + &apos; &apos; + [
        datetime.getHours(),
        datetime.getMinutes(),
        datetime.getSeconds()
    ].join(&apos;:&apos;);
}

module.exports = helper;
</code></pre><p>將寫的元件引入直接使用<strong>getShortDatetime</strong>來顯示在title後面，修改index.jsx內容如下:</p>
<pre><code>var React = require(&apos;react&apos;);
var dateHelper = require(&apos;../public/javascripts/date-helper&apos;);

var IndexView = React.createClass({
       render: function() {
           return (
                   &lt;html&gt;
                       &lt;head&gt;
                           &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                           &lt;title&gt;{dateHelper.getShortDatetime()} &lt;/title&gt;
                           &lt;script src=&quot;https://npmcdn.com/react@15.3.0/dist/react.min.js&quot;&gt;&lt;/script&gt;
                           &lt;script src=&quot;https://npmcdn.com/react-dom@15.3.0/dist/react-dom.min.js&quot;&gt;&lt;/script&gt;
                           &lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;
                           &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                       &lt;/head&gt;
                       &lt;body&gt;
                           &lt;div id=&quot;app&quot;&gt;
                           &lt;/div&gt;
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/date-helper.js&quot;&gt;&lt;/script&gt;  
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/demo.jsx&quot;&gt;&lt;/script&gt;   
                       &lt;/body&gt;
                   &lt;/html&gt;
               );
       }
   });

module.exports = IndexView;
</code></pre><p>接著再次將網站運行就可以發現title已經被置換了</p>
<p><img src="title.png" alt="title"></p>
<h3 id="Frontend"><a href="#Frontend" class="headerlink" title="Frontend"></a>Frontend</h3><p>這邊我們同樣將date-helper.js載入後在demo.jsx頁面上顯示我們的時間，內容如下:</p>
<pre><code>var dateHelper = require(&apos;./date-helper.js&apos;);
var Demo = React.createClass({

    getInitialState: function() {
        return {
            dateTime : dateHelper.getShortDatetime()
        };
    },

    render: function() {
        return (
                &lt;div&gt;
                    &lt;p&gt;
                        Hello, world!I am a React App.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Time : {this.state.dateTime}
                    &lt;/p&gt;
                &lt;/div&gt;
            );
    }
});

ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&apos;app&apos;));
</code></pre><p>這次卻出現了JS Error</p>
<p><img src="module%20error.png" alt="error"></p>
<p>主要是因為模組化是NodeJS預先就有支援的架構，但ReactJS如果要支援這樣的架構需要透過其他方式達成。這邊示範用Webpack來達成。</p>
<h3 id="加入Webpack與Babel"><a href="#加入Webpack與Babel" class="headerlink" title="加入Webpack與Babel"></a>加入Webpack與Babel</h3><p>安装 Webpack：</p>
<pre><code>npm install -g webpack
</code></pre><p>Webpack 會載入 webpack.config.js 的設定文件來執行。 如果要編譯 JSX，則需安装對應的 loader，這邊我們使用babel-loader與react-hot-loader:     </p>
<pre><code>npm install babel-core babel-loader babel-preset-es2015 babel-preset-stage-0 babel-preset-react react-hot-loader --save-dev
</code></pre><p>新增一份 webpack.config.js ，並將 loaders 指定 babel-loader 編譯副檔名為 .js 或者 .jsx 的檔案，這樣你就可以在這兩種類型的文件中自由使用 JSX 和 ES6 了(這邊避免脫離主題暫時先不講ES6)。</p>
<pre><code>var path = require(&apos;path&apos;);

module.exports = {
    entry: &apos;./src/entry.js&apos;,
    output: {
        path: path.join(__dirname, &apos;/public/javascripts&apos;),
        filename: &apos;bundle.js&apos;
    },
    resolve: {
        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.jsx&apos;]
    },
    module: {
        loaders: [
            { 
                test: /\.js|jsx$/, 
                exclude: /(node_modules)/, 
                loaders: [
                        &apos;react-hot&apos;,
                        &apos;babel?presets[]=stage-0,presets[]=react,presets[]=es2015&apos;
                    ]
            }
        ]
    }
}
</code></pre><p>接者我們調整一下我們的demo.jsx與date-help.js的路徑，並修改一下載入的位置</p>
<p><img src="Folder2.png" alt="folder2"></p>
<p>entry.js則是我們希望webpack載入的入口，這邊我們可以開始加入我們的套件讓他做載入</p>
<pre><code>require(&apos;react&apos;);
require(&apos;react-dom&apos;);
require(&apos;./components/demo.jsx&apos;);
require(&apos;./helper/date-helper.js&apos;);
</code></pre><p>設定完成後可以執行webpack看一下是否正確產出bundle.js到指定目錄</p>
<pre><code>webpack 
</code></pre><p><img src="webpack%20success.png" alt="webpack"></p>
<p>或是監聽編譯指令，動態載入編譯來加速開發</p>
<pre><code>webpack -d --watch
</code></pre><p><img src="webpack%20watch%20success.png" alt="webpack watch"></p>
<p>當編譯成功後我們在使用npm start來啟動我們的網頁看一下畫面</p>
<p><img src="react%20using%20helper.png" alt="page"></p>
<p>因為我們這邊已經將frontend所有js/jsx打包成一個bundle.js，所以我們也可以將原本index.jsx所載入的套件移除了</p>
<pre><code>var React = require(&apos;react&apos;);
var dateHelper = require(&apos;../src/helper/date-helper&apos;);

var IndexView = React.createClass({
       render: function() {
           return (
                   &lt;html&gt;
                       &lt;head&gt;
                           &lt;meta charSet=&quot;UTF-8&quot;/&gt;
                           &lt;title&gt;{dateHelper.getShortDatetime()} &lt;/title&gt;
                           &lt;link src=&quot;stylesheets/style.css&quot; /&gt;
                       &lt;/head&gt;
                       &lt;body&gt;
                           &lt;div id=&quot;app&quot;&gt;
                           &lt;/div&gt;
                           &lt;script type=&quot;text/babel&quot; src=&quot;javascripts/bundle.js&quot;&gt;&lt;/script&gt;   
                       &lt;/body&gt;
                   &lt;/html&gt;
               );
       }
   });

module.exports = IndexView;
</code></pre><h3 id="Updated-On-The-Fly"><a href="#Updated-On-The-Fly" class="headerlink" title="Updated On The Fly"></a>Updated On The Fly</h3><p>這次我們要加入ReactJs的更新事件，讓時間動態在頁面更新。內容如下:</p>
<pre><code>var React = require(&apos;react&apos;);
var ReactDOM = require(&apos;react-dom&apos;);
var dateHelper = require(&apos;../helper/date-helper.js&apos;);

var Demo = React.createClass({

    getInitialState: function() {
        return {
            dateTime : dateHelper.getShortDatetime()
        };
    },

    tick: function() {
        console.log(&apos;test&apos;);
        this.setState({dateTime : dateHelper.getShortDatetime()});
    },

    componentDidMount: function() {
        this.interval = setInterval(this.tick, 1000);
    },

    componentWillUnmount: function() {
        clearInterval(this.interval);
    },

    render: function() {
        return (
                &lt;div&gt;
                    &lt;p&gt;
                        Hello, world!I am a React App.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Time : {this.state.dateTime}
                    &lt;/p&gt;
                &lt;/div&gt;
            );
    }
});
</code></pre><p>ReactDOM.render(<demo>, document.getElementById(‘app’));</demo></p>
<p>最後我們把我們的webpack整合到npm start指令裡面，稍微修改一下package.json如下:</p>
<pre><code>&quot;scripts&quot;: {
    &quot;start&quot;: &quot;webpack &amp;&amp; node ./bin/www&quot;
 }
</code></pre><p><img src="packagejson3.png" alt="update start"></p>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>過程當中我們只運用了兩種語言HTML+JavaScript幫我們完成所有的功能，而其中我們學習如何使用Express與ReactJS這兩個框架以及運用統一的模組化方法Webpack+Babel協助我們開發，而這些都只專注在使用一種語言 - JavaScript。</p>
<h2 id="Isomorphic-JavaScript-VS-Universal-JavaScript"><a href="#Isomorphic-JavaScript-VS-Universal-JavaScript" class="headerlink" title="Isomorphic JavaScript VS Universal JavaScript"></a>Isomorphic JavaScript VS Universal JavaScript</h2><p>使用同一個開發語言做到跨類型的應用程式開發也是Universal JavaScript的核心精神。</p>
<p>不同於Isomorphic JavaScript所強調網頁開發前後端的<em>共構部分</em>可以抽出來被重複使用，Universal JavaScript希望除了網頁應用程式之外，手機或是桌面應用程式是否也可以應用同一個語言做開發，減少跨語言的障礙並且加速開發。</p>
<p>而JavaScript也同時能達到這兩個架構與精神，有興趣的朋友除了瞭解本篇的NodeJS與ReactJS外以下提供不同情境的整理了幾個Framework可以參考:</p>
<h3 id="For-Mobile-Application-Android-iOS"><a href="#For-Mobile-Application-Android-iOS" class="headerlink" title="For Mobile Application(Android, iOS)"></a>For Mobile Application(Android, iOS)</h3><ul>
<li><a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a><ul>
<li>Learn once, write Web and mobile apps with React</li>
<li>Built on React Native: Facebook(iOS, Android), Facebook Ads Manager(iOS, Android), QQ(Android), CBS Sports Franchise Football(Android)…etc</li>
</ul>
</li>
</ul>
<h3 id="For-Disktop-Application-Windows-Mac-Linux"><a href="#For-Disktop-Application-Windows-Mac-Linux" class="headerlink" title="For Disktop Application(Windows, Mac, Linux)"></a>For Disktop Application(Windows, Mac, Linux)</h3><ul>
<li><a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a><ul>
<li>Ship more with less code, Build apps for any device, Integrate technologies you already use</li>
<li>Built on Electron: Atom, Slack, VS Code, Kitematic, Postman…etc </li>
</ul>
</li>
</ul>
<p>是的，跟其他同類型的framework相比，從上面幾個開發出來的Application看來這些技術不是只用在demo或是POC而已!</p>
<p>如果對於React Native有興趣可以參考最近網友分享的這篇文章</p>
<ul>
<li><a href="http://blog.blackbing.net/post/2016/07/24/we-developed-cnyes-app-with-react-native" target="_blank" rel="external">我們用 react-native 開發鉅亨網 app</a></li>
</ul>
<p>想一步步把ReactJS學好的朋友可以關注<a href="https://kdchang.gitbooks.io/react101/" target="_blank" rel="external">從零開始學 ReactJS（ReactJS 101）</a>，作者群之後會陸續從開發環境到開發流程都一步步地帶你學習。</p>
<h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p><img src="go%20home.jpg" alt="gohome"></p>
<p>Isomorphic JavaScript的架構則沿用了這樣的精神幫我們整合前後端開發把可以共用的程式重用來達到Do less but get more(=&gt;多點穩定+少點線上支援+早點回家).</p>
<p>這邊也推薦一個台灣Nodejs好手自己寫的isomorphic框架給大家，<a href="http://fred-zone.blogspot.tw/2015/11/lantern-isomorphic.html" target="_blank" rel="external">Lantern 專案：快速打造屬於自己的 Isomorphic 網站服務</a></p>
<p>如果你的專案是用Angular2開發的也別擔心，這邊也有一個官方結合NodeJS或Asp.net Core的類Isomophic框架可以參考，<a href="https://github.com/angular/universal" target="_blank" rel="external">Universal Angular 2</a>.</p>
<p>在現代網頁應用程式開發裡，JavaScript的重要性越來越高了。從一開始的腳本語言讓外人搞不清楚與Java的差別，而後幫我們處理簡單的網頁呈現的邏輯與簡單的操作跑馬燈效果或是畫面驗證等邏輯，經過了jQuery的興起讓我們知道原來光靠JavaScript我們就能幫網頁做到這麼多效果與彈性，而到2009年NodeJS的出現後有不少的企業將他們的網站的後端服務改用JavaScript來取代PHP, Python, Ruby等Interpreted language為了達到同一個開發語言來加速應用，加上Angular與React等front-end framework的出現讓我們更有方法的在開發應用程式。</p>
<p>Isomorphic 一直是 Node.js 開發者的夢想，如果有一個全新的專案需要做網頁應用程式且希望用JavaScript當作主要的開發語言的話不妨就試試看這樣的架構吧!</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/" target="_blank" rel="external">Airbnb: Isomorphic JavaScript: The Future of Web Apps</a></li>
<li><a href="https://strongloop.com/strongblog/node-js-react-isomorphic-javascript-why-it-matters/" target="_blank" rel="external">How to Implement Node + React Isomorphic JavaScript &amp; Why it Matters</a></li>
<li><a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js" target="_blank" rel="external">Build A Real-Time Twitter Stream with Node and React.js</a></li>
<li><a href="https://medium.com/@ghengeveld/isomorphism-vs-universal-javascript-4b47fb481beb#.igikqp97e" target="_blank" rel="external">Isomorphism vs Universal JavaScript</a></li>
<li><a href="http://jmfurlott.com/tutorial-setting-up-a-simple-isomorphic-react-app/" target="_blank" rel="external">Tutorial: Setting Up a Simple Isomorphic React app</a></li>
<li><a href="https://bensmithett.github.io/going-isomorphic-with-react/" target="_blank" rel="external">Going isomorphic with react</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> NodeJS </tag>
            
            <tag> isomorphic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitLab Build up]]></title>
      <url>https://blackie1019.github.io/2015/11/06/GitLab-Build-up/</url>
      <content type="html"><![CDATA[<p>This is a step by step tourist for how to build up a GitLab from Bitnami VM</p>
<a id="more"></a>
<h2 id="GitLab-from-Bitnami"><a href="#GitLab-from-Bitnami" class="headerlink" title="GitLab from Bitnami"></a>GitLab from Bitnami</h2><p><a href="https://bitnami.com/stack/gitlab/virtual-machine" target="_blank" rel="external">Download</a></p>
<p><a href="https://wiki.bitnami.com/Applications/BitNami_GitLab?highlight=gitlab" target="_blank" rel="external">Wiki - BitNami GitLab</a></p>
<h2 id="General-Setup"><a href="#General-Setup" class="headerlink" title="General Setup"></a>General Setup</h2><ol>
<li><p>Update your apache for GitLab host to example.com</p>
<pre><code>$ sudo /opt/bitnami/apps/gitlab/bnconfig --machine_hostname example.com
</code></pre></li>
<li><p>Add example.com to host</p>
<pre><code>127.0.0.1    example.com
</code></pre></li>
<li><p>Update GitLab setting to correct host display</p>
<pre><code>$ sudo vi /opt/bitnami/apps/gitlab/htdocs/config/gitlab.yml
host: example.com
</code></pre></li>
<li><p>restart(need do this action once configuration change)</p>
<pre><code>$ sudo /opt/bitnami/ctlscript.sh restart
</code></pre></li>
</ol>
<h2 id="SSH-Setup"><a href="#SSH-Setup" class="headerlink" title="SSH Setup"></a>SSH Setup</h2><ol>
<li><p>Server open SSH setting</p>
<pre><code>$ sudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf
$ sudo start ssh
</code></pre></li>
<li><p>VM open port forwarding</p>
<p> Setting&gt;Network&gt;Port Forwarding</p>
<p> <img src="Port%20Forwarding.png" alt="port"></p>
</li>
<li><p>Client generate Key-pairs</p>
<ul>
<li><p>Linux &amp; Mac</p>
<pre><code>$ sudo ssh-keygen
</code></pre></li>
<li><p>Windows</p>
<p>  <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" target="_blank" rel="external">PuTTY</a></p>
</li>
</ul>
</li>
<li><p>Bidning Public key to GitLab account</p>
<p> SSH Keys&gt;Add</p>
<p> <img src="ssh%20public.png" alt="SSH public"></p>
</li>
<li><p>Open SourceTree and clone with SSH protocal</p>
<p> <img src="Clone%20with%20ssh.png" alt="Clone wih SSH"></p>
<p> <em>Windows need add private key to computer first, can use <a href="http://the.earth.li/~sgtatham/putty/latest/x86/pageant.exe" target="_blank" rel="external">Pageant</a></em></p>
</li>
</ol>
<h2 id="Get-file-from-Host-to-Client-VM-using-SSH-protocal"><a href="#Get-file-from-Host-to-Client-VM-using-SSH-protocal" class="headerlink" title="Get file from Host to Client VM using SSH protocal"></a>Get file from Host to Client VM using SSH protocal</h2><ul>
<li>Mac &amp; Windows<br>  <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwiN5OSiz_nIAhUGXqYKHZMABNQ&amp;url=https%3A%2F%2Ffilezilla-project.org%2Fdownload.php&amp;usg=AFQjCNEVBwvn5iTFmb5JyjzLrD0yKQsMGg&amp;sig2=dep538VPLoemq1TctetF6g" target="_blank" rel="external">FileZilla - Client</a></li>
<li>Windows<br>  <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CBsQFjAAahUKEwjv1vHDz_nIAhXlJKYKHRzKCFs&amp;url=https%3A%2F%2Fwinscp.net%2Feng%2Fdownload.php&amp;usg=AFQjCNFGy0DbS4A__xFv8ToHgJYyYD3BOw&amp;sig2=HHP95wNoiU9FmIfyCVCzww" target="_blank" rel="external">WinSCP</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Source Control </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitLab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ReactJS AKA the V in MVC]]></title>
      <url>https://blackie1019.github.io/2015/05/03/ReactJS-AKA-the-V-in-MVC/</url>
      <content type="html"><![CDATA[<p>ReactJS是Facebook推出的framework, 再搭配FLUX的架構下讓FB網頁上面更新資料的快速性與開發架構得到的顯著改善，也因此讓大家開始想去了解它的魅力。</p>
<a id="more"></a>
<p><img src="ReactJS.png" alt="ReactJS"></p>
<h2 id="ReactJS-Introduciton"><a href="#ReactJS-Introduciton" class="headerlink" title="ReactJS Introduciton"></a>ReactJS Introduciton</h2><p>這邊用官網的三段特色描述來簡單介紹：</p>
<ul>
<li><h3 id="VIRTUAL-DOM"><a href="#VIRTUAL-DOM" class="headerlink" title="VIRTUAL DOM"></a>VIRTUAL DOM</h3><p>  React abstracts away the DOM from you, giving a simpler programming model and better performance. React can also render on the server using Node, and it can power native apps using React Native.</p>
</li>
<li><h3 id="DATA-FLOW"><a href="#DATA-FLOW" class="headerlink" title="DATA FLOW"></a>DATA FLOW</h3><p>  React implements one-way reactive data flow which reduces boilerplate and is easier to reason about than traditional data binding.</p>
</li>
<li><h3 id="JUST-THE-UI"><a href="#JUST-THE-UI" class="headerlink" title="JUST THE UI"></a>JUST THE UI</h3><p>  Lots of people use React as the V in MVC. Since React makes no assumptions about the rest of your technology stack, it’s easy to try it out on a small feature in an existing project.</p>
</li>
</ul>
<p>以往我們所知用更改一個DOM的Element來呈現畫面改變的這個方法在大型頻繁更新的網站上面是非常可怕的效能瓶頸。可以看到的是ReactJS要解決的是Web開發上面UI呈現的問題，隨者網頁功能越多與越多人互相使用與交流，FB遇到越來越多需要在同一個頁面即時更新的情況，ReactJS就是因此而誕生的一個Framework．</p>
<p>而呼應FLUX架構，ReactJS用更簡單的流程來管理頁面的更新，透過事件的訂閱與註冊的概念產生單一方向的處理流程，簡化如MVC, MVVM等架構對於View方面雙向溝通的方式。而也因為是針對UI(View)處理所產生的framework，所以要結合回去你原本的AngularJS這種MVC框架也是可行的。</p>
<h3 id="AKA-V-in-MVC"><a href="#AKA-V-in-MVC" class="headerlink" title="AKA V in MVC"></a>AKA V in MVC</h3><p>React : Rethinking Best Practices. 這是我覺得對於ReactJS還不錯的一個解釋</p>
<ul>
<li>React 的設計 - 每個更新UI(View)等同於整個畫面重新繪製</li>
<li>React 的實作 - Virtual DOM與Event</li>
</ul>
<p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/9yHWlcJx1bWShG" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/floydophone/react-preso-v2" title="Rethinking Best Practices" target="_blank">Rethinking Best Practices</a> </strong> from <strong><a href="http://www.slideshare.net/floydophone" target="_blank">floydophone</a></strong> </div></p>
<p>其中第4-6頁的簡單幾句話已經明確說明它的定位。</p>
<h3 id="使用ReactJS"><a href="#使用ReactJS" class="headerlink" title="使用ReactJS"></a>使用ReactJS</h3><p>可以到官方網站透過<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">React starter kit</a>取得最新的範例跟JS檔案或是參考官方<a href="https://cdnjs.com/libraries/react/" target="_blank" rel="external">CDN</a></p>
<p>如果有安裝Nodejs也可以透過使用官方的工具幫你建置開發環境</p>
<pre><code>$ npm install -g react-tools
</code></pre><p>如果你在使用上有需要用任何Add-ons，則使用下面的方式引入你的專案</p>
<pre><code>var React = require(&apos;react/addons&apos;); instead.
</code></pre><p>當然你也可以用Bower統一下載</p>
<pre><code>$ bower install --save react
</code></pre><p>這邊我們就直接用JSBin帶大家一起說聲Hello world</p>
<h4 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h4><p><a class="jsbin-embed" href="http://jsbin.com/kixotojavo/2/embed?html,js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>很簡單的只要在HTML頁面放好一個div tag,並透過React render出所需要呈現的畫面裡面有什麼(這邊製作了一個div的Element並在裡面放入文字)，並讓這個建置他的物件本身的Name的屬性可以被傳入內部配合處理。</p>
<h3 id="JSX-and-Hello-world-with-JSX-Syntax"><a href="#JSX-and-Hello-world-with-JSX-Syntax" class="headerlink" title="JSX and Hello world with JSX Syntax"></a>JSX and Hello world with JSX Syntax</h3><h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p>在已經習慣寫XML的情況下要我們產生一個div物件很簡單，但在剛剛說Hello world的時候我們怎麼知道要怎麼產生出一個div物件呢？</p>
<p>React為了讓開發方便就同時提出了一個JSX syntax的方式，接下來我們直接看看JSX的話會長什麼樣子吧</p>
<pre><code>var HelloMessage = React.createClass({
      render: function() {
        return &lt;div&gt;Hello {this.props.name}&lt;/div&gt;;
      }
});

React.render(&lt;HelloMessage name=&quot;Blackie&quot; /&gt;, mountNode);
</code></pre><p>有沒有覺得很熟悉很簡單了，透過JSX我們可以快速地進行開發</p>
<h4 id="Hello-world-with-JSX-Syntax"><a href="#Hello-world-with-JSX-Syntax" class="headerlink" title="Hello world with JSX Syntax"></a>Hello world with JSX Syntax</h4><p><a class="jsbin-embed" href="http://jsbin.com/zezebu/3/embed?html,js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>因為如果使用一般的JS Bin會出現下面的錯誤</p>
<p><img src="JS%20Bin%20Error.png" alt="Error"></p>
<p>這邊為了做出JSX可以在JS Bin上面執行的結果使用了<a href="http://react.rocks/example/6to5_JSBin" target="_blank" rel="external">6to5 JS Bin</a></p>
<p>可以看到如果使用JSX的話記得要加上</p>
<pre><code>&lt;script src=&quot;xxxx/JSXTransformer.js&quot;&gt;&lt;/script&gt;
</code></pre><p>這行的作用，主要就是去讓JSXTransformer.js查詢並針對所有的script type為text/jsx的內容作轉換。</p>
<p>在開發的時候我們可以透過JSX幫我快速地寫出我們想要的畫面，但因為JSX是一種結合XML語法的pre-compile結果，所以如果是要正式發佈的話還是轉換成純Javascript的內容，這樣才可以使render產生畫面的速度加快。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完介紹與簡單實作，總結一下為什麼想用Reactjs</p>
<ul>
<li>單一流程<ul>
<li>簡化以往對於UI(View)更新的方向，捨棄資料綁定的概念，改用重繪的架構，確保每個資料都能夠更新並顯示。這使得發生問題或新增修改功能時會更加快速上手</li>
</ul>
</li>
<li>Virtual DOM<ul>
<li>比操作DOM來說效能更好的解決方法，能在大量且頻繁的更新情況下，更快速的反應畫面異動結果</li>
</ul>
</li>
<li>強化Component概念<ul>
<li>強化小模組單一功能的component。這除了縮小每個功能的開發範圍與可重複利用重組任意<br>Component，也讓測試可以被執行也應該要以測試為前提進行開發(TDD)</li>
</ul>
</li>
</ul>
<p>下一次會用簡單的Demo解說React如何使用FLUX這個架構，有興趣先了解FLUX的流程可以先參考另外一篇<a href="https://blackie1019.github.io/2015/04/13/FLUX-Introduction/">FLUX Introduction</a></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://jamestw.logdown.com/posts/207346-a-preliminary-study-on-reactjs" target="_blank" rel="external">初探Reactjs</a></li>
<li><a href="http://www.sitepoint.com/getting-started-react-jsx/" target="_blank" rel="external">Getting Started with React and JSX</a></li>
<li><a href="http://www.tivix.com/blog/react-js-the-new-kid-on-the-block/" target="_blank" rel="external">React JS: The new kid on the block</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FLUX Introduction]]></title>
      <url>https://blackie1019.github.io/2015/04/14/FLUX-Introduction/</url>
      <content type="html"><![CDATA[<p>FLUX是一個由Facebook提出來的開發架構(FLUX 是一個 Pattern 而不是一個正式的框架)，目的是在解決所謂的MVC在大型商業網站所存在的問題，把沒有條理跟亂七八糟的架構做一個流程規範的定義。</p>
<a id="more"></a>
<h2 id="About-FLUX"><a href="#About-FLUX" class="headerlink" title="About FLUX"></a>About FLUX</h2><p>以下內容參考<a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">What is Flux?</a> 這篇的介紹很多，有興趣請先到原文出處學習與感謝分享。</p>
<p>這邊先提到一下兩個主軸:</p>
<h3 id="FLUX希望作到的事情"><a href="#FLUX希望作到的事情" class="headerlink" title="FLUX希望作到的事情"></a>FLUX希望作到的事情</h3><ul>
<li>Use explicit data instead of derived data</li>
<li>Separate data from view state</li>
</ul>
<h3 id="FLUX希望帶來的好處"><a href="#FLUX希望帶來的好處" class="headerlink" title="FLUX希望帶來的好處"></a>FLUX希望帶來的好處</h3><ul>
<li>Improved data consistency</li>
<li>Easier to pinpoint root of a bug</li>
<li>More meaingful unit tests</li>
</ul>
<p>解說可以看一下這部影片Facebook官方用自己的網站解說FLUX的起源與MVC在FB遇到的問題(24分前是FLUX, 24後是ReactJS)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nYkdrAPrdcw?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v" frameborder="0" allowfullscreen></iframe>

<h3 id="MVC與遇到的問題"><a href="#MVC與遇到的問題" class="headerlink" title="MVC與遇到的問題"></a>MVC與遇到的問題</h3><p>在介紹FLUX前，先讓大家了解一下目前普遍在使用的MVC架構</p>
<p><img src="http://fluxxor.com/images/mvc-simple.png" alt="A simple MVC flow"></p>
<p>上面這是一個MVC架構所定義的流程與各流程的內容, 我們將一個網頁程式分為三項組成的要素:</p>
<ul>
<li>Controller</li>
<li>Model</li>
<li>View</li>
</ul>
<p>MVC普遍被大家用在目前的網站開發專案當中，因為它簡單方便的幫我們分別定義了各層需要異動的地方，把關注點隔離開來(separation of concerns，SOC)。但隨這著專案的Controller,Model與View變多沒有限制的流程也讓他產生了一些問題。</p>
<p><img src="http://fluxxor.com/images/mvc-complex.png" alt="A more complex MVC flow"></p>
<p>而上面是一個複雜的MVC流程，這也是比較貼近我們實務上大家遇到的架構</p>
<p>比較起來很快就發現了一點，當我們功能越多，提供的Controller, Model, View關聯愈複雜時，往往會忘了哪一個連去哪一個，這會讓我們的架構定義的越來越發散，久了就不知道什麼才是正確的架構，而這也會讓我們難以維護跟修改，甚至擴大了測試範圍…。</p>
<p>傳統的雙向資料綁定會造成連鎖更新，不容易去預測一個單一互動所造成的改變結果，這也是為什麼擴大了測試範圍的原因。<br>原文如下:</p>
<blockquote>
<p>We found that two-way data bindings led to cascading updates, where changing one object led to another object changing, which could also trigger more updates. As applications grew, these cascading updates made it very difficult to predict what would change as the result of one user interaction. When updates can only change data within a single round, the system as a whole becomes more predictable.</p>
</blockquote>
<h2 id="FLUX介紹"><a href="#FLUX介紹" class="headerlink" title="FLUX介紹"></a>FLUX介紹</h2><p>接著我們先來介紹FLUX的中心思想打造單一的資料流進行方式(one-way data flow)，相對於MVC只定義了三個角色的功能與關係，FLUX更明確的定義了一個資料進行的方式，使得大家更容易遵守規則。</p>
<ul>
<li>####Actions<ul>
<li>Helper methods that facilitate passing data to the Dispatcher</li>
</ul>
</li>
<li>####Dispatcher<ul>
<li>Receives actions and broadcasts payloads to registered callbacks</li>
</ul>
</li>
<li>####Stores<ul>
<li>Containers for application state &amp; logic that have callbacks registered to the dispatcher</li>
</ul>
</li>
<li>####Controller Views&amp;View  <ul>
<li>React Components that grab the state from Stores and pass it down via props to child components.</li>
</ul>
</li>
</ul>
<p>這邊FLUX使用了Dispatcher這樣的一個唯一物件(singleton)來管理一到多個Store，而每個Store可對應一個View的概念來提供呈現所需資料，而當需要增加view的互動功能時，則透過向Dispatcher註冊Action的方式來達到事件的觸發。 整個資料的處理流程就改變為下面的樣貌：</p>
<p><img src="http://fluxxor.com/images/flux-simple.png" alt="A simple flux flow"></p>
<p>這邊要注意，因為FLUX的大前提是建立一個單一的資料進行方式，所以非常不建議為了view的顯示而跳過步驟直接修改Store，這樣又會讓架構跟先前的MVC提的遇到一樣不明確的問題。</p>
<p>與頁面上各控制項的互動如下圖</p>
<p><img src="FLUX%20flow.png" alt="FLUX control flow"></p>
<p>在FLUX架構上，要避免從Store外部直接改變Store。我們可以透過使用 window.DispatchEvent 送出CustomEvent的方式，並在Store中接收CustomEvent來做到。 簡單來講就是維持他單一變化的flow，避免架構上出現壞味道。</p>
<h2 id="Cowork-with-Web-service"><a href="#Cowork-with-Web-service" class="headerlink" title="Cowork with Web service"></a>Cowork with Web service</h2><p>這邊找到一張先前看到的完整解釋FLUX架構如何跟Web Service的流程圖，下圖顯示了一個資料如何從Web service拿到後到畫面顯示以及如何互動去取得其他資料來呈現。</p>
<p><img src="archieture.png" alt="with service"></p>
<h2 id="手工打造FLUX架構"><a href="#手工打造FLUX架構" class="headerlink" title="手工打造FLUX架構"></a>手工打造FLUX架構</h2><p>這邊就用JS原生的語法來建立一個簡單的FLUX架構的範例吧</p>
<p><a class="jsbin-embed" href="http://jsbin.com/sutuku/20/embed?js,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>上面這範例是參考Gasolin大大的文章實作的，請參考<a href="http://blog.gasolin.idv.tw/2014/11/flux-javascript.html" target="_blank" rel="external">使用 FLUX 架構的概念，漸進改善一般 Javascript 程式碼的組織方式</a>這篇好文。</p>
<p>從範例來看Store 與 App 可以分開來測試，這對大型App是很重要的，每個測試環節應該確保該function可以運作。</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看起來FLUX真的很單純，用事件註冊與驅動指派的方式來統一管理資料處理的流程，不讓架構在大量增加時有所崩壞，而且應該可以是一種蠻適合JS的開發模式，又可透過原生的JS實作(無論你用什麼框架應該都可以實作)。</p>
<p>在FLUX架構下，搭配View這邊頻繁DOM異動的做法就是Always Re-render! 這也是FB搭配FLUX推出的另外一個JS框架<a href="https://facebook.github.io/react/" target="_blank" rel="external">ReactJS</a>提出Virtual DOM的概念，When data changes, React re-renders the component 透過這樣的方式來改善頻繁的DOM異動。</p>
<p>如果對FLUX有心得的朋友也麻煩指導小弟一下，看看是不是有什麼誤解，也感謝大家的指教。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">What is Flux?</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/05/facebook-mvc-flux" target="_blank" rel="external">Facebook：MVC不适合大规模应用，改用Flux</a></li>
<li><a href="http://blog.roy.tw/2015/02/05/introduction-of-flux" target="_blank" rel="external">Flux 介紹教學</a></li>
<li><a href="http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html" target="_blank" rel="external">Flux: Actions and the Dispatcher</a></li>
<li><a href="https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture" target="_blank" rel="external">Getting to know FLUX the React js architecture</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> FLUX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[function expression(函式陳述式) VS declaration (函式運算式)]]></title>
      <url>https://blackie1019.github.io/2015/04/10/javascript-function-expression-vs-declaration/</url>
      <content type="html"><![CDATA[<p>先前寫過一篇<a href="https://blackie1019.github.io/2014/01/13/javascript-call-method/">[Javascript]Call method(呼叫函式)</a>關於函數宣告,這邊進階一下做一個比較。</p>
<a id="more"></a>
<p>在開始前, 先來回憶一下如何自定一個JS函數</p>
<h2 id="How-to-create-JS-custom-function"><a href="#How-to-create-JS-custom-function" class="headerlink" title="How to create JS custom function"></a>How to create JS custom function</h2><h3 id="第一種-declaration-函式運算式"><a href="#第一種-declaration-函式運算式" class="headerlink" title="第一種 - declaration (函式運算式)"></a>第一種 - declaration (函式運算式)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">callTest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	console.log(<span class="number">123</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">callTest();</div></pre></td></tr></table></figure>
<h3 id="第二種-function-expression-函式陳述式"><a href="#第二種-function-expression-函式陳述式" class="headerlink" title="第二種 - function expression(函式陳述式)"></a>第二種 - function expression(函式陳述式)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> callTest=function()&#123;</div><div class="line">	console.log(<span class="number">123</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">callTest();</div></pre></td></tr></table></figure>
<p>大致上常見的有上面兩種, 其中第二種的變形使用很多變化，下面歸納兩點差異讓大家分辨</p>
<h2 id="What’s-different"><a href="#What’s-different" class="headerlink" title="What’s different"></a>What’s different</h2><ul>
<li><p>1</p>
<p>  function declaration (函式運算式)最大差異就是呼叫自定函式時可在function前，如剛剛的第一種我們可以改成下面的樣子依舊可以正常執行</p>
  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">callTest();</div><div class="line"></div><div class="line"><span class="function">function <span class="title">callTest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	console.log(<span class="number">123</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  但如果改用function expression(函式陳述式)成下面這樣就會發現出現問題(變數未宣告)</p>
  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">callTest();</div><div class="line"></div><div class="line"><span class="keyword">var</span> callTest=function()&#123;</div><div class="line">	console.log(<span class="number">123</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>2</p>
<p>  而在定義上，declaration (函式運算式)只要被定義過後就無法從記憶體中刪除並回收，而function expression(函式陳述式)則是正常的跟著變數生命週期運作, 所以可能定義完後則直接被回收或是跟著變數的參考被移除時就結束等待GC回收,如下就是直接被回收與變數被回收的範例</p>
<ul>
<li><p>declaration (函式運算式)直接被回收</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">（function(val)&#123;</div><div class="line">	console.log(val);</div><div class="line">&#125;)(<span class="number">123</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>function expression(函式陳述式)變數被回收</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> callTest=function()&#123;</div><div class="line">	console.log(<span class="number">123</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">callTest();</div><div class="line">callTest=<span class="literal">null</span>;</div><div class="line">callTest();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完定義跟比較後應該很明確的可以知道以後什麼情況要用 <em>Function Expression</em> 與 <em>Declaration</em> 了，不要再誤用或以為都一樣摟！</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular FullStack developer with Yeoman]]></title>
      <url>https://blackie1019.github.io/2015/03/28/angular-fullstack-developer-with-yeoman/</url>
      <content type="html"><![CDATA[<p>這系列文章會用Yeoman的angular-fullstack來做介紹。</p>
<a id="more"></a>
<p>開發環境是Mac+sublimeText</p>
<p>因為是MEAN架構主要會用到以下幾項</p>
<ul>
<li>MongoDB</li>
<li>Express</li>
<li>AngularJS</li>
<li>NodeJS</li>
<li>Grunt</li>
<li>Bower</li>
</ul>
<p>額外會用到的有之後會依序介紹。接下來讓我們從實際來上手一次，如果想先知道結果會長怎樣可以先去<a href="http://fullstack-demo.herokuapp.com/" target="_blank" rel="external">Demo</a>這邊瞧瞧。</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ul>
<li>先安裝好NodeJs(with npm)</li>
<li><p>安裝 yeoman</p>
<pre><code>npm install -g yo
</code></pre></li>
<li><p>安裝 generator(<a href="https://github.com/DaftMonk/generator-angular-fullstack" target="_blank" rel="external">angular-fullstack</a>)</p>
<pre><code>npm install -g generator-angular-fullstack
</code></pre></li>
<li><p>建立一個資料夾然後進入該資料夾的路徑內</p>
<pre><code>mkdir my-new-project &amp;&amp; cd $_
</code></pre></li>
<li><p>使用yeoman建立新專案</p>
<pre><code>yo angular-fullstack [app-name]
</code></pre></li>
</ul>
<p>建立的過程需要一點時間而且他會幫你更新相依性套件，這邊要稍微注意一下權限，有必要的話記得把npm globle安裝路徑的權限設定為可讀</p>
<ul>
<li><p>這邊我們沒有要在本機建立MongoDB，所以我們使用<a href="https://mongolab.com/databases/webapp" target="_blank" rel="external">MongoLab</a>來幫我們建置，請在註冊好帳號後新增一個Database跟新增一個Users來讓他連線</p>
<p>  <img src="001.png" alt="001"></p>
<p>  <img src="002.png" alt="002"></p>
</li>
</ul>
<h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><p>建立完後我們先來看一下整個專案架構</p>
<p><img src="01.png" alt="01"></p>
<p>有玩過一下上面的Demo那你大概會知道我們產生的這個樣品會有兩個跟DB有關的功能</p>
<ul>
<li>註冊/登入 user</li>
<li>新增/移除 thing</li>
</ul>
<p>所以你可以在api資料夾下面找到thing與user資料夾，裡面就是用Mongoose幫你建立的資料存取</p>
<p><img src="03.png" alt="03"></p>
<p>而我們現在就要把這個範例的連線換到我們剛剛自己註冊的MongoLab上面，這邊你會需要修改一下config\environment資料夾裡面的一些連線設定，MongoLab的uri連線格式如下：</p>
<pre><code>mongodb://&lt;dbuser&gt;:&lt;password&gt;@&lt;yourdsnumber&gt;.mongolab.com:&lt;yourdbport&gt;/&lt;databasename&gt;
</code></pre><p><img src="04.png" alt="04"></p>
<p>以上設定完成後你就可以透過下面指令在run起你的網站</p>
<pre><code>grunt server
</code></pre><p>此時你看到成功建立後就可以在瀏覽器輸入<a href="http://localhost:9000/" target="_blank" rel="external">http://localhost:9000/</a> 來看看你的網站</p>
<p><img src="05.png" alt="05"></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> AngularJS </tag>
            
            <tag> NodeJS </tag>
            
            <tag> MAN </tag>
            
            <tag> Yeoman </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript Floating-Point Calculation]]></title>
      <url>https://blackie1019.github.io/2015/02/28/javascript-floating-point-calculation/</url>
      <content type="html"><![CDATA[<p>前陣子在幫同事改一段以前的程式的時候發現Javascript在做Float數值的運算時有bug，會導致簡單的計算出問題，當下去找了一下資料有幾個處理方式整理給大家。</p>
<a id="more"></a>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>在開始前我們直接看下面的範例就知道問題在哪邊</p>
<p><a class="jsbin-embed" href="http://jsbin.com/joqutu/1/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>這邊三個簡單的計算，你可以發現前面兩個都正確，第三個結果就怪了。<br>小學的99乘法表告訴我們99是81，但這個結果的尾數竟然不是1….就知道見鬼了</p>
<p>為什麼Javascript的浮點數計算會有這樣的差異呢？</p>
<p>因為電腦沒辦法正確的顯示0.1,0.2,0.3這樣的浮點數(因為數值都是0101的組成)，所以透過0101組成浮點數時就產生了誤差。我們看到的0.1其實是已經經過進位後的結果(原先可能是0.1000000000000001這樣的值)，所以當我們做運算後就會產生更大的誤差。</p>
<p>對於浮點數的基本組成與相關問題可以參考<a href="http://floating-point-gui.de/" target="_blank" rel="external">這篇文章</a>，解釋得非常詳細。</p>
<p>這邊幫大家在Google大神的協助下找了幾張圖來參考。</p>
<p>首先一個簡單的浮點數可以分為兩部分：</p>
<p><img src="200px-Float_mantissa_exponent.png" alt="basic"></p>
<p>而透過二進位表示法(IEEE 754)來存放時則如下：</p>
<p><img src="iee.png" alt="iee"></p>
<p>實際的運算邏輯flow大致可以參考下圖</p>
<p><img src="flp_addsub_block.gif" alt="flow"></p>
<h2 id="Solution-without-plugin"><a href="#Solution-without-plugin" class="headerlink" title="Solution without plugin"></a>Solution without plugin</h2><p>簡單來講我們可以用Number.prototype.toFixed()這個數值型別的function來幫我們確認要計算到多精準的小數位</p>
<p>開始前我們先參考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" target="_blank" rel="external">MDN</a>給我們的說明</p>
<h3 id="Method-of-Number"><a href="#Method-of-Number" class="headerlink" title="Method of Number"></a>Method of Number</h3><p>Implemented in JavaScript 1.5</p>
<p>ECMAScript Edition ECMAScript 3rd Edition</p>
<h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>number.toFixed( [digits] )</p>
<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p>digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.</p>
<h3 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h3><p>A string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation.</p>
<h3 id="Throws"><a href="#Throws" class="headerlink" title="Throws"></a>Throws</h3><p>RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well. TypeError If this method is invoked on an object that is not a Number.</p>
<p>如上面的說明，由於他是ECMAScript的內建語法所以我們不需要特別用什麼套件，只要確任瀏覽器支援就可以了(目前全部瀏覽器都支援)</p>
<p>我們將剛剛的一開始的三個範例改寫如下</p>
<p><a class="jsbin-embed" href="http://jsbin.com/recati/2/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>如此一來我們就可以正確地顯示浮點數運算過後的值了。</p>
<p>從解法我們發現如果用 <em>number.toFixed( [digits] ))</em> 這樣的解法需要先知道到底結果是小數點第幾位，但實務上我們有很多情況會不知道該數值到底第幾位.所以可能還要把多算出來的0給處理掉，如下：</p>
<p><a class="jsbin-embed" href="http://jsbin.com/jetizu/1/embed?js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<h2 id="Solution-using-Math-js"><a href="#Solution-using-Math-js" class="headerlink" title="Solution using Math.js"></a>Solution using Math.js</h2><p><img src="logo.png" alt="logo"></p>
<p>這邊介紹一個方便的javascript plugin來幫大家解決數學計算的問題</p>
<p>使用上很簡單，只要記得加上math.js到你的頁面上即可，沒有其他library dependency。</p>
<p>下面就快速的把先前的範例用Math.js呈現給大家看</p>
<p><a class="jsbin-embed" href="http://jsbin.com/tagili/2/embed?html,js,console" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>這邊可以看到透過Math.js我們就可以很簡單地取到精准度為小數點後10位的結果也不會有多餘的0，是不是很方便呢！</p>
<p>其實Math.js還有很多很酷的功能，他也支援Nodejs與其他框架使用，大家趕快把它列入專案必裝的套件吧。</p>
<p><a href="http://mathjs.org/" target="_blank" rel="external">Math.js</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>老實說學生時代只有印象中聽過浮點數計算透過二進位儲存有誤差，但我沒想到學問真的很大….也沒想到出社會還會看到這類型問題，也很感謝有遇到這樣的問題讓自已能夠在多收穫一些知識。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Load testing with Visual Studio]]></title>
      <url>https://blackie1019.github.io/2014/12/31/how-to-make-load-testing-with-visual-studio/</url>
      <content type="html"><![CDATA[<p>這邊分享一下給大家手把手(step by step)介紹一下如何建置Load Testing的專案，內容主要是我之前在公司對QA們做的training material，以英文為主，這邊如果有更好的內容會再把相關內容更新補齊上去。</p>
<a id="more"></a>
<p><img src="0.jpg" alt="0"></p>
<h2 id="About-Load-Testing"><a href="#About-Load-Testing" class="headerlink" title="About Load Testing"></a>About Load Testing</h2><p><img src="1.png" alt="1"></p>
<h3 id="Performance-testing"><a href="#Performance-testing" class="headerlink" title="Performance testing"></a>Performance testing</h3><p>效能測試（Performance testing），效能測試的目標不是要找缺陷（bug），而是要消除瓶頸和替未來的回歸測試（regression tests）建立一個底線，執行效能測試的進行是在一個謹慎控制的量測和分析流程內，理想上軟體是在夠穩定的情況下進行測試，因此測試的過程可以很順利的進行。定義期望組對有意義的效能測試而言是必要的。</p>
<ul>
<li>Concurrent user<ul>
<li>在線的使用者或HTTP連線的期望負荷</li>
</ul>
</li>
<li>Response time<ul>
<li>允許的回應時間</li>
</ul>
</li>
</ul>
<h3 id="Stress-testing"><a href="#Stress-testing" class="headerlink" title="Stress testing"></a>Stress testing</h3><p>壓力測試（Stress testing）,藉由超出系統資源或拿走系統資源（有時被稱為「負面測試」（negative testing））的情況下測試以嘗試中斷系統，主要的目的在確保系統失效和正常地回復。</p>
<p>效能測試需要一個受控制的環境和重覆量測，壓力測試則隨興地引發混亂和不可預測，如：</p>
<ul>
<li>倍數的單位數目(Base Amount)的在線的使用者/HTTP連線數量</li>
<li>隨機地關閉和重啟網路上連接到伺服器的交換機/路由器的埠（例如透過SNMP命令）</li>
<li>關閉資料庫再開啟</li>
<li>在系統執行時重建RAID陣列</li>
<li>執行消耗網頁/資料庫伺服器資源（CPU、記憶體、磁碟、網路）的程序並確保程式可以正常執行</li>
</ul>
<h3 id="Load-testing"><a href="#Load-testing" class="headerlink" title="Load testing"></a>Load testing</h3><p>負載測試(Load testing)是效能測試與調校的一部份，在這個前題下，這意味藉由自動工具不斷地增加負載到系統，對網頁程式而言，負載被定義成在線使用者或HTTP連線。</p>
<p>定義成提供系統所能執行最大工作量下運作測試的流程，負載測試通常被稱為「容量測試」、或「壽命（longevity）/耐力（endurance）測試」。</p>
<p>負載測試的目標:</p>
<ul>
<li>揭露粗略測試的缺陷，如：記憶體控制的缺陷、記憶體洩露（leaks）、緩衝區溢位（buffer overflows）等</li>
<li>當效能測試時確保應用程式滿足效能建立的底線，這個是藉由執行回歸測試完成以確保應用程式的特定最大負載。</li>
</ul>
<h3 id="Test-Controller-and-Test-Agent"><a href="#Test-Controller-and-Test-Agent" class="headerlink" title="Test Controller and Test Agent"></a>Test Controller and Test Agent</h3><p>在Load Testing實際執行當中，你會需要透過VS去建立一個 Load Testing Solution，接著將這Solution透過Test Controller來執行，而Test Controller會去控制它底下的 Test Agent ，分配對應的主機實際去跑你所安排的腳本。</p>
<p><img src="2.jpg" alt="2"></p>
<h2 id="Create-Visual-Studio-Load-Testing-Solution"><a href="#Create-Visual-Studio-Load-Testing-Solution" class="headerlink" title="Create Visual Studio Load Testing Solution"></a>Create Visual Studio Load Testing Solution</h2><p>整個流程可以分為下列幾個步驟:</p>
<ol>
<li>Install Visual Studio 2012(need install SQL Server 2008 Express or higher)</li>
<li>Create Web Performance and Load Test solution</li>
<li>Modify and complete Web Performance Test<ul>
<li>Record action by browser</li>
<li>Remove unnecessary request item</li>
<li>Add necessary Validation Rule</li>
<li>Add Data Source and bind data to input</li>
<li>Add Context Parameters to binding URL</li>
<li>Configure response time goal, think time and other setting on each request item</li>
</ul>
</li>
<li>Added Load Test to project and added existing Web Performance Test<ul>
<li>Added New Load Test to project</li>
<li>Set Test Mix, Browser Mix, Network Mix</li>
<li>Set Load Pattern</li>
<li>Configure Run Settings</li>
</ul>
</li>
<li>Added Counter(optional)</li>
</ol>
<p>接下來一步步帶大家開始建立第一個Load Testing Solution</p>
<h3 id="Create-Web-Performance-and-Load-Test-solution"><a href="#Create-Web-Performance-and-Load-Test-solution" class="headerlink" title="Create Web Performance and Load Test solution"></a>Create Web Performance and Load Test solution</h3><p>開啟VS後選擇File&gt;New&gt;Project&gt;Web Performance and Load Test Project，建立一個新的Load Testing Solution</p>
<p><img src="3.png" alt="3"></p>
<p><img src="4.png" alt="4"></p>
<h3 id="Add-Web-Performance-Testing"><a href="#Add-Web-Performance-Testing" class="headerlink" title="Add Web Performance Testing"></a>Add Web Performance Testing</h3><p>建立 Web Performance Testing的方法分為錄製操作行為(record action)與手動撰寫程式兩種方式，但都是透過WebRequest 這個類別來取得每一步的結果與驗證是否完成，進而達成整個Web Performance Test的建立</p>
<h4 id="Create-by-Wizard-record-action"><a href="#Create-by-Wizard-record-action" class="headerlink" title="Create by Wizard(record action)"></a>Create by Wizard(record action)</h4><p>透過錄製的方式我們可以在不用直接撰寫程式碼的過程當中建立起一系列的操作步驟，而每個步驟我們都可以去儲存Request的回傳結果或是透過一個CSV,DB塞入特定或亂數的Paramaters給Request。當然，我們也可以加上驗證標準來強化定義流程的每一步成功與失敗的準則是什麼(超過三秒沒回應或是沒有給予特定的回傳內容)</p>
<ul>
<li><p>step-1</p>
<p>  <img src="5.png" alt="5"></p>
</li>
<li><p>step-2</p>
<p>  <img src="6.png" alt="6"></p>
</li>
<li><p>step-3</p>
<p>  <img src="7.png" alt="7"></p>
</li>
<li><p>step-4</p>
<p>  <img src="8.png" alt="8"></p>
</li>
<li><p>step-5</p>
<p>  <img src="9.png" alt="9"></p>
</li>
<li><p>step-6</p>
<p>  <img src="10.png" alt="10"></p>
</li>
<li><p>step-7</p>
<p>  <img src="11.png" alt="11"></p>
</li>
</ul>
<h4 id="Create-by-Code"><a href="#Create-by-Code" class="headerlink" title="Create by Code"></a>Create by Code</h4><p>如果我們需要每一步都做到很彈性或是大型的測試腳本，通常我們都會捨棄錄製改用直接撰寫每一個WebRequest的內容來達到更多的彈性需求。</p>
<p><strong><strong>這邊要稍微注意一下，我們可以將錄製的.webtest檔案產生CodeBase的測試腳本(.cs)，但沒辦法將任一個.cs檔案轉回.webtest。</strong></strong></p>
<p><img src="12.png" alt="12"></p>
<h3 id="Add-Load-Testing"><a href="#Add-Load-Testing" class="headerlink" title="Add Load Testing"></a>Add Load Testing</h3><p>接著我們開始準備我們剛剛建立測試的主要檔案(.loadtest)。每一個.loadtest檔案可以在設定包含多個.webtest(或.cs)做為要執行Load Testing時候的腳本。</p>
<p><img src="13.png" alt="13"></p>
<h4 id="Configure-Scenario-setting"><a href="#Configure-Scenario-setting" class="headerlink" title="Configure Scenario setting"></a>Configure Scenario setting</h4><p>Once you create .loadtest file, it will added default scenario and you can add more with UI(right click to add).<a href="http://msdn.microsoft.com/en-us/library/ff406966.aspx" target="_blank" rel="external">MSDN:Load Test Scenario Properties</a></p>
<p><img src="14.png" alt="14"></p>
<ul>
<li><p><strong>STEP-1:</strong></p>
<ul>
<li>Think times are used to simulate human behavior that causes people to wait between interactions with a Web site.</li>
<li>The think profile is a setting that applies to a scenario in a load test. The setting determines whether the think times that are saved in the individual Web performance tests are used during the load test.</li>
<li><p>If you want to use think times in some Web performance tests but not in others, you must place them in different scenarios.</p>
<p><img src="15.png" alt="15"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997697.aspx" target="_blank" rel="external">MSDN:Editing Think Times to Simulate Website Human Interaction Delays in Load Tests Scenarios</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-2:</strong></p>
<ul>
<li><p>The load pattern properties specify how the simulated user load is adjusted during a load test. Visual Studio Ultimate provides three built-in load patterns: constant, step, and goal-based.</p>
<p><img src="16.png" alt="16"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997551.aspx" target="_blank" rel="external">MSDN:Editing Load Patterns to Model Virtual User Activities</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-3:</strong></p>
<ul>
<li><p>Specifies the test mix model that is used for the load test.</p>
<p><img src="17.png" alt="17"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997561.aspx" target="_blank" rel="external">MSDN:Editing the Test Mix to Specify Which Web Browsers Types in a Load Test Scenario</a></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997826.aspx" target="_blank" rel="external">MSDN:Editing Text Mix. Models to Specify the Probability of a Virtual User Running a Test</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-4:</strong></p>
<ul>
<li><p>Specifies the network mix for the load test. You can specify which network types to include and their load distribution.</p>
<p><img src="18.png" alt="18"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997557.aspx" target="_blank" rel="external">MSDN:Specifying Virtual Network Types in a Load Test Scenario</a></p>
</li>
</ul>
</li>
<li><p><strong>STEP-5:</strong></p>
<ul>
<li><p>Specifies the Web browser mix for the load test. You can specify different Web browser types and their load distribution.</p>
<p><img src="19.png" alt="19"></p>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997561.aspx" target="_blank" rel="external">MSDN:Editing the Test Mix to Specify Which Web Browsers Types in a Load Test Scenario</a></p>
</li>
</ul>
</li>
</ul>
<h4 id="Configuration-Run-setting"><a href="#Configuration-Run-setting" class="headerlink" title="Configuration Run setting"></a>Configuration Run setting</h4><p>Open results of recently run tests</p>
<ul>
<li>From the VIEW menu&gt;Windows &gt; Test Results&gt; Select Run list&gt;choose the test run you want to open or choose Manage test runs to browse for a test from the Test Runs window.</li>
<li><em>(Optional)</em> In the Result list, right-click a test and choose View Results to see more - information about that particular test.</li>
<li><em>(Optional)</em> To view test result details, including any data and diagnostic adapter attachments, choose Run Details in the toolbar.</li>
<li><em>(Optional)</em> If you have Office excel 2010 or later, you can generate with excel add-in(<a href="http://msdn.microsoft.com/en-us/library/dd997707.aspx" target="_blank" rel="external">guide</a>)</li>
</ul>
<p><img src="20.png" alt="20"></p>
<h3 id="Open-Load-Testing-Report"><a href="#Open-Load-Testing-Report" class="headerlink" title="Open Load Testing Report"></a>Open Load Testing Report</h3><p><img src="21.png" alt="21"></p>
<h2 id="Tips-for-setting"><a href="#Tips-for-setting" class="headerlink" title="Tips for setting"></a>Tips for setting</h2><p><img src="22.jpg" alt="22j"></p>
<h3 id="Tip-1-–-How-to-set-User-Load-with-gradually-increased"><a href="#Tip-1-–-How-to-set-User-Load-with-gradually-increased" class="headerlink" title="Tip 1 – How to set User Load with gradually increased"></a>Tip 1 – How to set User Load with gradually increased</h3><ul>
<li>Set it on .loadtest &gt; Load Pattern</li>
<li><p>For example, to see how your server or servers perform as the user load increasing to 2,000 users, you might run a 10-hour load test using a step load pattern with the following properties:</p>
<ul>
<li>Initial User Count: 100</li>
<li>Maximum User Count: 2000</li>
<li>Step Duration (seconds): 1800</li>
<li>Step Ramp Time (seconds): 20</li>
<li>Step User Count: 100</li>
<li><p>These settings have the load test running for 30 minutes (1800 seconds) at user loads of 100, 200, 300, up to 2,000 users.</p>
<p><a href="http://msdn.microsoft.com/en-us/library/ff423845.aspx" target="_blank" rel="external">How to: Specify the Step Ramp Time Property for a Step Load Pattern</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="Tip-2-–-How-to-binding-data-with-CSV-DB-or-constant"><a href="#Tip-2-–-How-to-binding-data-with-CSV-DB-or-constant" class="headerlink" title="Tip 2 – How to binding data with CSV, DB or constant"></a>Tip 2 – How to binding data with CSV, DB or constant</h3><ul>
<li>Using double curly brackets to binding data to your content<ul>
<li>CSV or DB<ul>
<li>Add data source and select data type</li>
<li>Select “properties”</li>
<li>Set the property to the correct data source field, value is like
			{{DataSource1.Filename#csv.ColumnTitle}}
		</li>
</ul>
</li>
<li>Confirm the property binding</li>
<li>Constant<ul>
<li>Using Content Text directly<br><a href="https://msdn.microsoft.com/en-us/library/bb385833%28v%3Dvs.100%29.aspx" target="_blank" rel="external">MSDN: Walkthrough: Adding Data Binding to a Web Performance Test (CSV File)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Tip-3-–-How-to-pass-response-data-to-next-request"><a href="#Tip-3-–-How-to-pass-response-data-to-next-request" class="headerlink" title="Tip 3 – How to pass response data to next request"></a>Tip 3 – How to pass response data to next request</h3><ul>
<li>Using Context parameters to store data and binding it to next.</li>
</ul>
<p><img src="22.png" alt="22p"></p>
<h3 id="Tip-4-–-How-to-make-binding-data-amd-pick-up-with-random"><a href="#Tip-4-–-How-to-make-binding-data-amd-pick-up-with-random" class="headerlink" title="Tip 4 – How to make binding data amd pick up with random"></a>Tip 4 – How to make binding data amd pick up with random</h3><ul>
<li>If your source have grant data and you want pick up is random,  you can set it on data source directly.</li>
</ul>
<p><img src="23.png" alt="23"></p>
<h3 id="Tips-5-–-Binding-Data-Source-with-CSV-file-but-execute-with-Error"><a href="#Tips-5-–-Binding-Data-Source-with-CSV-file-but-execute-with-Error" class="headerlink" title="Tips 5 – Binding Data Source with CSV file but execute with Error"></a>Tips 5 – Binding Data Source with CSV file but execute with Error</h3><ul>
<li>If your Data Source binding is setting correct by execute show with can found existing Context Parameters, it might Visual Studio known bug with binding data.</li>
<li>Solution is update your .csv file with another title to make binding with correct encoding.</li>
<li>You can confirm encoding is correct by generate code on .webtest file.</li>
</ul>
<p><img src="24.png" alt="24"></p>
<h2 id="One-more-thing-about-Load-Testing"><a href="#One-more-thing-about-Load-Testing" class="headerlink" title="One more thing about Load Testing"></a>One more thing about Load Testing</h2><p><img src="25.jpg" alt="25"></p>
<h3 id="Cowork-with-Test-Controller-and-Test-Agent"><a href="#Cowork-with-Test-Controller-and-Test-Agent" class="headerlink" title="Cowork with Test Controller and Test Agent"></a>Cowork with Test Controller and Test Agent</h3><p>一開始我們有稍微提到Test Controller 與 Test Agent 的關係，現在我們進一步的來看看實際上Test Controller怎麼去控制Test Agent來完成Load Testing.</p>
<p><img src="26.png" alt="26"></p>
<p>從上圖你可以看到其實Test Controller就是指派它底下的每一個Test Agent去Run Tests然後將資料取得回來放置Test controller這邊收集。</p>
<p>如果想要自己動手做，需要詳細的環境建置教學可以參考保哥的<a href="http://blog.miniasp.com/post/2011/03/13/Visual-Studio-Agent-2010-Load-and-Stress-Testing-Installation-Guide.aspx" target="_blank" rel="external">使用 Visual Studio 2010 Ultimate 及 Agent 進行負載壓力測試</a></p>
<h3 id="Remote-Controller-to-doing-Load-Testing"><a href="#Remote-Controller-to-doing-Load-Testing" class="headerlink" title="Remote Controller to doing Load Testing"></a>Remote Controller to doing Load Testing</h3><p>實務上，在做Load Testing的時候通常我們都會針對類似實際運行架構(production environment)進行測試，以確保測試出來的數值是符合真實情況的，所以通常我們的Load Testing Controller 與 Test Agent我們會獨立建立一個Test Rig來分隔實際需要測試的環境。而我們可透過遠端(remote)或直接到Load Testing Controller那台執行我們的腳本。</p>
<p><img src="27.png" alt="27"></p>
<h3 id="Load-Testing-in-the-Cloud-Windows-Azure"><a href="#Load-Testing-in-the-Cloud-Windows-Azure" class="headerlink" title="Load Testing in the Cloud (Windows Azure)"></a>Load Testing in the Cloud (Windows Azure)</h3><p>通常一台Test Agent我們格別放在一台虛擬或實體的主機(server)上，而每台Test Agent因為硬體環境的不同，我們會讓他發送250-1000的測試量，假設你今天需要做一個同時在線人數2000人的測試，每一台你預估可以發送500人，那你會需要四台Test Agent。</p>
<p>以上面的例子來看如果想要做Load Testing但沒有這麼多台主機建立Test Controller and Test Agent也沒關係，你可以直接使用Windows Azure來建立，而且using on-demand, 你隨時可以開啟或提用你的這些主機，透過最符合CP值的方式建立需要花費昂貴費用才能建立的環境。</p>
<h4 id="Graphic"><a href="#Graphic" class="headerlink" title="Graphic"></a>Graphic</h4><p><img src="28.png" alt="28"></p>
<h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p><img src="29.jpg" alt="29"></p>
<h4 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h4><p>如果對Load Testing有興趣想要實際上手玩玩的話建議來這邊實作一下歐，這個Lab連Sample site都會給你所以不用擔心沒有網站可以測試啦!</p>
<ol>
<li>Download <a href="http://code.msdn.microsoft.com/Getting-started-with-17a52e95" target="_blank" rel="external">sample</a>.</li>
<li>From the Solution Explorer, open SampleWebTest.webtest</li>
<li>Select the URL listed in SampleWebTest.webtest file.</li>
<li>Go to the properties list and update the property labelled ‘Url’ to your app’s/website’s URL.<br>5.From the team explorer, please connect to your Visual Studio Online account(<a href="https://app.vssps.visualstudio.com/profile/account?account=true&amp;context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MSwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjIsImF1IjpudWxsLCJjdiI6MTcyMTkyNDg0MiwiZnMiOjAsInN1IjowLCJlciI6MX01" target="_blank" rel="external">Register here</a>).</li>
<li>Open the SampleLoadTest.loadtest file. From the ‘Load Test’ menu, select ‘Run’ -&gt; ‘Selected Test’</li>
<li>The Load test from the cloud will now start and show you graphs of how your application is performing during the load test.</li>
</ol>
<p><img src="30.png" alt="30"></p>
<p>搭配上面的Lab，這邊額外推薦大家使用<a href="http://azure.microsoft.com/zh-tw/services/visual-studio-online/" target="_blank" rel="external">visual-studio-online</a><br>，優點如下摟:</p>
<ul>
<li>5 FREE Basic user licenses</li>
<li>FREE work item tracking for all users</li>
<li>FREE 60 minutes/month of build</li>
<li>FREE 15K virtual user minutes/month of load testing</li>
<li>PREVIEW application monitoring and analytics</li>
</ul>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>執行Load Testing前注意，除了每次都要記得做初始化(IIS reset, System clean等，避免被其他變因影響)，因為這樣的壓力測試其實就是對系統做一次類似來說DDOS的攻擊，所以如果待測網站有類似阻擋DDOS攻擊的防火牆或是WAF，千萬要記得關掉以免影響測試結果。</p>
<p>另外，測試的結果跟你本身錄製的測試腳本有絕大的關係，通常測試結果太過樂觀或悲觀有很大的可能是你根本就搞錯你的測試腳本了，所以測試腳本非常重要。</p>
<p>個人這邊要額外提到一個重點Load Testing本身應該要先建立在有可相信的Web Performance Test，因為這樣才可以先定義什麼叫測試成功與失敗，各衡量指標才會有實際的判別方式。</p>
<p>而初期的測試應該要盡量的單一面向且明確的去定義你所希望測試的項目，例如:我想測試一下我的網站能不能成功上線，這是一個非常籠統且沒有人知道妳想要什麼的一個測試目標。</p>
<p>如果我們將內容換成:我想測試一下我的網站在1000個concurrent user同時使用的情況下，是否正常，這好想比上一個好多了，因為我們說出了一個明確的成功指標 “1000人”，但其實我們還是不知道要測什麼行為。</p>
<p>如果我們再將內容做些更改:我想測試一下我的網站在1000個concurrent user同時登入且使用A功能的情況下能否達成全部三秒內回應且沒有任何Exception的發生，這樣我們就會更明確地去組成一個簡單的Web Performance Test。</p>
<p>記住，Load Testing可由多個Web Performance Test組成，所以不用一個包山包海的Test，猜開成多個透過設定不同的混和或序列執行模式可以更加有彈性的建立符合實際情況的Load Testing，如此才能真實的反應你所想要知道的訊息。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.prudentman.idv.tw/2011/01/performance-vs-load-vs-stress-testing.html" target="_blank" rel="external">效能/負載/壓力測試的分別（Performance vs. load vs. stress testing）</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/dd293551.aspx" target="_blank" rel="external">Setting Up Test Machines to Run Tests or Collect Data</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/ms404662.aspx" target="_blank" rel="external">How to: Save and Open Web Performance and Load Test Results in Visual Studio</a></li>
<li><a href="http://www.visualstudio.com/en-us/get-started/load-test-your-app-vs" target="_blank" rel="external">Load testing in the cloud</a></li>
<li><a href="http://www.visualstudio.com/en-us/get-started/load-test-your-app-vs" target="_blank" rel="external">Configure your project to run load tests in the cloud</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Testing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> Load Testing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Coding Dojo, Kata, Wasa, and Randori]]></title>
      <url>https://blackie1019.github.io/2014/11/14/coding-dojo-kata-wasa-and-randori/</url>
      <content type="html"><![CDATA[<p>最近很紅的幾個名詞，而且看活動蠻好玩的，了解的過程順便整理一下筆記</p>
<a id="more"></a>
<h2 id="Coding-Dojo"><a href="#Coding-Dojo" class="headerlink" title="Coding Dojo"></a>Coding Dojo</h2><p>這是指一個學習的過程或方法，招集一群人有目地的在安全的環境一起學習技術或探索問題，而這過程著重在如何一起學習與解決問題，也會從中加入一些其他的開發方式，例如Pair coding、TDD、Design pattern等來當作主軸，讓大家在過程中都有個主題的方向去學習，既使犯錯了也是很好的教材。</p>
<p>以下稍微解說一下方式與角色：</p>
<p><img src="02.png" alt="02"></p>
<ul>
<li><p>Driver：主要負責寫Code的人，完成即可重回Spectators去準備下一輪挑選</p>
</li>
<li><p>Navigator：負責協除寫Code的人完成並擔任下一個Driver</p>
</li>
<li><p>Spectators：輪流上去成為Navigator的代選者</p>
</li>
</ul>
<p>以上的腳色透過一次固定的時間(約10-15分鐘)的方式輪替角色並從中獲得練習</p>
<p>通常會搭配幾個Rule:</p>
<ul>
<li>Pair Programming</li>
</ul>
<p>學習如何兩個人共同合作寫Code(此時Driver一組有兩個人)</p>
<p><img src="03.jpg" alt="03"></p>
<ul>
<li>TDD</li>
</ul>
<p>依照TDD的方式些撰寫測試案例再來完成功能進而改善code的品質</p>
<p><img src="04.gif" alt="04"></p>
<ul>
<li>Step by Step</li>
</ul>
<p>以能滿足Test的方式一步步完成</p>
<p><img src="05.PNG" alt="05"></p>
<ul>
<li>Call Help</li>
</ul>
<p>如果真的遇到問題絕對不要害怕向Navigator提出求救</p>
<p><img src="06.JPG" alt="06"></p>
<h2 id="Code-Kata"><a href="#Code-Kata" class="headerlink" title="Code Kata"></a>Code Kata</h2><p>這名詞也指的是招式(套路)，通常在學武功的時候都會有幾招固定招式，如下</p>
<p><img src="08.JPG" alt="08"></p>
<p>相同的概念放到Software development裡面其實就是給一些已知的問題讓你練習，如</p>
<p><a href="http://codekata.com/kata/kata01-supermarket-pricing/" target="_blank" rel="external">kata01-supermarket-pricing</a></p>
<p>這樣的既有問題該如何去寫出程式來解決問題。而在實際的開發世界裡面大多數剛踏進這個產業的人往往缺乏相關經驗甚至沒有開發經驗，而Kata就是一個讓他們培養解決問題的經驗最好的練習方式。</p>
<p>而流程上他分為三個部分，類似紅綠燈的：紅、黃、綠</p>
<ul>
<li><p>紅:測試失敗</p>
</li>
<li><p>黃:可以改善功能已達到需求</p>
</li>
<li><p>綠:測試成功</p>
</li>
</ul>
<p>由撰寫第一個測試失敗的Test Case 開始改進，然後實作通過測試(綠燈)後遇到需求變更或Refactoring評估如何改善(黃燈)，然後再繼續實作直到又通過綠燈換下一個</p>
<h2 id="Wasa"><a href="#Wasa" class="headerlink" title="Wasa"></a>Wasa</h2><p><img src="10.JPG" alt="10"></p>
<p>一個寫測試，另外一個人寫程式通過測試，但經過一段時間後兩者調換身分，以此練習TDD與pair programming的開發方式與默契.</p>
<h2 id="Randori"><a href="#Randori" class="headerlink" title="Randori"></a>Randori</h2><p><img src="xpug-coding-dojo-katayahtzee-in-ocp-way-4-728.jpg" alt="Randori"></p>
<ul>
<li><p>Coder：就是1，負責寫Code的人</p>
</li>
<li><p>Copilot：大部分是3，代表其他人，但下一個準備上台的人視為Coder Pair Programming的Partner，也就是2</p>
</li>
</ul>
<p>把題目跟開發者寫的東西投影出來，然後當Coder在台上寫的時候Copilot則在下面討論，然後依序提出與改進，然後依樣輪流上來改寫，改寫時要通過前面那個人所寫的Test Case 確保寫出來的Code符合預期，所以這是TDD與Kata 很好的一個練習實作方式(實際上也常使用Pair Programming的方式上台寫作)。</p>
<p>流程上類似：第一個看到需求後先寫下了Test Case然後讓第二個補上功能，再讓第二個寫Test Case，第三個上來寫功能這樣的循環</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><p><a href="http://www.slideshare.net/AgileCommunity/agile-tour-2014-dojo-with-c-sharp-pdf" target="_blank" rel="external">Agile tour 2014 - Coding Dojo with C# and TDD</a></p>
</li>
<li><p><a href="http://www.danielteng.com/2011/03/15/coding-doj/" target="_blank" rel="external">代码道场 Coding Dojo</a></p>
</li>
<li><p><a href="http://codekata.com/" target="_blank" rel="external">codekata</a></p>
</li>
<li><p><a href="http://agilepainrelief.com/notesfromatooluser/2008/10/tdd-randori-session.html#.VGTwKZCUccs" target="_blank" rel="external">TDD RANDORI SESSION</a></p>
</li>
<li><p><a href="http://www.slideshare.net/giordano/xpug-coding-dojo-katayahtzee-in-ocp-way" target="_blank" rel="external">XpUg Coding Dojo: KataYahtzee in Ocp way</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Scrum </tag>
            
            <tag> Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[D3.JS:Intro]]></title>
      <url>https://blackie1019.github.io/2014/08/27/d3js-intro/</url>
      <content type="html"><![CDATA[<p><a href="http://d3js.org/" target="_blank" rel="external">D3.js</a>是一個JavaScript library，是 Data-Driven Documents只要有資料就可以產生文件，透過本身資料的儲存方式來轉換成圖像的方式呈現，提供不同的視角來檢視你的資料，並從中強化各種視覺呈現的效果與互動．D3.js 可僅透過JavaScript, HTML, SVG and CSS就可以達到圖像化的資料呈現並且可跨瀏覽器支援．</p>
<a id="more"></a>
<h2 id="What-is-D3-js"><a href="#What-is-D3-js" class="headerlink" title="What is D3.js?"></a>What is D3.js?</h2><p>現在我們就直接看一個<a href="http://zbryikt.github.io/visualize/dorling/" target="_blank" rel="external">Live Demo</a> 感受一下魅力吧!</p>
<p>另外推薦一個台灣人以台灣地圖與資料來呈現空間與數據關係的<a href="https://blog.safaribooksonline.com/2014/02/11/d3-js-maps/" target="_blank" rel="external">範例</a></p>
<h2 id="Why-need-it"><a href="#Why-need-it" class="headerlink" title="Why need it?"></a>Why need it?</h2><p>為什麼我們會需要D3.js這樣圖像化地library勒？當我們處於一個大資料的時代，想要直接閱讀資料從中找出資訊是很不容易的事情，這是後我們可以透過圖像化的方式讓我們用看的就能感覺出他的重要性或差異，我們從下面這個範例來解說一下</p>
<h2 id="Setup-and-Demo"><a href="#Setup-and-Demo" class="headerlink" title="Setup and Demo"></a>Setup and Demo</h2><p>看完一串說明後，就讓我們來hand on一下吧</p>
<p>安裝上只要先include D3.js的js檔案</p>
<pre><code>&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</code></pre><p>接著就來個簡單的Select吧</p>
<p><a class="jsbin-embed" href="http://jsbin.com/vokaz/3/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>就這樣透過select我們輕鬆地幫p元素換了顏色</p>
<p>剩下的我們就明天再繼續吧</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> D3js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[D3.JS:Data-Driven Documents]]></title>
      <url>https://blackie1019.github.io/2014/08/26/d3js-data-driven-documents/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/mbostock/d3/wiki" target="_blank" rel="external">D3.JS:Data-Driven Documents</a>，是本人近期很感興趣的一個js 套件，它提供了一些基於文件操作方式的js函式，讓文件的資料呈現可以透過更能讓瀏覽者理解與互動的方式來使用，大大的提升了可讀性與使用率。</p>
<a id="more"></a>
<p>在動手前我們先來知道一下D3到底做了什麼，這邊節錄底部大大書裡的一段話</p>
<blockquote>
<p>Fundamentally, D3 is an elegant piece of software that facilitates generation and manipulation of web documents with data. It does this by:</p>
</blockquote>
<ul>
<li>Loading data into the browser’s memory</li>
<li>Binding data to elements within the document, creating new elements as needed</li>
<li>Transforming those elements by interpreting each element’s bound datum and setting its visual properties accordingly</li>
<li>Transitioning elements between states in response to user input</li>
</ul>
<p>這邊來看幾個showcase與demo吧</p>
<ul>
<li><a href="http://www.youtube.com/watch?v=1_LDH1T1D1Y" target="_blank" rel="external">D3.js Line Chart</a></li>
<li><a href="http://www.youtube.com/watch?v=qYEHt_ykDR0" target="_blank" rel="external">Leap Motion D3.js Demo</a></li>
<li><a href="http://www.nytimes.com/interactive/2012/09/06/us/politics/convention-word-counts.html?_r=0" target="_blank" rel="external">At the National Conventions, the Words They Used</a></li>
<li><a href="http://mbostock.github.io/d3/talk/20111018/treemap.html" target="_blank" rel="external">treemap</a></li>
<li><a href="http://bl.ocks.org/mbostock/4183330" target="_blank" rel="external">World Tour</a></li>
<li><a href="http://bost.ocks.org/mike/hive/" target="_blank" rel="external">Hive Plots</a></li>
</ul>
<p>如果想看了解更多，請知道還有什麼更酷的實例<a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank" rel="external">請看</a>，想了解更深請看<a href="http://dl.acm.org/citation.cfm?id=2068631" target="_blank" rel="external">ACM期刊</a></p>
<h2 id="Hands-on-with-D3js"><a href="#Hands-on-with-D3js" class="headerlink" title="Hands on with D3js"></a>Hands on with D3js</h2><p>接著我們來動手玩玩D3js吧,先到<a href="https://github.com/mbostock/d3/wiki" target="_blank" rel="external">官方Github</a>下載最新的code,使用上很簡單只要加入下面這段即可</p>
<p>‘’’js</p>
<p><script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script><br>‘’’</p>
<p>這邊我們簡單先做出一個表格再來跟大家說明</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>會寫這篇其實跟以前在學時期玩過一陣子splunk有關，基本上splunk是一個收集記錄(log)或是任何資料(data)，經過處理與計算後以圖像或表單的方式來讓使用者更能看出一些現象的趨勢與探討出一些指標做出預測。Acer使用splunk做出了SOC的安全預測中心的一套偵測系統，而e-Travel(歐洲前十大網路旅行社)也透過splunkf去將它自有的巨量資料即時分析與搜尋的功能除了減少人工作業的時間與人力外，也降低了營運的成本。</p>
<p>而splunk這套系統除了本身索引建置與查詢極具戰力之外，早期splunk最引人樂道的是他將資料轉換成更容易了解的互動式視覺資料，這讓使用者在從巨量(big data)中更能發現出所期望預測的結果或是一些因素，當我們都在ㄧ昧的要求做到更快速的查詢與建立更完善的資料的同時，是否能透過其他方式來找出更值錢的且更能讓看的人了解的資料是更加重要的。</p>
<p>對於D3有興趣的人可以參考下面的讀物，是中文的書籍以及他線上免費閱讀的原文版本(作者真的很佛心)</p>
<ul>
<li><a href="http://www.tenlong.com.tw/items/9862769858?item_id=887625" target="_blank" rel="external">網頁互動式資料視覺化：使用 D3 (Interactive Data Visualization for the Web)</a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000345/index.html" target="_blank" rel="external">線上閱讀(英文版)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> D3js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Emmet LiveStyle hands on Lab]]></title>
      <url>https://blackie1019.github.io/2014/08/03/emmet-livestyle-hands-on-lab/</url>
      <content type="html"><![CDATA[<p>想必大部分人都知道Emmet是一套在SublimeText上Toolkit，而今天要介紹的是旗下的另外一套超方便的Emmet LiveStyle工具,讓你再透過瀏覽器修改檢查時就完成開發項目的調整，而這也是前端開發必學項目之一。</p>
<a id="more"></a>
<h2 id="Emmet-and-Emmet-LiveStyle"><a href="#Emmet-and-Emmet-LiveStyle" class="headerlink" title="Emmet and Emmet LiveStyle"></a>Emmet and Emmet LiveStyle</h2><p>Emmet是一個網業開發的Toolkit，前身叫做Zen Coding，可以快速的幫你建立Html與CSS文件，還不清楚或想了解更多的人可以先到<a href="http://docs.emmet.io/" target="_blank" rel="external">Emmet官網</a>看介紹影片。</p>
<p>而Emmet LiveStyle則是另外一套完全不同的工具，可以在Chrome上面讓你的Browser與Text Editor(當然預設是指SublimeText瞜)協同工作，目前瀏覽器的部分支援Chrome與Safari，編輯器則只有SublimeText。</p>
<p>快速介紹Emmet LiveStyle的特色</p>
<ul>
<li>不用儲存實際檔案</li>
<li>修改不用刷新頁面</li>
<li>Browser與Editor的雙向協同工作</li>
<li>跨平台</li>
<li>創新的CSS patching</li>
<li>安裝與使用方便，完全不用修改工作流程(只有簡化)</li>
</ul>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol>
<li>下載<a href="http://www.sublimetext.com/" target="_blank" rel="external">SublimeText</a></li>
<li>安裝<a href="https://sublime.wbond.net/installation" target="_blank" rel="external">Package Control</a></li>
<li><p>在SublimeText中使用Package Control安裝LiveStyle</p>
<p> <img src="1.png" alt="1"></p>
<p> 看到下面的說明代表安裝完成瞜</p>
<p> <img src="2.png" alt="2">.</p>
</li>
<li><p>接著打開Chrome安裝<a href="https://chrome.google.com/webstore/detail/emmet-livestyle/diebikgmpmeppiilkaijjbdgciafajmg?hl=zh-TW" target="_blank" rel="external">LiveStyle plugin</a></p>
<p> <img src="3.png" alt="3"></p>
</li>
<li><p>然後打開Chrome的開發者工具可以看到多一個LiveStyle的選項選擇開啟功能就可以來玩耍瞜</p>
<p> <img src="4.png" alt="4"></p>
</li>
</ol>
<h2 id="Hands-on"><a href="#Hands-on" class="headerlink" title="Hands on"></a>Hands on</h2><ol>
<li>打開另一個網頁</li>
<li>開啟Chorme developer tool 勾選Enable LiveStyle for current page</li>
<li><p>這邊會顯示這一個網頁有多少公司是獨立的檔案可以被修改，這邊我們需要把他Mapping到我們SublimeText上面去</p>
<p> <img src="5.png" alt="5"></p>
</li>
<li><p>這時候如果我們在SublimeText開一份新文件就會發生原本沒有任何可以mapping的下拉選項出現了一個剛剛新開的檔案瞜</p>
<p> <img src="6.png" alt="6"></p>
</li>
<li><p>接著我們也來讓網頁選轉一下吧</p>
<p> <img src="demo.gif" alt="7"></p>
</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>有這套神奇之後以往麻煩的前端也面修改要一直切換Browser與編輯器的過程可以跟他說掰掰瞜，而SublimeText支援前端的能力有多強小弟就不多贅言，大家還是趕快來動手玩玩吧!</p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emmet </tag>
            
            <tag> SublimeText </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swift與iOS APP開發 - 介紹與開發環境安裝]]></title>
      <url>https://blackie1019.github.io/2014/07/23/swift-hand-by-hand-day-01/</url>
      <content type="html"><![CDATA[<p>這篇主要在介紹Swift與iOS的開發環境安裝</p>
<a id="more"></a>
<h2 id="Swift介紹"><a href="#Swift介紹" class="headerlink" title="Swift介紹"></a>Swift介紹</h2><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><p><em> 首先要先確定你有apple developer開發帳號(還沒繳年費的記得快繳錢瞜, 呵呵) </em></p>
<ol>
<li>前往 <a href="https://developer.apple.com/devcenter/ios/index.action" target="_blank" rel="external">官方下載</a></li>
<li><p>登入Developer會員帳號後最上面選擇 iOS 8 Beta</p>
<p> <img src="swift_01_01.png" alt="01"></p>
</li>
<li><p>拉到下面選擇安裝 Xcode 6 beta</p>
<p> <img src="swift_01_02.png" alt="02"></p>
</li>
<li><p>下載完dmg檔案後直接雙點安裝然後拖進application資料夾中存放</p>
<p> <img src="swift_01_03.png" alt="03"></p>
<p> <img src="swift_01_04.png" alt="04"></p>
</li>
<li><p>按下⌘+R或是上方的執行按鈕執行。可以看到中間區塊的右下角出現 Hello World!字樣。</p>
</li>
<li><p>這樣就完成了我們第一天的學習</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Material Design Introduction]]></title>
      <url>https://blackie1019.github.io/2014/07/13/material-design-introduction/</url>
      <content type="html"><![CDATA[<p>這系列文章為參考Google本身文件讀者本身對其之瞭解所做的筆記，如果有錯的地方麻煩順手讓我知道一下瞜~感謝</p>
<a id="more"></a>
<p><a href="http://www.google.com/design/spec/material-design/introduction.html#introduction-principles" target="_blank" rel="external">原出處</a></p>
<h2 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h2><p><img src="materialdesign-goals-swirlanddot_large_mdpi.png" alt="goals_1"></p>
<blockquote>
<p>Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.</p>
</blockquote>
<p><img src="materialdesign-goals-cutrectangles_large_mdpi.png" alt="goals_2"></p>
<blockquote>
<p>Develop a single underlying system that allows for a unified experience across platforms and device sizes. Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all ﬁrst-class input methods.</p>
</blockquote>
<p>Material Design主要提供科技產品建置一跨平台與裝置的設計準則，目標再讓所有平台或裝置有同一的操作體驗，包括顯示、觸控、聲音等都在其範圍內。</p>
<h2 id="Principles-Material-is-the-metaphor"><a href="#Principles-Material-is-the-metaphor" class="headerlink" title="Principles - Material is the metaphor"></a>Principles - Material is the metaphor</h2><p><img src="materialdesign-principles-layersquares_large_mdpi.png" alt=""></p>
<blockquote>
<p>The fundamentals of light, surface, and movement are key to conveying how objects move, interact, and exist in space in relation to each other. Realistic lighting shows seams, divides space, and indicates moving parts.</p>
</blockquote>
<p>物件的光影、形狀、介面都能表達出與周遭環境的互動的情形，如同手指去波動水面會造成水面漣渏但在空氣中卻不會，合理的動作與物件顯示即可釋出彼此目前的關係。</p>
<h2 id="Principles-Bold-graphic-intentional"><a href="#Principles-Bold-graphic-intentional" class="headerlink" title="Principles - Bold, graphic, intentional"></a>Principles - Bold, graphic, intentional</h2><p><img src="materialdesign-principles-circleplus_large_mdpi.png" alt=""></p>
<blockquote>
<p>An emphasis on user actions makes core functionality immediately apparent and provides waypoints for the user</p>
</blockquote>
<p>不需透過多的設計或誇張的顯示，僅需透過簡單的色彩、空間與形狀等搭配來建立出使用者應該走的方向是Material Design主要想強調的。</p>
<h2 id="Principles-Motion-provides-meaning"><a href="#Principles-Motion-provides-meaning" class="headerlink" title="Principles - Motion provides meaning"></a>Principles - Motion provides meaning</h2><p><img src="materialdesign-principles-flyingsquare_large_mdpi.png" alt=""></p>
<blockquote>
<p>All action takes place in a single environment. Objects are presented to the user without breaking the continuity of experience even as they transform and reorganize.</p>
</blockquote>
<p>這句就是最精隨的一段，無須破壞一個連貫活動的任一動作，因為那就是最真實的呈現。</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p><img src="all_2.jpg" alt="all_2"></p>
<p>Google 所提倡的Material Design與Apple先前所提的Flat Design有一個絕大的不同點，在於物件相關性與合理性。</p>
<p>同於Flat Design簡單的強調一個準則 - simplicity，不要讓過多的加工破壞了原本物件存在的用意與原先的設計，設計應該強化在創造更佳的體驗。</p>
<p>但Material Design更強調物件與物件本身之關聯，沒有東西會憑空出現，事出必有因，所以在物件與物件之前的關聯上做了一些規範來實作出了這一些概念，包括了控制光影、物件顯示的表面與動作行為等。除此之外也提出，因為必須讓事物有跡可循所以”它”就有自己的規矩，不見得每個人都能夠任意使用，對於設計師來說「限制」是有必要的。</p>
<p>正如Google CEO Matias Duarte先前訪問時所提出的<a href="http://www.theverge.com/2014/4/15/5619182/android-design-head-matias-duarte-says-mobile-is-dead" target="_blank" rel="external">Mobile is dead</a>，其中一段</p>
<blockquote>
<p>If you’re product is about finding a ride, it’s not okay that you can get it on a 7-inch screen but not on a 2-inch screen.</p>
</blockquote>
<p>這句話大概最能解釋Material Design所希望達成的目標。但不僅是Google想定義出底下各產品設備,網頁或app等有一個一樣的視覺感受，它同時也在撫平與連貫跨裝置的操作理念。</p>
<p><img src="all_1.png" alt="all_1"></p>
]]></content>
      
        <categories>
            
            <category> UI&amp;Design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Material Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git基本教學與使用AWS EC2( Elastic Compute Cloud ) /Microsoft Azure建立自己的Git Server]]></title>
      <url>https://blackie1019.github.io/2014/07/12/git-introduction-and-push-remote-repository-to-aws-ec2-and-azure/</url>
      <content type="html"><![CDATA[<p>這篇文章主要是帶大家在雲端服務上建立一個Git Server，並透過一個範例簡單帶大家瞭解一下Git基本指令</p>
<a id="more"></a>
<p><img src="logo.png" alt="Logo"></p>
<h2 id="Git-簡介"><a href="#Git-簡介" class="headerlink" title="Git 簡介"></a>Git 簡介</h2><p>是目前最被大家推崇的版本管控工具，特色是利用分散發布的管理方式主要在乎檔案的整體性是否有改變，不強調需要到將檔案上傳到主機端管理，而是強調各分散管理的節點都能做好本身的檔案控管，並能靈活地交換各段節點的版本，以此來達成分散管理的好處。</p>
<p>與市面上市占率依舊頗高的SVN比較的整理如下:</p>
<p><img src="git%20svn.PNG" alt="git svn"></p>
<p>以下來源至<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A Successful git branching model</a>所提供的畫面節錄出成功的Git管控下各版本的樣貌:</p>
<h3 id="Over-view"><a href="#Over-view" class="headerlink" title="Over view"></a>Over view</h3><p><img src="success%20git%20model%20overview.png" alt="success git model over view"></p>
<h3 id="Decentralized-managed"><a href="#Decentralized-managed" class="headerlink" title="Decentralized managed"></a>Decentralized managed</h3><p><img src="centr-decentr.png" alt="success git model part"></p>
<h3 id="Main-branches"><a href="#Main-branches" class="headerlink" title="Main branches"></a>Main branches</h3><p><img src="bm002.png" alt="success git model Main branches"></p>
<h3 id="Merge-without-new-feature"><a href="#Merge-without-new-feature" class="headerlink" title="Merge without new feature"></a>Merge without new feature</h3><p><img src="merge-without-ff.png" alt="success git model Feature branches"></p>
<h3 id="Hotfix-branches"><a href="#Hotfix-branches" class="headerlink" title="Hotfix branches"></a>Hotfix branches</h3><p><img src="hotfix-branches1.png" alt="success git model Hotix branches"></p>
<h2 id="Git遠端的協議"><a href="#Git遠端的協議" class="headerlink" title="Git遠端的協議"></a>Git遠端的協議</h2><ul>
<li>file://：<ul>
<li>直接使用本機進行操作</li>
</ul>
</li>
<li>ssh://：<ul>
<li>效率好、但不可匿名訪問、提供最佳的安全性</li>
</ul>
</li>
<li>git://：<ul>
<li>速度最快的方式、但缺認證機制，適合僅讀取使用的情境</li>
</ul>
</li>
<li>http:// or https://：<ul>
<li>最簡單的操作但速度是裡面最差的</li>
</ul>
</li>
</ul>
<h2 id="Git基本指令"><a href="#Git基本指令" class="headerlink" title="Git基本指令"></a>Git基本指令</h2><p>預設的Branch叫作master，而預設的Remote叫作Origin</p>
<ul>
<li>取得Git版本<ul>
<li><code>git --version</code></li>
</ul>
</li>
<li>在當下目錄初始化儲存庫<ul>
<li><code>git init</code></li>
</ul>
</li>
<li>複製別人的Repository<ul>
<li><code>git clone https://github.com/angular/material</code></li>
</ul>
</li>
<li>檢視當下目錄的狀態<ul>
<li><code>git status</code></li>
</ul>
</li>
<li>新增檔案<ul>
<li><code>git add</code></li>
</ul>
</li>
<li>提交修改<ul>
<li><code>git commit</code></li>
</ul>
</li>
<li>更新檔案<ul>
<li><code>git add -u filename</code></li>
</ul>
</li>
<li>刪除檔案<ul>
<li><code>git rm filename</code></li>
</ul>
</li>
<li>重置檔案狀態<ul>
<li><code>git reset HEAD</code></li>
</ul>
</li>
<li>復原檔案變更<ul>
<li><code>git checkout --</code></li>
</ul>
</li>
<li>清除未追蹤的檔案<ul>
<li><code>git clean</code></li>
</ul>
</li>
<li>查看現在版本與最新版本的變更<ul>
<li><code>git diff HEAD</code></li>
</ul>
</li>
<li>Log查詢<ul>
<li><code>git log</code></li>
</ul>
</li>
</ul>
<h2 id="Git-Client安裝與工具"><a href="#Git-Client安裝與工具" class="headerlink" title="Git Client安裝與工具"></a>Git Client安裝與工具</h2><p>Git主體程式請至<a href="http://git-scm.com/" target="_blank" rel="external">Git官網</a>下載，除了使用cmd指令的方式來更新外，另外也有幾個不錯的工具介紹給大家</p>
<h3 id="Git-for-Windows"><a href="#Git-for-Windows" class="headerlink" title="Git for Windows"></a><a href="http://msysgit.github.io/" target="_blank" rel="external">Git for Windows</a></h3><p><img src="gw1.png" alt="gw1"></p>
<p><img src="gw2.png" alt="gw2"></p>
<p>除了強化傳統的Git BASH操作外，另外加上提供簡單的Git GUI操作畫面，輕量但高效率的傳輸是Windows使用者一定要安裝的套件</p>
<h3 id="GitHub-Windows-與-GitHub-Mac"><a href="#GitHub-Windows-與-GitHub-Mac" class="headerlink" title="GitHub Windows 與 GitHub Mac"></a><a href="http://windows.github.com/" target="_blank" rel="external">GitHub Windows</a> 與 <a href="https://mac.github.com/" target="_blank" rel="external">GitHub Mac</a></h3><p><img src="screenshot-overview%402x.png" alt="windows"><br><img src="screenshot-overview-mac%402x.png" alt="Mac"></p>
<p>由 GitHub 官方開發的工具，提供給對 Git 沒有很了解的人用的，用簡潔與好上手的的 GUI 介面，對 Git 完全沒有概念的人來說較好上手。</p>
<h3 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a><a href="http://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a></h3><p><img src="sourcetree_hero_win_full_interface_windows.png" alt="tree"></p>
<p>是一套非常完整的Git GUI工具，整合完整的圖像表達與流程操作的方式，可以讓你對於整個專案的版本控管一目瞭然。所有的Git指令列功能都能夠過GUI 介面用滑鼠操作完成。</p>
<p><strong><em>SourceTree與GitHub for windows的Git Shell 都是透過Git for Windows 工具進行版本操作，如果你沒有事先安裝 Git for Windows 的話這部分功能將無法使用，強烈建議先行安裝Git for Windows。</em></strong></p>
<p>其他更多的GUI工具可以參考官方整理<a href="http://git-scm.com/downloads/guis" target="_blank" rel="external">GUI Clients</a></p>
<h2 id="GitHub-介紹"><a href="#GitHub-介紹" class="headerlink" title="GitHub 介紹"></a>GitHub 介紹</h2><p><img src="github-logo.jpg" alt="GitHub"></p>
<p>GitHub是一個共享雲端主機服務，提供一個線上的Git Server讓你可以免費使用(儘可建立公開專案)或是付費可建立非公開的私人專案，目前已有許多Open Source的專案轉至GitHub上讓大家共同撰寫與維護。</p>
<p><img src="git%20fee.PNG" alt="Git fee"></p>
<h2 id="使用EC2建立Git-Server"><a href="#使用EC2建立Git-Server" class="headerlink" title="使用EC2建立Git Server"></a>使用EC2建立Git Server</h2><h3 id="AWS-EC2-簡介"><a href="#AWS-EC2-簡介" class="headerlink" title="AWS EC2 簡介"></a>AWS EC2 簡介</h3><p>AWS Elastic Compute Cloud簡稱為EC2，是Amazon一個提供雲端電腦的服務，它可以讓你去管理屬於你自己的主機並在上面做你平常對電腦做的任何事情，只是在主機架設在Amazon那邊放在雲端上使用。</p>
<h2 id="使用Azure建立Git-Server"><a href="#使用Azure建立Git-Server" class="headerlink" title="使用Azure建立Git Server"></a>使用Azure建立Git Server</h2><h3 id="Microsoft-Azure-簡介"><a href="#Microsoft-Azure-簡介" class="headerlink" title="Microsoft Azure 簡介"></a>Microsoft Azure 簡介</h3><h2 id="實戰Git"><a href="#實戰Git" class="headerlink" title="實戰Git"></a>實戰Git</h2><ul>
<li>git clone URL LOCAL #  取得程式碼</li>
<li>git checkout -b BRANCH #  開個自己用的branch</li>
<li><h1 id="修改你的程式碼或文件"><a href="#修改你的程式碼或文件" class="headerlink" title="修改你的程式碼或文件"></a>修改你的程式碼或文件</h1></li>
<li>git add MODIFY-FILE #  將修改的程式碼加入要 commit 的範圍</li>
<li>git status #  確認你要 commit 的東西是否正確</li>
<li>git commit  #  送出 commit</li>
<li>git log #  看一下 log 是否程式碼已經成功 commit</li>
</ul>
<h2 id="學習資源整理"><a href="#學習資源整理" class="headerlink" title="學習資源整理"></a>學習資源整理</h2><p>這邊幫大家整理了一些好上手的學習資源</p>
<ul>
<li><a href="http://ihower.tw/git/" target="_blank" rel="external">Git 版本控制系統</a>這提供了完整的Git教學與經驗分享，是新手上路老手挖寶的絕佳去處</li>
</ul>
<p><img src="ihower.PNG" alt="ihower"></p>
<ul>
<li><a href="http://pcottle.github.io/learnGitBranching" target="_blank" rel="external">Learning Git Branching</a>這是一個很酷的GitHub專案，目標再讓新手透過實作與動態展示的方式學習Git的各項指令與實際來解決問題，大家準備好來動手玩玩看了嗎?</li>
</ul>
<p><img src="learn%20git%20branching.PNG" alt="Learning Git Branching"></p>
<p>另外提供兩個學習EC2與Azure的參考連結幫大家快速上手</p>
<ul>
<li><a href="http://blog.hinablue.me/entry/aws-working-with-amazon-aws" target="_blank" rel="external">AWS EC2教學</a></li>
<li><a href="http://blog.sanc.idv.tw/p/windows-azure.html" target="_blank" rel="external">Azure 教學</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Source Control </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c# ternary operator, null coalescing operator and var]]></title>
      <url>https://blackie1019.github.io/2014/05/05/csharp-ternary-operator-null-coalescing-operator-and-var/</url>
      <content type="html"><![CDATA[<p>在寫程式中往往會遇到一些簡化程式碼的簡寫，如foreach在C# 3.0有了LinQ與Lambda表態是後就漸漸的被少用了(在大型的開發架構下看的懂程式碼的架構才是第一步最重要的,除了效能考量外)</p>
<a id="more"></a>
<h2 id="c-的"><a href="#c-的" class="headerlink" title="c#的?:"></a>c#的?:</h2><p>這是傳統的三元運算子(ternary operator)的使用方式，</p>
<pre><code>test ? expression1 : expression2
</code></pre><p>範例如下:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a= b &gt; <span class="number">1</span> ? b : c ;</div></pre></td></tr></table></figure>
<p>上面這個範例的意思就是宣告一個變數a，並判斷如果b的值&gt;1就將b值給a，否則則將c值給a。</p>
<p>透過三元運算子我們可以簡化不少反鎖的if statement，這讓我們的程式碼更容易被閱讀。</p>
<h2 id="C-的"><a href="#C-的" class="headerlink" title="C#的??"></a>C#的??</h2><p>而??這是C# 2.0之後出來運算子，主要用在判別test!=null(null coalescing operator)的情況,</p>
<pre><code>test ?? expression1 : expression2
</code></pre><p>這邊我們先用傳統的三元運算子寫出判別!=null的code:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> A = B != <span class="literal">null</span> ? B : C ;</div></pre></td></tr></table></figure>
<p>接著我們將上面用??改寫</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> A =  B ?? C ;</div></pre></td></tr></table></figure>
<p>而??有另外一個特性就是可以直接串連，如下:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> A =  B ?? C ?? D ?? E ?? F;</div></pre></td></tr></table></figure>
<p>意思就是B如果是null就傳C,C如果是null就穿D…最後如果BCDE都null就傳F。</p>
<p>這樣是不是減少很多if statement與ternary operator!</p>
<h2 id="var的用法"><a href="#var的用法" class="headerlink" title="var的用法"></a>var的用法</h2><p>另外，在C# 3.0 變數宣告可透過隱含型別的方式來做為宣告，隱含型別區域變數是強型別 (Strongly Typed)，就和自行宣告型別一樣，差別在於隱含型別是由編譯器 (Compiler) 判斷型別。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// implicitly typed</span></div><div class="line"><span class="keyword">var</span> test = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> test2 =<span class="string">"123"</span>;</div><div class="line"></div><div class="line"><span class="comment">//explicitly typed</span></div><div class="line"><span class="keyword">int</span> test = <span class="number">100</span>;</div><div class="line"><span class="keyword">string</span> test2 =<span class="string">"123"</span>;</div></pre></td></tr></table></figure>
<p>對於這個部份的介紹小弟推薦另外一篇MVP-91 所撰寫的介紹文會更為詳細</p>
<p><a href="http://msdn.microsoft.com/zh-tw/library/dn467616.aspx" target="_blank" rel="external">快快樂樂學 LINQ - 前哨戰 - var 與匿名型別</a></p>
<p>這邊截錄一個重點:</p>
<blockquote>
<p>什麼時候不用var？對我來說，只有兩種情況：</p>
<p>第一，要用到多型的時候，尤其是變數的型別為interface，這如果用var，變數型別就直接變成concrete class的型別了，雖說執行上不會有任何問題，但在開發上意義可完全不同，加上使用變數時看到的雜訊，會讓我不太愉悅，所以在運用多型的設計上，我不會用var。</p>
<p>第二，top-down的設計方式，當我還沒有實際的方法時，我不會用var。因為用Visual Studio的產生功能，會判斷成object，這樣我還要移過去改，太麻煩了，所以這類的宣告，我會想好型別宣告後，再透過產生功能來幫忙產生function的殼。</p>
</blockquote>
<p>簡單來講就是用vs開發的話就安心交給工具來幫你整理吧~</p>
<p>其他可以幫忙簡化的工具要花錢的就是<a href="http://www.jetbrains.com/resharper/" target="_blank" rel="external">Resharper</a>，免錢的就是<a href="http://visualstudiogallery.msdn.microsoft.com/76293c4d-8c16-4f4a-aee6-21f83a571496" target="_blank" rel="external">CodeMaid</a></p>
<p>透過上面三個簡單的步驟來一起簡化/美化程式碼吧</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker Introduce and Hands on LAB]]></title>
      <url>https://blackie1019.github.io/2014/04/18/docker-introduce-and-hands-on-lab/</url>
      <content type="html"><![CDATA[<p>Build, Ship and Run. Any App, Anywhere! 這就是Docker寫在官網上面對自己最簡單的描述。</p>
<a id="more"></a>
<h2 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker"></a>What is Docker</h2><p><a href="https://www.docker.com/" target="_blank" rel="external">Docker官方連結</a></p>
<p><img src="logo.png" alt="log"></p>
<blockquote>
<p>Build, Ship and Run. Any App, Anywhere!</p>
</blockquote>
<p>這就是Docker寫在官網上面對自己最簡單的描述。</p>
<p>Docker是一個</p>
<p>目前Docker有超過14,000公開的Applicaion，而其中很多知名大廠都已經有官方支援的Repository了，而最後的Hand on Lab也會教大家如何將自己的Applicaion與使用這些公開的Repository，來建置自己的環境。</p>
<p><img src="Office%20repositories.png" alt="Offical Repositories"></p>
<ul>
<li>Docker Engine</li>
</ul>
<p>A portable, lightweight application runtime and packaging tool.</p>
<ul>
<li>Docker Hub</li>
</ul>
<p>A cloud service for sharing applications and automating workflows.</p>
<p><img src="life%20cycle.gif" alt="life cycle"></p>
<p><a href="http://blog.docker.com/2014/06/announcing-docker-hub-and-official-repositories/" target="_blank" rel="external">ANNOUNCING DOCKER HUB AND OFFICIAL REPOSITORIES</a></p>
<h3 id="Different-with-classic-server-virtualization"><a href="#Different-with-classic-server-virtualization" class="headerlink" title="Different with classic server virtualization"></a>Different with classic server virtualization</h3><p>Docker的架構使用Container技術，雖然都屬於虛擬化的技術，且目標也同為將一套應用程式所需的執行環境打包起來，同為建立一個獨立環境，方便在不同的實體伺服器(硬體)環境使用，但兩者的運作與想法是完全不同的。</p>
<p>這邊做簡單說明並用圖解做一個區分：</p>
<ul>
<li>Classic Server Virtualization：</li>
</ul>
<p>傳統虛擬化技術如vSphere或Hyper-V是以作業系統為中心。目標是建立一個可以用來執行整套作業系統的沙箱獨立執行環境，習慣以虛擬機器（Virtual Machine）來稱呼，而虛擬機器需要安裝作業系統（安裝Guest OS）才能執行應用程式。</p>
<p><img src="Server%20virtauliztion.png" alt="Server virtaulization"></p>
<ul>
<li>Container Virtualization:</li>
</ul>
<p>以應用程式為中心的虛擬化技術。將所需的相關程式碼、函式庫、環境配置檔都打包起來建立沙箱執行環境，所產生的環境就叫做Container，Container內不需要安裝作業系統就能執行應用程式。不同於classic server virtualization在OS外建立虛擬環境，container virtualization是在OS內的核心系統層(System Core/Kernel)來打造虛擬執行環境，透過共用Host OS的作法，取代一個一個Guest OS的功用。</p>
<p><img src="Container%20virtualization.png" alt="Container virtualization"></p>
<h3 id="Docker-is-Light-weight"><a href="#Docker-is-Light-weight" class="headerlink" title="Docker is Light-weight"></a>Docker is Light-weight</h3><p>看完兩張圖我們要回來講Docker的<em>輕量化</em>，相對於我們主要的Application檔案大多只有MB等級來相比，GuestOS與Bin/Lib所佔據的空間都是GB起跳。而傳統使用VM的虛擬化技術因為各別包含這些重複的肥大的檔案，所以每個VM會比Continer檔案都還要肥大不少。</p>
<h3 id="One-Container-One-application"><a href="#One-Container-One-application" class="headerlink" title="One Container One application"></a>One Container One application</h3><p>Docker 使用一種叫做Microservices（微服務）的架構，把一個應用系統組成的每一個Stack，依序分解成許多小型服務，而每一個服務就是包含在Container的一隻程式。</p>
<p>而一個Container的映象檔內可以安裝多支程式，例如同時安裝MSSQL、Node.js、ASP.net Web application等。但Docker官方建議，一隻程式安裝在一個Container內，再把需要使用到的Container疊起來提供一個完整的服務。</p>
<p>如此一來提供了更好更換服務的流程，更新時只會讓對應的服務重新載入Container映像檔(reload)即可，不用將全部的服務都停止或重載，這邊與傳統的VM概念就有一個不小的差異摟.</p>
<p>如果想要在一個Container做建置Application可以參考此篇<a href="http://www.centurylinklabs.com/build-a-2-container-app-with-docker/" target="_blank" rel="external">How To Build A 2-Container App with Docker</a></p>
<h3 id="Docker-help-Devops"><a href="#Docker-help-Devops" class="headerlink" title="Docker help Devops"></a>Docker help Devops</h3><p>因為Docker使用Dockerfile來記錄建立Container映象檔的每一個步驟(change)，可以將建立應用程式執行環境的過程和配置參數，完整地記錄下來。這也意味著Dockerfile這是一個可以被加入版本控制流程的一個檔案，而這樣的改變讓原本建立環境的過程不會再無跡可循，也可以不用在第一時間準備安裝流程之類的文件(如果要比較設定或改變，可以直接比較差異)，測底改善發佈與開發的流程，將基礎架構程式化（Infrastructure as code）來管理。</p>
<h2 id="Hands-on-Lab"><a href="#Hands-on-Lab" class="headerlink" title="Hands on Lab"></a>Hands on Lab</h2><p>看了這麼多圖文，就讓我們來實際玩玩Docker吧，前置動作的流程如下：</p>
<ol>
<li><p>You’ll search for and find an image another user built and shared in the Docker Hub Registry, a cloud-based collection of applications.</p>
</li>
<li><p>You’ll download and run it - running images are containers - and have it output ‘hello world’.</p>
</li>
<li><p>Then you’ll install the ‘ping’ utility into the container, commit all your changes, and run a test of your updated image.</p>
</li>
<li><p>Finally, you’ll push your image to the Docker Hub Registry so that other developers can find and use it…</p>
</li>
</ol>
<p>…on a laptop, a VM in a data center, or a public cloud instance, without having to change anything at all about the image!</p>
<p>首先我們先去官方的<a href="https://www.docker.com/tryit/" target="_blank" rel="external">Tryit</a>，畫面如下：</p>
<p><img src="tryit.png" alt="Tryit"></p>
<h3 id="Docker-with-Windows"><a href="#Docker-with-Windows" class="headerlink" title="Docker with Windows"></a>Docker with Windows</h3><p>因為Docker Engine是使用Linux-specific kernel，所以如果要在Windows上面使用的話還是需要先透過一個輕量的VM來作為載體。在這邊我們會用到<a href="https://github.com/boot2docker/boot2docker" target="_blank" rel="external">Boot2Docker</a>這個工具來幫我們。</p>
<p>也附上官方Demo影片教你如何安裝</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/oSHN8_uiZd4" frameborder="0" allowfullscreen></iframe>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>接下來應該會弄個Docker系列文章，順便為了鐵人賽做好準備(兩年都棄賽了XD)，對此技術有興趣的朋友歡迎一起討論與學習進步摟。</p>
<p>另外，因為有人寫信問說blog的一些圖表跟流程圖用什麼工具畫的，我習慣上都用<a href="https://cacoo.com" target="_blank" rel="external">Cacoo</a>去畫圖，上面提供了很多基本的流程圖(包含UML)或是Mocup所需的框架元素(手機或是個項目Icon)。</p>
<p><img src="Cacoo.png" alt="Cacoo"></p>
<p>但也有很多漂亮一點的圖我都是找網路上大大的blog或表達意像的圖片，記得使用前要附上出處與禮貌的跟大神們請示一下能否分享瞜。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.docker.com/installation/windows/" target="_blank" rel="external">Docker Install on Windows</a></li>
<li><a href="https://blog.gslin.org/archives/2014/05/17/4656/%E7%B8%BD%E7%AE%97%E6%98%AF%E6%90%9E%E5%AE%9A-vagrant-docker/" target="_blank" rel="external">Vagrant + Docker</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Cotainer &amp; VM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Container </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to Control YouTube AutoPlay and Play after another video end]]></title>
      <url>https://blackie1019.github.io/2014/04/14/using-javascript-to-control-youtube-autoplay-and-play-after-another-video-end/</url>
      <content type="html"><![CDATA[<p>今天被一個朋友問起如何控制embed的YouTube影片，讓他可以自動撥放也可以在播放完後讓另外一個embed的影片也播放。</p>
<a id="more"></a>
<p>這邊先介紹一下官方的API ─ <a href="https://developers.google.com/youtube/iframe_api_reference?hl=zh-tw" target="_blank" rel="external">Youtube IFrame API</a></p>
<h2 id="What-is-Youtube-IFrame-API"><a href="#What-is-Youtube-IFrame-API" class="headerlink" title="What is Youtube IFrame API"></a>What is Youtube IFrame API</h2><p>Youtube iFrame API是Google官方提供的一組JavaScript Library讓我們可以輕鬆控制嵌入的影片，但不同於<a href="https://developers.google.com/youtube/flash_api_reference?hl=zh-tw" target="_blank" rel="external">Flash</a> 與 <a href="https://developers.google.com/youtube/js_api_reference?hl=zh-tw" target="_blank" rel="external">JavaScript</a> player API都在網頁內嵌入一個Flash object的概念，IFrame API 使用 <code>&lt;iframe&gt;</code> tag ，在HTML5的支援下這提供了更穩固的播放基礎。</p>
<p>它目前的功能包括：</p>
<ul>
<li>Play(include seeks to a specified time), Pause and Stop Video</li>
<li>Video information</li>
<li>Queueing functions</li>
<li>Quality、Mute、Volume、Screen Size Control</li>
<li>Can Get Player State<ul>
<li>1 – unstarted</li>
<li>0 – ended</li>
<li>1 – playing</li>
<li>2 – paused</li>
<li>3 – buffering</li>
<li>5 – video cued</li>
</ul>
</li>
</ul>
<h2 id="Hand-on-Lab"><a href="#Hand-on-Lab" class="headerlink" title="Hand on Lab"></a>Hand on Lab</h2><p>在開發上主要透過Create 一個<code>YT.Player</code> object的方式去操控處理，基本的操控如下:</p>
<p><a class="jsbin-embed" href="http://jsbin.com/yasar/2/embed?html,css,js,console,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>接下來介紹如何使用這個API1幫我們完成在ㄧ個Player播放完影片後自動trigger另外一個player播放，範例如下：</p>
<p><a class="jsbin-embed" href="http://jsbin.com/wevuka/2/embed?html,css,js,console,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>如此一來透過這個API我們就可以很輕鬆的處理影片播放的任何需求了</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript reserved word(保留字)]]></title>
      <url>https://blackie1019.github.io/2014/04/14/javascript-reserved-word/</url>
      <content type="html"><![CDATA[<p>這禮拜在看以前的code的時候看到前人使用保留字的來宣告變數名稱的js code，可能當時的時空背景允許這樣的事情發生，但想到以後如果部門還有小朋友的話要告訴他們的正確的觀念所以寫了這篇來Memo一下。</p>
<a id="more"></a>
<p><img src="reserved.jpg" alt="reserved"></p>
<h2 id="What-is-reserved-word"><a href="#What-is-reserved-word" class="headerlink" title="What is reserved word"></a>What is reserved word</h2><p>reserved word就是在程式裡預先保留的文字，大多有特殊用途與意涵或本身附帶一些功能與屬性，在正常的情況下不能用來當作參數或變數的命名</p>
<h2 id="How-To-use-reserved-word"><a href="#How-To-use-reserved-word" class="headerlink" title="How To use reserved word"></a>How To use reserved word</h2><p>那如何在非正常的情況下來使用這些保留字勒</p>
<p>一般的NG使用法，我們以保留字import為例:</p>
<ul>
<li>a.import = value</li>
<li>var import = value</li>
<li>a = { import:value }</li>
</ul>
<p>可以使用保留字的用法</p>
<ul>
<li>a[‘import’]=value</li>
<li>a = { ‘import’: value }</li>
</ul>
<h3 id="目前的保留字詳情請參考"><a href="#目前的保留字詳情請參考" class="headerlink" title="目前的保留字詳情請參考"></a>目前的保留字<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FReserved_Words" target="_blank" rel="external">詳情請參考</a></h3><p>比較常用到的有以下的(JavaScript目前的版本對照到ECMAScript 3)</p>
<ul>
<li>abstract</li>
<li>boolean</li>
<li>byte</li>
<li>char</li>
<li>class</li>
<li>const</li>
<li>debugger</li>
<li>double</li>
<li>enum</li>
<li>export</li>
<li>extends</li>
<li>final</li>
<li>float</li>
<li>goto</li>
<li>implements</li>
<li>import</li>
<li>int</li>
<li>interface</li>
<li>long</li>
<li>native</li>
<li>package</li>
<li>private</li>
<li>protected</li>
<li>public</li>
<li>short</li>
<li>static</li>
<li>super</li>
<li>synchronized</li>
<li>throws</li>
<li>transient</li>
<li>volatile</li>
</ul>
<h3 id="以下是未來保留字-最新的JavaScript版本應該會符合ECMAScript-5-："><a href="#以下是未來保留字-最新的JavaScript版本應該會符合ECMAScript-5-：" class="headerlink" title="以下是未來保留字(最新的JavaScript版本應該會符合ECMAScript 5)："></a>以下是未來保留字(最新的JavaScript版本應該會符合ECMAScript 5)：</h3><ul>
<li>class</li>
<li>enum</li>
<li>export</li>
<li>extends</li>
<li>import</li>
<li>super</li>
</ul>
<h3 id="strict-模式中的未來保留字"><a href="#strict-模式中的未來保留字" class="headerlink" title="strict 模式中的未來保留字"></a>strict 模式中的未來保留字</h3><p>以下是僅限於 strict 模式中的未來保留字。 如需 strict 模式的詳細了解，請參考之前的文章<a href="https://blackie1019.github.io/2013/08/29/javascript-strick-mode-introduction/">[JavaScript]use strict(嚴格模式)-strict mode 介紹</a></p>
<ul>
<li>implements</li>
<li>interface</li>
<li>package</li>
<li>private</li>
<li>protected</li>
<li>public</li>
<li>static</li>
<li>yield</li>
</ul>
<h3 id="More-reserved-words"><a href="#More-reserved-words" class="headerlink" title="More reserved words"></a>More reserved words</h3><p>JavaScript 的保留字 (reserved word)  、未來保留字 (future reserved word) 另外包括關鍵字 (keyword)還有最常使用到的三個字面常數 (literal) ，分別是 null 、 true 、 false 。</p>
<p>關鍵字包含:</p>
<ul>
<li>break</li>
<li>case</li>
<li>catch</li>
<li>continue</li>
<li>default</li>
<li>delete</li>
<li>do</li>
<li>else</li>
<li>finally</li>
<li>for</li>
<li>function</li>
<li>if</li>
<li>in</li>
<li>instanceof</li>
<li>new</li>
<li>return</li>
<li>switch</li>
<li>this</li>
<li>throw</li>
<li>try    with</li>
<li>typeof</li>
<li>var</li>
<li>while</li>
<li>with</li>
</ul>
<h2 id="Avoid-use-reserved-words"><a href="#Avoid-use-reserved-words" class="headerlink" title="Avoid use reserved words"></a>Avoid use reserved words</h2><p>強烈建議不要使用保留字，如開頭所說，這些字叫做保留字就代表它們有特別的意涵與功能，請按照規則撰寫程式，好的規則與習慣可以讓你的程式可讀性大增!</p>
<p>所以，如果以後在以前的專案還有看到這些保留字被使用就順手把它改掉吧，套句<a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="external">clean code</a>所說的:”與其幫一段完全錯誤的程式碼寫上註解不如動手改善它吧”</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.NET MVC Multiple types were found that match the controller named 'XXX']]></title>
      <url>https://blackie1019.github.io/2014/02/18/multiple-types-were-found-that-match-the-controller-named-xxx/</url>
      <content type="html"><![CDATA[<p>解決重複註冊多個的Routing問題</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在MVC的架構，當我們要註冊一個routing時我們通常會用以下方法註冊</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">routes.MapRoute(</div><div class="line">	<span class="string">"Default"</span>,</div><div class="line">	<span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</div><div class="line">	<span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面我們很簡單的註冊了一個Default的routing給Home這個Controller，但當我們有引用dll的時候好死不好dll裡面也有包入一個同樣名稱的Controller時就會導致.net拋出以下錯誤</p>
<p><img src="controller.png" alt="controller"></p>
<h2 id="How-to-fix-it"><a href="#How-to-fix-it" class="headerlink" title="How to fix it"></a>How to fix it</h2><p>解決辦法有兩種，一種是設定單一Routing的Controller Namespace</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">routes.MapRoute(</div><div class="line">	<span class="string">"Default"</span>,</div><div class="line">	<span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</div><div class="line">	<span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;,</div><div class="line">	<span class="keyword">new</span>[] &#123;<span class="string">"YourCurrentProjectNamespace.WebSite.Controllers"</span>&#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>另外一種就是把整個site的Routing都設定預設的Controller Namespace</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ControllerBuilder.Current.DefaultNamespaces.Add(<span class="string">"YourCurrentProjectNamespace.WebSite.Controllers"</span>);</div></pre></td></tr></table></figure>
<p>以上的設定都在App_Start&gt;RouteConfig.cs中</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Set Default Page to Hybrid Web Application(MVC and Web Form)]]></title>
      <url>https://blackie1019.github.io/2014/02/17/set-default-page-to-hybrid-web-application-mvc-and-web-form/</url>
      <content type="html"><![CDATA[<p>關於MVC架構下的Default Page的機制</p>
<a id="more"></a>
<p>在MVC架構，如果要設定預設的Default Page給MVC，我們可以在RoutConfig.cs中設定Default的MVC Controller來讓他接收，如下:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span>(<span class="params">RouteCollection routes</span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// MVC default</span></div><div class="line">	routes.MapRoute(</div><div class="line">		<span class="string">"Default"</span>,                          <span class="comment">// Route name</span></div><div class="line">		<span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,       <span class="comment">// URL with parameters</span></div><div class="line">		<span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>,</div><div class="line">					action = <span class="string">"Index"</span>,</div><div class="line">					id = UrlParameter.Optional &#125;  <span class="comment">// Parameter defaults</span></div><div class="line">	);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而如果要設定Hybrid(WebForm與MVC同時存在的架構)的Routing時需要注意一下先後順序，避免Routing註冊不到</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span>(<span class="params">RouteCollection routes</span>)</span></div><div class="line">&#123;</div><div class="line">	routes.IgnoreRoute(<span class="string">"&#123;resource&#125;.axd/&#123;*pathInfo&#125;"</span>);</div><div class="line">	routes.IgnoreRoute(<span class="string">"&#123;myWebForms&#125;.aspx/&#123;*pathInfo&#125;"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// Web Forms default</span></div><div class="line">	routes.MapPageRoute(</div><div class="line">		<span class="string">"WebFormDefault"</span>,</div><div class="line">		<span class="string">""</span>,</div><div class="line">		<span class="string">"~/default.aspx"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// MVC default</span></div><div class="line">	routes.MapRoute(</div><div class="line">		<span class="string">"Default"</span>,                          <span class="comment">// Route name</span></div><div class="line">		<span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,       <span class="comment">// URL with parameters</span></div><div class="line">		<span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>,</div><div class="line">					action = <span class="string">"Index"</span>,</div><div class="line">					id = UrlParameter.Optional &#125;  <span class="comment">// Parameter defaults</span></div><div class="line">	);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至於架構的原因待了解後在分享給大家了…</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Callback function and how to override jQuery method]]></title>
      <url>https://blackie1019.github.io/2014/02/17/callback-function-and-how-to-override-jquery-method/</url>
      <content type="html"><![CDATA[<p>關於Callback這是一個在javascript很重要的機制</p>
<a id="more"></a>
<p>在開始前先截錄一下它的解釋</p>
<blockquote>
<p>A reference to executable code, or a piece of executable code, that is passed as an argument to other code.</p>
</blockquote>
<p>先從一張圖來講一下他到底是在幹嘛。</p>
<p>國外朋友也寫了篇很好的說明文，有興趣的朋友可以參考<a href="http://www.impressivewebs.com/callback-functions-javascript/" target="_blank" rel="external">Callback Functions in JavaScript</a></p>
<pre><code>function test(param1, param2, callback) {
    console.log(&apos;this is a test: &apos; + param1 + &apos;, &apos; + param2);
    if (callback &amp;&amp; typeof(callback) === &quot;function&quot;) {
        callback();
    }
}
</code></pre><h2 id="override-jQuery-method"><a href="#override-jQuery-method" class="headerlink" title="override jQuery method"></a>override jQuery method</h2><p>這邊順邊說明如何override jQuery的method,我們以html()這個method來看，<a href="https://api.jquery.com/html/" target="_blank" rel="external">.html()說明</a></p>
<p>由官方說明看來這個method預設只能讓你換內容</p>
<ul>
<li><p>.html( htmlString )</p>
<ul>
<li><b>htmlString</b></li>
<li>Type: htmlString</li>
<li>A string of HTML to set as the content of each matched element.</li>
</ul>
</li>
<li><p>.html( function(index, oldhtml) )</p>
<ul>
<li><b>function(index, oldhtml)</b></li>
<li>Type: Function()</li>
<li>A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.</li>
</ul>
</li>
</ul>
<p>先在我們要幫他加上一個callback的功能只要</p>
<pre><code>$(function () {
    $.fn.htmlOriginal = $.fn.html;
    $.fn.html = function (html, callback) {
        this.htmlOriginal(html);
        if (callback&amp;&amp;typeof (callback) === &quot;function&quot;) {
            callback();
        }
    };
});
</code></pre><p>有沒有很簡單，使用上只要如下即可:</p>
<pre><code>$(&apos;#test&apos;).html(content,function(){
    console.log(&quot;test2&quot;);
});
</code></pre><h2 id="vs"><a href="#vs" class="headerlink" title="== vs ==="></a>== vs ===</h2><p>簡單說明一下:</p>
<ul>
<li><p>== 比較兩者是否相等</p>
<p>  EX:</p>
<pre><code>100==&quot;100&quot;    //true
1==true        //true
</code></pre></li>
<li><p>=== 比較兩者是否相等(還包含類型的相等)</p>
<p>  EX:</p>
<pre><code>100===&quot;100&quot; //false
1===true    //false
</code></pre></li>
</ul>
<p>這邊順便說明為什麼typeof要用三個等於，我們先看Mozilla的文件<a href="https://developer.mozilla.org/zh-TW/docs/JavaScript/Reference/Operators/typeof" target="_blank" rel="external">typeof</a></p>
<p>從文件可以看到</p>
<p><img src="typeof.PNG" alt="typeof"></p>
<p>所以簡單來講回傳的就是文字瞜，所以就可以透過===來更嚴謹的作辦定條件。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ECMAScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Work with JSHint using Sublime Text 2]]></title>
      <url>https://blackie1019.github.io/2014/01/18/work-with-jshint-using-sublime-text/</url>
      <content type="html"><![CDATA[<p>寫 JavaScript的時候常常會因為他多元的用法(結構較為鬆散或是說它組合較多元)而感到困惑，或因為不好的習慣導致自己浪費了大量效能做出一個很簡單的東西，這邊要如何驗證自己寫的Javascript有沒有水準符不符合基本規範呢？此時除了定義一些開發上面的規範外，我們還需要一些工具來幫我們做檢查，JSLint就是這行的老牌子工具。</p>
<a id="more"></a>
<p><img src="jshint.png" alt="LOGO"></p>
<h2 id="JSLint-VS-JSHint"><a href="#JSLint-VS-JSHint" class="headerlink" title="JSLint VS JSHint"></a>JSLint VS JSHint</h2><p>JSLint 定義了一組比 ECMAScript Language Specification 第三版(應該沒比第五版嚴謹，這部分還在追查)所定義的規格中更嚴謹的規格來驗證你的 JavaScript，這邊找到保哥幾年前寫的文章介紹<a href="http://blog.miniasp.com/post/2008/02/24/JSLint-The-JavaScript-Verifier.aspx" target="_blank" rel="external"></a>，有興趣的可以進去看看摟。</p>
<p>而JSHint是JSLint其中一個分支，為什麼寫這個分支的理由在此：<a href="http://anton.kovalyov.net/2011/02/20/why-i-forked-jslint-to-jshint/" target="_blank" rel="external">Why I forked jslint to jshint?</a>．而簡單來講，因為在實務上有些JSLint規範太過嚴格的部分作出了部分的取捨而成的子集就成為了JSHint，而JSHint也還可以讓你自行條件檢查的修改，看是否要開啓或關閉。</p>
<h2 id="Sublime-Text2版"><a href="#Sublime-Text2版" class="headerlink" title="Sublime Text2版"></a>Sublime Text2版</h2><h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><ol>
<li>安裝<a href="http://www.sublimetext.com/2" target="_blank" rel="external">Sublime Text2</a></li>
<li>安裝<a href="https://sublime.wbond.net/installation" target="_blank" rel="external">Package Control</a></li>
<li>透過Package Control安裝<a href="https://github.com/victorporof/Sublime-JSHint" target="_blank" rel="external">JSHint</a>套件</li>
</ol>
<h3 id="實際使用流程"><a href="#實際使用流程" class="headerlink" title="實際使用流程"></a>實際使用流程</h3><p>實際經驗是告訴我最好先用html-css-js pretty先做過一次排版你可以少掉很多問題～</p>
<ul>
<li><p><a href="https://github.com/victorporof/Sublime-HTMLPrettify" target="_blank" rel="external">下載</a></p>
</li>
<li><p><a href="http://www.yshpace.com/sublime-texthtmlprettify%E7%B7%A8%E7%A2%BC%E6%8E%92%E7%89%88htmlcssjs/" target="_blank" rel="external">介紹與教學</a></p>
</li>
</ul>
<p>流程上就是先按下command+shift+H用html-css-js pretty從新整理你的code，然後再按下command+shit+J用JSHint來檢查：</p>
<p>以下是原始版本：</p>
<p><img src="jsHint_sublime_1.png" alt="sublime 1"></p>
<p>整理完的的版本：</p>
<p><img src="jsHint_sublime_2.png" alt="sublime 2"></p>
<p>按下JSHint修改完的版本：</p>
<p><img src="jsHint_sublime_3.png" alt="sublime 3"></p>
<p>小小一段code 是不是差異很多啊！，最後的版本會看到它還是有提醒我有兩個沒通過的檢查，但因為這邊跟我使用AngularJS與AngularJS UI-Routing的套件有關，所以我們可以不用管它，這份code就可以開心上git摟!</p>
<h3 id="條件修改"><a href="#條件修改" class="headerlink" title="條件修改"></a>條件修改</h3><p>如果對於預設的檢測需要做條件修改，可到上方的Tools-&gt;JSHint-&gt;Set Linting Preferences就可以進去修改了，如下：</p>
<p><img src="Perferences.png" alt="Preferences"></p>
<p>至於有什麼可以修改的就參考<a href="https://github.com/victorporof/Sublime-HTMLPrettify#using-your-own-jsbeautifyrc-options" target="_blank" rel="external">官方說明</a>摟</p>
<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><p>除了一般手動檢查外，我們也可以透過Tools-&gt;JSHint-&gt;Set Plug Options 設定Sublime Text2插件在環境的特殊選項，讓他在每次編輯或是存檔的時候幫我們做自動檢查。</p>
<p><img src="env.png" alt="env"></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>在很早很早以前，當JSLint剛推出的時候還要上<a href="http://www.jslint.com/" target="_blank" rel="external">官網</a>把自己的code放進去檢查，現在在開發時的時候就可以養成良好的開發習慣了，小細節成就偉大！千萬不要養成不好的寫法與習慣啊！</p>
<p>而對於最新的ECMA Script5這邊有些JSLint與JSHint的檢查<a href="http://jslinterrors.com/this-is-an-es5-feature/" target="_blank" rel="external">比較</a>，對於這塊還不能很深刻做專研但看來JSLint目前對於ES5的支援是很悲劇的ＱＱ。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSHint </tag>
            
            <tag> SublimeText </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Edit Hosts file in Mac OS X with Terminal]]></title>
      <url>https://blackie1019.github.io/2014/01/18/edit-hosts-file-in-mac-os-x-with-terminal/</url>
      <content type="html"><![CDATA[<p>如何在OSX的環境加入自行建立的domain</p>
<a id="more"></a>
<p>Mac的host file 是在/etc/hosts，所以我們可以透過編輯器直接開啓</p>
<pre><code>sudo nano /etc/hosts
</code></pre><p>打開後再加入你要加入的domain</p>
<p><img src="hosts.png" alt="hosts"></p>
<p>然後按下Control+O 再按下enter存檔後用Control+X離開</p>
<p>接著我們要清空我們現在的DNS資料(cache與正在執行的執行檔）</p>
<pre><code>dscacheutil -flushcache;sudo killall -HUP mDNSResponer
</code></pre><p>接下來就可以在網頁打入你剛剛輸入的domain測試看看摟</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OSX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript call method(呼叫函式)]]></title>
      <url>https://blackie1019.github.io/2014/01/14/javascript-call-method/</url>
      <content type="html"><![CDATA[<p>因為javascript是一個有無限可能的程式(我指的是寫法XD)，所以這篇是幫js新手了解javascript如何呼叫/寫出函式</p>
<a id="more"></a>
<p>如果你要呼叫一個函式你可以透過以下四個方法:</p>
<ul>
<li><p>function:</p>
<pre><code>var test=function(){
    return &apos;test&apos;;
};
console.log(test());
</code></pre></li>
<li><p>method:</p>
<pre><code>var object={
    test:function(){
        return &apos;test&apos;;
    }
}
console.log(object.test());
</code></pre></li>
<li><p>Constructor:</p>
<pre><code>var People=function(){
    this.name=&apos;blackie&apos;,
    this.gender=&apos;male&apos;
}

var man=new People();
console.log(man);
</code></pre></li>
<li><p>apply() and call()</p>
<pre><code>var object={
    test:function(){
        console.log(this.name,arguments[0],arguments[1]);
    }
}

var man={name:&apos;blackie&apos;};
var woman={name:&apos;karma&apos;};

//Apply()
console.log(&quot;This Apply&quot;);
object.test.apply(man,[&apos;male&apos;,&apos;28&apos;]);

//Call()
console.log(&quot;This Call&quot;);
object.test.call(woman,&apos;female&apos;,&apos;27&apos;);
</code></pre></li>
</ul>
<p>針對apply() and call()其實只有帶入的參數使用的方法不同而已，</p>
<ul>
<li><p>apply()</p>
<p>####lets you invoke the function with arguments as an array.</p>
</li>
<li><p>call()</p>
<p>####requires the parameters be listed explicitly.</p>
</li>
</ul>
<p>從剛剛上面的範例我們看到結果是如下，可以看到其實他們是類似的東西:</p>
<p><img src="applyandcall.PNG" alt="applyandcall"></p>
<p>除了以上幾個四個用法外，常見的還有anonymous function(匿名函式)的呼叫，使用如下:</p>
<pre><code>var tryTest=function(f)
{
    f();
}

tryTest(
    function(){
        console.log(&quot;this is a test&quot;);
    }
);
</code></pre><p>當然依此我們也可以讓函式自己呼叫自己，而透過此自我呼叫的模式即可完成遞迴的功能，使用如下:</p>
<pre><code>var printRemain=function(number)
{
    console.log(number--);
    if(number&gt;0)
    {
        printRemain(number);
    }
}

printRemain(10);
</code></pre><p>結果如下:</p>
<p><img src="remains.PNG" alt="remains"></p>
<p>看到這邊你應該對javascript的函式使用不在陌生了，而透過apply,call與自我呼叫的方式你可以寫出更多可被重複使用的method或是將你的功能切成更多細項來互相交錯使用‧</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Register customize .NET MVC Web/WebAPI Routing URL from Reflection]]></title>
      <url>https://blackie1019.github.io/2014/01/12/register-customize-net-mvc-and-webapi-routing-url-from-reflection/</url>
      <content type="html"><![CDATA[<p>分享一下如何動態註冊客製的Routing</p>
<a id="more"></a>
<p><img src="image.jpg" alt="電線杆"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因工作需求，需要將原本的預設Controller\Action\ID或api\Controller\Action\ID的Routing方式都改為只有Action的情況，說明如下:</p>
<p>有一個TestController裡面有一個叫做GetTest的Action Method在預設的Rouing裡面應該會註冊成下面的樣子，</p>
<p><em>http:\domain\Test\GetTest\</em></p>
<p>或是</p>
<p><em>http:\domain\api\Test\GetTest\</em></p>
<p>但這邊需求上面卻要<em>http:\domain\GetTest\</em>，這邊有兩種方式可以幫你達到這樣的需求:</p>
<ol>
<li>在App_Start裡面的RoueCofig.cs或是WebApiConfig.cs裡面針對需要改變的Action手動做額外的註冊</li>
<li>使用Reflection的方式找出共用的類別或是判斷方式後針對要註冊的method透過寫好的迴圈判斷條件做註冊</li>
</ol>
<p>這邊稍微為大家介紹一下如何使用Refactor的方式找出程式裡面既有的controller然後再透過controller裡面的Action去做MVC Web與WebAPI的Routing註冊</p>
<h2 id="About-MVC-WebAPI-Routing"><a href="#About-MVC-WebAPI-Routing" class="headerlink" title="About MVC/WebAPI Routing"></a>About MVC/WebAPI Routing</h2><p>傳統我們在針對.NET MVC的Routing做註冊時會直接增添或修改App_Start裡面的RoueCofig.cs或是WebApiConfig，預設專案裡面的設定應該會長的像下面這樣：</p>
<pre><code>routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);
routes.MapRoute(
    name: &quot;Default&quot;,
    url: &quot;{controller}/{action}/{id}&quot;,
    defaults: new { controller = &quot;Default&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional }
);
</code></pre><p>或是</p>
<pre><code>//Register HttpRoute
config.Routes.MapHttpRoute(
    name: &quot;PostActionApi&quot;,
    routeTemplate: &quot;api/{controller}/{action}&quot;
);
</code></pre><p>透過上面的兩個預設使用方式我們可以知道URL的組成預設就包含了一個Routing名稱、url filter格式、預設控制項(controller與actionName或其他參數等設定)，URL的組成如果有不懂可以看<a href="https://blackie1019.github.io/2013/11/03/use-nonaction-attribute-to-hide-controller-in-net-mvc-routing-table/">這篇</a>，或<a href="http://blog.miniasp.com/post/2011/08/01/ASPNET-MVC-Developer-Note-Part-21-Routing-Concepts-and-Skills.aspx" target="_blank" rel="external">保哥的文章</a>‧</p>
<p>而上面有一段<code>routes.IgnoreRoute()</code>這是設定可以忽略的檔案與路徑(過濾掉路由規則定義)，有以下幾種用法</p>
<ul>
<li><p>過濾所有 *.aspx 的路徑</p>
<pre><code>routes.IgnoreRoute(&quot;{resource}.aspx/{*pathInfo}&quot;);
</code></pre></li>
<li><p>過濾 Page 目錄下的所有程式與檔案 (會直接讓IIS 來決定要用何種 Handler 來處理這次 HTTP 要求 )</p>
<pre><code>routes.IgnoreRoute(&quot;Page/{*pathInfo}&quot;);
</code></pre></li>
<li><p>忽略所有在 Page 目錄下的所有檔案 ( 保哥文章提供的另一種寫法 )</p>
<pre><code>routes.Add(new Route(&quot;Page/{*pathInfo}&quot;, new StopRoutingHandler()));
</code></pre></li>
</ul>
<p>基本上我們要注意一個要點，.NET MVC的Routing與IIS的Rouing是兩件事情，所以使用上要稍微注意不是沒註冊就連不到檔案(有可能Rouing的URL與IIS的目錄結構剛好一樣)</p>
<h2 id="Register-customize-MVC-WebAPI-Routing"><a href="#Register-customize-MVC-WebAPI-Routing" class="headerlink" title="Register customize MVC/WebAPI Routing"></a>Register customize MVC/WebAPI Routing</h2><p>而當我們要新增一個customize的Routing的時候可以透過下面的方式寫在App_Start裡面的RoueCofig.cs或是WebApiConfig當中:</p>
<pre><code>routes.MapRoute(
    &quot;Admin&quot;,
    &quot;Admin/{action}&quot;,
    new { controller=&quot;Admin&quot; },
    new { OnlyLocalhostCanApply=new LocalhostConstraint() }
);
</code></pre><p>或</p>
<pre><code>config.Routes.MapHttpRoute(
    name: &quot;PostActionApi&quot;,
    routeTemplate: &quot;api/{controller}/{action}&quot;
);
</code></pre><p>所以回歸到今天的需求如果是只要連到<em>http:\domain\GetTest\</em>的Request都要轉到TestController下面的GetTest這個ActionName來接收，我們應該要註冊一個Routing如下(以WebAPI為例):</p>
<pre><code>config.Routes.MapHttpRoute(
    name: &quot;GetTest&quot;,
    routeTemplate: &quot;api/Test/GetTest&quot;
);
</code></pre><h2 id="Register-customize-MVC-WebAPI-Routing-from-Reflection"><a href="#Register-customize-MVC-WebAPI-Routing-from-Reflection" class="headerlink" title="Register customize MVC/WebAPI Routing from Reflection"></a>Register customize MVC/WebAPI Routing from Reflection</h2><p>如果你今天只有新增一個的話只要透過上面的方式來增加就可以了，但如果你今天是要把所有Controller都做這樣的設定一個一個手動設定實在太白吃了而且如果像我有手殘的情形就會導致頁面連不到的窘境，所以下面就分享如何透過Reflection來抓出所有ActionName後來做各別註冊。</p>
<p>先簡單說一下什麼是Reflection，Reflection官方翻譯反映或鏡射反映(這我比較喜歡)，主要是可應用在動態建立型別的執行個體、繫結型別至現有物件，或從現有物件取得型別，簡單來講就是你可以透過取得一個叫為抽象的類別並透過GetType方式來確認他的型別並建立該型別特有的一些處理行為，有點類似工廠的概念‧</p>
<p>使用Reflection可大幅簡化程式碼複雜度但會稍微付出一些代價，有興趣的可以參考黑大的<a href="http://blog.darkthread.net/post-2011-07-06-reflection-performance.aspx" target="_blank" rel="external">Reflection執行效能測試</a></p>
<p>這邊我直接show上我的controller與action register routing的程式碼</p>
<pre><code> public static class WebApiConfig
{
    public static void Register(HttpConfiguration config)
    {

        //Register HttpRoute
        //config.Routes.MapHttpRoute(
        //    name: &quot;PostActionApi&quot;,
        //    routeTemplate: &quot;api/{controller}/{action}&quot;
        //);

        //RegisterMemberApi by Action to HttpRoute
        RegisterMemberApiAction(config);

    }
    private static void RegisterMemberApiAction(HttpConfiguration config)
    {
        var excludedControllerNames = new List&lt;string&gt;();
        excludedControllerNames.Add(&quot;DefaultController&quot;);
        var controllers = MvcHelper.Instance.GetAllApiControllers(excludedControllerNames);
        foreach (var c in controllers)
        {
            var actionNames = MvcHelper.Instance.GetActionNames(c);
            foreach (var actionName in actionNames)
            {
                var controllerName = c.Name.Replace(&quot;Controller&quot;, &quot;&quot;);
                config.Routes.MapHttpRoute(
                    name: controllerName + actionName,
                    routeTemplate: actionName,
                    defaults: new
                    {
                        controller = controllerName,
                        action = actionName
                    },
                    constraints: new { action = @&quot;^&quot; + actionName + &quot;&quot; }
                );
            }
        }
    }
}
</code></pre><p>MVCHelper.cs</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Web.Http;

namespace Example.Util
{
    public class MvcHelper
    {
        private static MvcHelper _mvcHelper;

        public static MvcHelper Instance
        {
            get
            {
                if (_mvcHelper == null)
                {
                    _mvcHelper = new MvcHelper();
                }
                return _mvcHelper;
            }
            set
            {
                _mvcHelper = value;
            }
        }

        private static List&lt;Type&gt; GetSubClasses&lt;T&gt;()
        {
            return Assembly.GetCallingAssembly().GetTypes().Where(
                type =&gt; type.IsSubclassOf(typeof(T))).ToList();
        }

        public List&lt;Type&gt; GetAllApiControllers(List&lt;string&gt; excludedControllerNames)
        {
            List&lt;Type&gt; controllers = new List&lt;Type&gt;();
            GetSubClasses&lt;ApiController&gt;().ForEach(
                type =&gt; controllers.Add(type));
            foreach (var c in controllers)
            {
                if (excludedControllerNames.Contains(c.Name))
                {
                    controllers.Remove(c);
                }
            }
            return controllers;
        }

        public List&lt;string&gt; GetActionNames(Type controllerType)
        {
            List&lt;string&gt; actionNames = new List&lt;string&gt;();
            var methods = controllerType.GetMethods();
            foreach (var m in methods)
            {
                if (m.IsPublic &amp;&amp; m.ReturnType.IsSubclassOf(typeof(BaseResponseModel)))
                {
                    actionNames.Add(m.Name);
                }
            }
            return actionNames;
        }
    }
}
</code></pre><p>TestController.cs</p>
<pre><code>using System;
using System.Web.Http;

namespace Example.Controllers
{
    public class ServiceLocatorController : ApiController
    {
        [HttpPost]
        public TestResponse GetTest(TestRequest request)
        {
            return GenTestRequest(request);
        }
    }
}
</code></pre><p>TestResponse.cs</p>
<pre><code>using System.Runtime.Serialization;
namespace Example.Models
{
    [DataContract]
    public class TestResponse : BaseResponseModel
    {
        [DataMember]
        public string Value
        {
            get;
            set;
        }

        public TestResponse(BaseResponseModel request)
            : base(request)
        {
        }
    }
}
</code></pre><p>這邊因為我所有的Respone與Request都有一個父類別來給他們繼承所以我直接找尋回傳符合父類別的Method就可以找到他的Controller並幫他註冊對應的Routing，所以透過RegisterMemberApiAction這個method我們就可以把所有符合的Controller跟ActionName註冊起來，很簡單吧。</p>
<h2 id="Combined-with-WebApi-HelpPage"><a href="#Combined-with-WebApi-HelpPage" class="headerlink" title="Combined with WebApi.HelpPage"></a>Combined with WebApi.HelpPage</h2><p>如果是開發WebAPI的朋友應該多少都會安裝WebApi.HelpPage，這邊要稍微注意一下，預設的HelpPage會去抓你已經註冊進入Routing的Method去幫你根據註解(comment)建立文件，所以記得要把vs專案預設建立的WebAPI routing注解或刪除，不然會有把每個method都註冊兩次歐!</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Git bash with Proxy setting]]></title>
      <url>https://blackie1019.github.io/2014/01/01/using-git-bash-with-proxy-setting/</url>
      <content type="html"><![CDATA[<p>Git一般在使用上都是直接安裝就可以Clone, Pull或Push你想要的專案了，但如果你所在的開發環境需要透過Proxy才可以連外的話，你也必須幫Git設定一些參數才可以方便他透過Proxy來幫你取得外部設定</p>
<a id="more"></a>
<h2 id="Set-Git-with-Proxy"><a href="#Set-Git-with-Proxy" class="headerlink" title="Set Git with Proxy"></a>Set Git with Proxy</h2><p>在我們安裝完Git之後打開Git Bash，輸入<code>git config --list</code> 即可看到目前的設定</p>
<p><img src="01.png" alt="01"></p>
<p><img src="02.png" alt="02"></p>
<p>這邊有三個重點要設定:</p>
<ol>
<li><p>Http.proxy</p>
<pre><code>git config --global http.proxy http://account:password@proxy Domain:port
</code></pre></li>
<li><p>Https.proxy</p>
<pre><code>git config --global https.proxy https://account:password@proxy Domain:port
</code></pre></li>
<li><p>http.sslcainfo</p>
<pre><code>git config --global http.sslcainfo /bin/curl-ca-bundle.crt
</code></pre></li>
</ol>
<p>這三個要分別設定成對的內容才可以成功的透過Proxy取得git內容，這邊稍微注意一下，如果你輸入的文字是有特殊字符的(例如$#%^…等文字)，你需要將內容轉換成特殊的character codes格式才可以，<br>例如:<br>帳號blackie.tsai<br>密碼$RFV5tgb</p>
<p>再上面的ScreenShot就可以看到其實我打進去setting的密碼是<strong>%24RFV5tgb</strong>而不是<strong>$RFV5tgb</strong></p>
<p>如果需要特殊字符轉碼可以參考<a href="http://www.obkb.com/dcljr/charstxt.html" target="_blank" rel="external">HTML character codes</a></p>
<h2 id="Try-clone-with-git-proxy"><a href="#Try-clone-with-git-proxy" class="headerlink" title="Try clone with git proxy"></a>Try clone with git proxy</h2><p>設定完後我們可以到隨意一個Github公開專案去複製他.git的位置(如下圖)</p>
<p><img src="03.png" alt="03"></p>
<p>然後同樣透過git bash我們輸入<code>git clone https://github.com/angular/angular.js.git</code> 的方式即可clone回來瞜，如下圖再跑進度表即可</p>
<p><img src="05.png" alt="05"></p>
<p>這邊順到一提如果你要再git bash 貼上文字的話要在git bash的邊框按下右鍵點選Edit&gt;Paste</p>
<p><img src="04.png" alt="04"></p>
<p>同樣，如果要複製git bash內某段文字內容就點選Edit&gt;Mark然後滑鼠左鍵選完後再按下右建複製即可。</p>
]]></content>
      
        <categories>
            
            <category> Source Control </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NTVS - Node.js Tools For Visual Studio Bootcamp]]></title>
      <url>https://blackie1019.github.io/2013/12/27/ntvs-node.js-tools-for-visual-studio-bootcamp/</url>
      <content type="html"><![CDATA[<p>NTVS是微軟上個月底新發行的一個VS tool，幫助開發者使用地表最強IDE工具開發NodeJS!除了支援可以一般的程式撰寫它還支援Intellisense, Profiling, npm，另外他在Debugging方面還支援 locally and remotely (Windows/MacOS/Linux)，最棒的是他整合了Azure Web Sites 與 Cloud Service.</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/Codeplex%20Logo.png" alt="N"></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>所支援的功能包含：</p>
<ul>
<li>node projects</li>
<li>Intellisense</li>
<li>Debugging (local &amp; remote with support for Linux and MacOS)</li>
<li>Profiling</li>
<li>node REPL with multi-line editing</li>
<li>Integrated npm GUI</li>
<li>Azure Web Sites</li>
<li>Azure Cloud Service</li>
<li>Git publishing</li>
</ul>
<p>目前visual studio 2012與2013都可使用(2010與08只能殘念)，整個NodeJS Application從開發、測試到發佈都可以透過VS來完成!真的不愧對”地表最強”這四個字阿!現在就讓我們趕快來安裝與使用吧!</p>
<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>安裝上蠻簡單的只要依序完成下面幾個動作即可</p>
<ol>
<li>先下載並安裝<a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a></li>
<li>下載並安裝<a href="https://nodejstools.codeplex.com/releases" target="_blank" rel="external">NTVS</a></li>
<li><p>安裝完成後打開VS選擇New Project-&gt;Installed-&gt;Templates-&gt;Other Languages-&gt;Javascript就可以看到六個新的專案類型</p>
<ul>
<li><p><em><strong>From Existing Node.js code</strong></em></p>
<p>  用現有的NodeJs程式建立新的專案         </p>
</li>
<li><p><em><strong>Blank Node.js Console Application</strong></em></p>
<p>  建立一個空白的NodeJs　Console專案(偏向一般桌面程式應用）</p>
</li>
<li><p><em><strong>Blank Node.js Web Application</strong></em></p>
<p>  建立一個空白的NodeJs　Web專案</p>
</li>
<li><p><em><strong>Blank Express Application</strong></em></p>
<p>  建立一個空白的Express(NodeJs的一種開發架構下面會再提到)專案</p>
</li>
<li><p><em><strong>Blank Windows Azure Node.js Application</strong></em></p>
<p>  建立一個支援Windows Azure　publish整合的NodeJs專案</p>
</li>
<li><p><em><strong>Blank Windows Azure Express Application</strong></em></p>
<p>  建立一個支援Windows Azure　publish整合的Express專案</p>
</li>
</ul>
</li>
</ol>
<h2 id="Hello-world-with-Blank-Node-js-Web-Application"><a href="#Hello-world-with-Blank-Node-js-Web-Application" class="headerlink" title="Hello world with Blank Node.js Web Application"></a>Hello world with Blank Node.js Web Application</h2><p>這邊我們選擇Blank Node.js Web Application來實作我們第一個NTVS的Hello world</p>
<p>1.　在專案這邊選擇建立新的Blank Node.js Web Application，這邊會幫我們建立以下資料</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/Arch.PNG" alt="ARCH"></p>
<p>server.js預設的內容如下：</p>
<pre><code>var http = require(&apos;http&apos;);
var port = process.env.port || 1337;
http.createServer(function (req, res) {
    res.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; });
    res.end(&apos;Hello World\n&apos;);
}).listen(port);
</code></pre><p>2.然後直接按下f5執行，就可以看到跑出一個node.exe的執行顯示port 5858 被監聽中，然後去看他開啟的網頁</p>
<p>Hello world已經幫我們開好瞜～</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/hello%20world.PNG" alt="hello world"></p>
<h2 id="Hello-world-with-Blank-Express-Application"><a href="#Hello-world-with-Blank-Express-Application" class="headerlink" title="Hello world with Blank Express Application"></a>Hello world with Blank Express Application</h2><p>這邊我們換成用選擇Blank Express Application來作我們第二個NTVS的Hello world</p>
<p>1.　在專案這邊選擇建立新的Blank Express Application，在專案建立後會幫我們透過NPM來載入需要的模組</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/npm%20update.PNG" alt="NPM"></p>
<p>順邊會幫我們建立express架構所需的資料(如果模組載入失敗會像下圖一樣顯示missing，可以右鍵手動去更新他的版本或來源或是解除安裝等設定)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/Arch%20express.PNG" alt="ARCH express"></p>
<p>2.然後直接按下f5執行，就可以看到跑出一個node.exe的執行顯示port 5858 被監聽中，然後去看他開啟的網頁</p>
<p>第二個Hello world也幫我們開好瞜～</p>
<p>針對NPM與Express的部分先前在講MAN這個架構的時候已經有介紹過，NPM請參考<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/10/23/125248.aspx" target="_blank" rel="external">這邊</a>若是想知道express架構上的內容請參考<a href="http://www.dotblogs.com.tw/blackie1019/archive/2013/10/23/125249.aspx" target="_blank" rel="external">這邊</a></p>
<h2 id="Still-need-improve"><a href="#Still-need-improve" class="headerlink" title="Still need improve"></a>Still need improve</h2><p>官方已知的問題(其他更多小問題請上論壇看更多瞜，但我覺得都不影響使用就是了)</p>
<ul>
<li>Intellisense fails on large projects (JS lang service timeout issue)</li>
<li>REPL: no intellisense</li>
</ul>
<p>但如果要我選IDE工具，我選一百次一定都是選VS！！BJ4</p>
<h2 id="Other-Tips"><a href="#Other-Tips" class="headerlink" title="Other Tips"></a>Other Tips</h2><p>在Node web application開發上面現在有幾個比較有名的套件</p>
<ul>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express</a>(會在搭配<a href="http://jade-lang.com/" target="_blank" rel="external">Jade</a>來做)</li>
<li><a href="http://mcavage.me/node-restify/" target="_blank" rel="external">Restify</a></li>
<li><a href="http://perfectapi.github.io/node-perfectapi/" target="_blank" rel="external">Node-perfectapi</a></li>
<li><a href="http://www.partialjs.com/" target="_blank" rel="external">partialJs</a></li>
</ul>
<p>而我之後會在分享最近比較感興趣的partialJs，為什麼會感興趣哩!簡單看他幾個特色瞜BJ4</p>
<ul>
<li><p><strong>Light</strong><br><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_1.PNG" alt="1"></p>
</li>
<li><p><strong>Can use own Route or WebSocket</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_2.PNG" alt="2"></p>
</li>
<li><p><strong>More Features support for viewengine</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_3.PNG" alt="3"></p>
</li>
<li><p><strong>Auto LESS　CSS</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_4.PNG" alt="4"></p>
</li>
<li><p><strong>No dependencies and Faster</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131227/compare_5.PNG" alt="5"></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[實作javascript Carousel Animation]]></title>
      <url>https://blackie1019.github.io/2013/12/24/implement-javascript-carousel-animation/</url>
      <content type="html"><![CDATA[<p>今天幫一個同事做一個前端效果所以自製了簡單的Carousel Animation(10分鐘的code沒有再經過大腦處理過，長得很醜請見諒)</p>
<a id="more"></a>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131224/horse-3.png" alt="horse"></p>
<p>Carousel Animation算以前在做silverlight的時候練到不想再練的東西…</p>
<p>如果還不知道的人可以參考這邊<a href="http://diegolamonica.info/build-a-simple-semantically-valid-carousel-from-scratch-part-4/" target="_blank" rel="external">入門與解說</a></p>
<p>重點其實就在這張圖上(這邊是以Opacity為例，我的實作有加上loop 前後的item)</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131224/3DCarousel-Animation.png" alt="重點"></p>
<p>重點就是再按下左右的時候幫裡面的物件作增減與呈現效果，接下來直接放很醜的實作</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/7m7T3/6/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[No more TODO - Customize your token keywords for Task List with Visual Studio]]></title>
      <url>https://blackie1019.github.io/2013/12/19/no-more-todo-customize-your-token-keywords-for-task-list-with-visual-studio/</url>
      <content type="html"><![CDATA[<p>在開發程式的時候想必我們都很習慣使用直接下註解TODO的方式來記錄我們以後要完成的function或是提醒自己有哪些事情還沒做，而使用Visual Studio 開發如果是自動產生的程式碼時不時都還會幫你加上這段</p>
<a id="more"></a>
<p>而VS應該從05開始應該就有工作清單(支援Todo List)功能，而在Visual Studio稱為則Task Manager，預設支援KeyWord 有 HACK, TODO, UNDONE, UnresolvedMergeConflict 這幾個關鍵字，也就說你可以直接使用下面的注解方式增加你的待處理事項(各解釋請參考<a href="http://msdn.microsoft.com/en-us/library/aa652344(v=VS.71" target="_blank" rel="external">MSDN</a>.aspx))</p>
<pre><code>//TODO:
//HACK:
//UNDONE:
//UnresolvedMergeConflict:
</code></pre><p>這些預設字在使用上是不用分大小寫</p>
<p><img src="todo.png" alt="TODO"></p>
<p>如果使用的是C++在vs2010倒是有限制要完全一樣的大小寫！如果要開啓的話可到Tools -&gt; Options -&gt; Text Editor -&gt; C/C++ -&gt; Formatting -&gt; Miscellaneous -&gt; change Enumerate Comment Tasks將其設定為true</p>
<p><img src="8.png" alt="8"></p>
<p>而實際上你加入的這些task是被存放到在隱藏的solution文件(.suo)中</p>
<p>如果我們今天想要擴充這些預設字並設定各task類型的priority的話可以參考下面的步驟</p>
<ol>
<li><p>Visual Studio 選擇上方Tools-&gt;Options</p>
<p> <img src="1.png" alt="1"></p>
</li>
</ol>
<ol>
<li><p>Enviroment-&gt;Task List，這邊可以新增自己新的定義(NeedFinish)</p>
<p> <img src="2.png" alt="2"></p>
</li>
<li><p>Visual Studio 選擇上方View-&gt;Task List，打開待處理事項清單</p>
<p> <img src="3.png" alt="3"></p>
</li>
<li><p>在程式上打上註解符號並使用剛剛新增的NeedFinish作為Task manager判斷分類</p>
<p> <img src="4.png" alt="4"></p>
</li>
<li><p>因為我們剛剛有設定priority的關係我們就可以看到NeedFinish這邊有標示出左邊的紅色驚嘆號！</p>
<p> <img src="5.png" alt="5"></p>
</li>
<li><p>透過設定priority，我們就可以使用它作為排序條件重整目前代辦事項(預設的關鍵字除了UnresolvedMergeConflict外都是normal)</p>
<p> <img src="6.png" alt="6"></p>
</li>
</ol>
<h2 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h2><p>提醒一下，如果有人在Task List看不到自己在註解所加入的代辦事項的要確認是不是在Task List有選對歐(Comments或User Tasks)</p>
<ul>
<li><p>User Taskstasks</p>
<p>  entered in the Task List)</p>
</li>
<li><p>Comments</p>
<p>  tasks entered as comments in your code, prefaced by a token keyword</p>
</li>
</ul>
<p><img src="7.jpg" alt="7"></p>
<p>另外，這個功能也是可以用在js與css的檔案上的，vs2012預設就有支援，vs2010的話要安裝一下<a href="http://visualstudiogallery.msdn.microsoft.com/6ed4c78f-a23e-49ad-b5fd-369af0c2107f" target="_blank" rel="external">Web Essentials</a>，而如果事前端開發者的話請開心使用<a href="http://jslint4vs2010.codeplex.com/" target="_blank" rel="external">JSLint for vs2012</a>或是用<a href="http://www.jetbrains.com/resharper/" target="_blank" rel="external">resharper</a>也有支援。</p>
<p>最後最後！記住如果自己Customize的token keyword是不能直接讓其他人產生效果的(這有點像是你在設定自己的VS環境而已)，所以如果是團隊開發或是要把你做的token keyword List分享給其他人的話可以參考官方的做法<br><a href="http://blogs.msdn.com/b/zainnab/archive/2010/07/14/exporting-your-environment-settings-vstipenv0021.aspx" target="_blank" rel="external">匯出目前所有環境設定</a>與<br><a href="http://blogs.msdn.com/b/zainnab/archive/2010/07/15/importing-or-changing-your-environment-settings-vstipenv0022.aspx" target="_blank" rel="external">匯入或合併目前的環境設定</a>.</p>
]]></content>
      
        <categories>
            
            <category> Development&amp;Coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[App_Code is Evil in Web Application Project]]></title>
      <url>https://blackie1019.github.io/2013/12/15/app_code-is%20-evil/</url>
      <content type="html"><![CDATA[<p>最近在新的專案上使用了WebAPI開發一些服務，結果因為以前的壞習慣讓我直接下意識地開了App_Code的資料夾並在資料夾內放了一些會常用到的Utilc或Common類型的class或static method。</p>
<p>機車的是當我build過後真正傳入參數作處理要取得服務資料時出現了一些莫名的RunTime Error…</p>
<a id="more"></a>
<p><img src="app_code.png" alt="app_code"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其中最讓我感到錯愕的就是他跟我說我傳入某一個method的參數不是我要的class類型…但我仔細一看我的程式碼</p>
<p>FXCK!是哪裡不一樣的類型(class)了啦，見鬼了！！！</p>
<p><img src="%E9%98%BF1.jpeg" alt="阿1"></p>
<p>結果弄了兩天我還是不知道這個RunTime Error是啥只好請問J神，一開始他的反應也是</p>
<p><img src="%E9%98%BF2.jpeg" alt="阿2"></p>
<p>但幾分種後馬上後來發現了我一個白痴的懷習慣把共用程式放到App_Code才導致一些莫名的怪情況</p>
<h2 id="Bin-and-App-Code"><a href="#Bin-and-App-Code" class="headerlink" title="Bin and App_Code"></a>Bin and App_Code</h2><p>在以往.NET的Web專案中如果要在網頁之間共用程式我們通常可以將程式碼保存在兩個特殊的資料夾，</p>
<ul>
<li><p>Bin</p>
<ol>
<li>已編譯的程式碼 (.dll 檔案)</li>
<li>Web 應用程式中的任何其他程式碼 (例如網頁的程式碼) 都會自動參考它</li>
</ol>
</li>
<li><p>App_Code</p>
<ol>
<li>原始程式碼(.cs/.vb等檔案)</li>
<li>它會自動在執行階段編譯(處理成特殊的dll 檔案)。 產生的組件可由 Web 應用程式中的任何其他程式碼存取。</li>
<li>未明確標示為包含使用任一程式語言撰寫的檔案， 而是由.NET 自動根據資料夾目前包含的檔案，推斷要叫用哪一個編譯器(C#,VB或其他編譯器)。</li>
</ol>
</li>
</ul>
<p>兩個看起來很像，差別在App_Code資料夾存放原始程式碼而不是已編譯的程式碼，而且當你在建立你的Web應用程式時，.NET會幫你將放在App_Code的程式碼包成可此作執行的DLL檔案，但他是以一種<strong>特殊的方法</strong>來處理包裝的過程。</p>
<h2 id="細看App-Code"><a href="#細看App-Code" class="headerlink" title="細看App_Code"></a>細看App_Code</h2><p>在使用.NET建立Web專案時，VS會預設幫我們建立這一個資料夾，而這資料夾也俱有動態編譯的功能(預設的類型是不會編譯的，需要將每一個檔案都選擇為compiler)，而裡面可以放的檔案類型包含，自定控制項、自定class、interface 等都可以。</p>
<p>但由於在每次變更App_Code裡面資料時都會讓程式自動重新編譯，對於大型的專案會浪費太多時間，所以官方是建議將共用程式模組化後使用類別庫(class library)的方式來取代App_Code。</p>
<p>預設情況下App_Code在編譯時會被編譯成一個單獨的程式集(code base)，而預設編譯的語言會自動偵測你資料內使用的開發語言作編譯，如果需要支援多種語言就需要做下面的web.config設定：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">compilation</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">codeSubDirectories</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">add</span> <span class="attr">directoryName</span>=<span class="string">"VBFolder"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">codeSubDirectories</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">compilation</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果不做作上面的設定，則所有在App_Code根目錄的內容會被打包成一個App_Code_xxxx.dll(xxxx是隨機產生的數字或文字)，所有子目錄會被打包成App_SubCode_yyyy_xxxx.dll(yyyy是子目錄名稱)</p>
<h2 id="Devil-is-in-details"><a href="#Devil-is-in-details" class="headerlink" title="Devil is in details"></a>Devil is in details</h2><p>而本次發生Runtime Error告訴我A類別不是A類別的原因就在於App_Code本身會自動將目錄內的資料編譯成一個特殊的dll給專案參考，而我多餘的就是在本身打包程式下更改了namespace，把App_Code移除換成我自己的命名的…</p>
<p>結果就導致我有兩個一樣名稱的class在兩個不同namespace的dll內，而在runtime時就會導致系統認為我這個class是ambiguously(不知道你是來自於Bin的dll還是App_Code自動編譯的dll)</p>
<p>解決方法就是將程式移出App_Code內在外部自行開資料夾使用，或是App_Code內的程式namespace都用預設的App_Code即可。</p>
<p>而補充上一節提到的，在.NET有兩種針對網頁有兩種開發模式，兩者比較可<a href="http://msdn.microsoft.com/en-us/library/dd547590.aspx" target="_blank" rel="external">參考</a>：</p>
<ol>
<li>Web site專案</li>
<li>Web application專案</li>
</ol>
<p><img src="%E6%AF%94%E8%BC%83.png" alt="比較"></p>
<p>其中Web application專案不使用App_Code這個資料夾，而且預設也不會幫你加入該資料夾(但你要手動加入的話是不會阻擋的…)</p>
<p>為什麼Web application不適用可以參考[App_Code 資料夾不適用於 Web 應用程式專案](<a href="http://vishaljoshi.blogspot.tw/2009/07/appcode-folder-doesnt-work-with-web.html。" target="_blank" rel="external">http://vishaljoshi.blogspot.tw/2009/07/appcode-folder-doesnt-work-with-web.html。</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>會寫這篇文章其實要感謝J神幫我提醒了我這壞習慣，當我去問J神的對話如下：</p>
<p>Blackie:ㄟ，J神我有一個問題解了兩天還是不知道錯在哪邊可以請你幫我看一下是不是我寫法有問題嗎？</p>
<p>J神：蛤，build得過嗎？</p>
<p>Blackie:可以，是Runtime Error，他跟我說我自己新增的某一個class不能傳入某一個新的method作使用，因為method要傳入的變數型別跟我傳入的變數型別不同，但我是用我新增的class做傳入阿！</p>
<p>J神：蛤，你在說什麼啦！<strong>直接看程式啦！</strong></p>
<p>Blackie:就這份,你看這明明就一樣的類別啊…</p>
<p>J神：哇靠…這啥小啊，一樣啊！</p>
<p>(2分鐘後)</p>
<p>J神：FXCK，你這白癡幹嘛把class的.cs檔案放到<strong>App_Code</strong>，這個資料夾很神奇啦，你把程式移出來在build一次run看看。</p>
<p>Blackie:…真的可以了，FXCK我都忘記了這個壞習慣了</p>
<p>J神：你說你這個問題花了幾天？</p>
<p>Blackie:婀…兩天半…</p>
<p>J神：Ｘ！我要把你當做案例提醒大家不要這樣</p>
<p>Blackie：…那我自己寫一篇網誌讓你tag吧….</p>
<p>其實這個白癡的問題早在好幾年前就有大神在耳邊提醒過了，問我為什麼會有這樣的壞習慣，其實是因為我看在大學做專題的時候買了一本神書上面寫的其中一段，但我一直只懂片面而不去瞭解實際運作模式，導致我完全相信了書上每一句話．(別誤會這本書真的寫得很好！而我也真的獲益良多)</p>
<p><img src="%E6%9B%B8%E6%9C%AC_1.jpg" alt="ASP.net問題解決_1"></p>
<p><img src="%E6%9B%B8%E6%9C%AC_2.jpg" alt="ASP.net問題解決_2"></p>
<p>這次再踩雷只好認真翻一下MSDN上面的文件，仔細搞懂運作模式，希望把這壞習慣徹底忘了！</p>
<p><img src="%E5%A5%BD%E7%B2%BE%E7%B7%BB.jpg" alt="看仔細"></p>
<p><em>開發路上不怕走偏走錯，就怕錯了還以為是對的結果越走越遠不知如何回頭，一步一步走得扎實才能往正確的地方前進，發現自己走錯的時候也能及時回頭。</em></p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Html.Raw() method to show content include Html tags in .NET MVC(under Razor ViewEngine)]]></title>
      <url>https://blackie1019.github.io/2013/11/13/using-html-raw-method-to-show-content-include-html-tags-in-net-mvc-with-razer-viewengine/</url>
      <content type="html"><![CDATA[<p>在.NET MVC中如果使用Razor作為ViewEngine 我們最常用來輸出一個model的參數的用法應該就是@了，這邊來介紹如何輸出包含HTML Tag的內容</p>
<a id="more"></a>
<p>詳細的說明與用法可以參考Demo大的<a href="http://demo.tc/Post/679" target="_blank" rel="external">ASP.NET MVC3 Razor 初心者容易遇到的問題</a>。</p>
<p>這邊要講的是如果你今天model的參數是一個包含HTML Tag的內容，如:</p>
<pre><code>&lt;a hef=&quot;http://www.google.com.tw&quot;&gt;click me&lt;/a&gt;
</code></pre><p>或是</p>
<pre><code>&amp;#60;a hef=&amp;#34;http://www.google.com.tw&amp;#34;&amp;#62;click me&amp;#60;/a&amp;#62;
</code></pre><p>*上例HTML特殊字元encode可參考W3school的<a href="http://www.w3schools.com/tags/ref_entities.asp" target="_blank" rel="external">HTML ISO-8859-1 Reference</a></p>
<p>上面兩個如果你直接使用@將其直印出的話就變成畫面上直接出現你的內容值，這邊用印出一個空白non-breaking space(&nbsp;)為例:</p>
<p>在View裡面的寫法如果是下面這樣</p>
<pre><code>&lt;td class=&quot;align-l&quot;&gt;
    @item.BaseCurrencySymbol
&lt;/td&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/4.PNG" alt="code1"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/1.PNG" alt="印出內容1"></p>
<p>如果改用Html.Raw()來輸出值的話</p>
<pre><code>&lt;td class=&quot;align-l&quot;&gt;
    @Html.Raw(item.BaseCurrencySymbol)
&lt;/td&gt;
</code></pre><p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/3.PNG" alt="code2"></p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131113/2.PNG" alt="印出內容2"></p>
<p>從上面就可以明顯看出差異了，這邊再來看一下官方文件的解說(<a href="http://msdn.microsoft.com/en-us/library/gg480740(v=vs.108" target="_blank" rel="external">原文內容</a>.aspx))。</p>
<blockquote>
<p>###HtmlHelper.Raw Method (String)</p>
<p>Returns markup that is not HTML encoded.</p>
<ul>
<li><p>Namespace:  System.Web.Mvc</p>
</li>
<li><p>Assembly:  System.Web.Mvc (in System.Web.Mvc.dll)</p>
</li>
</ul>
</blockquote>
<p>如果你有使用類似<a href="http://ckeditor.com/" target="_blank" rel="external">CKEditor</a>這種編輯器plugin的話就一定要記得將輸出改為Html.Raw()的方式來轉換，避免直接將encode的Html Tag印出</p>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Use NonAction Attribute to Hide Controller in .NET MVC Routing Table]]></title>
      <url>https://blackie1019.github.io/2013/11/04/use-nonaction-attribute-to-hide-controller-in-net-mvc-routing-table/</url>
      <content type="html"><![CDATA[<p>如果我們想要讓某一個Controller中的Action不要在路由表內被註冊的時候就可以透過NonAction的方式來實現</p>
<a id="more"></a>
<p>在.NET MVC當中一個Controller通常會被對應到URL中並透過該Controller本身具有的Action來作為整個路由(Routing)註冊的樣式，以一個叫做SportController的範例來說可能如下:</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/1.PNG" alt="1"></p>
<p>通常產生的Controller都會被註冊成上面這樣格式的路由至MVC的路由表中，而當我們的網頁在被使用者透過瀏覽器的URL連結進來的時候，會先檢查MVC的路由表裡面有沒有這樣格式的路由，如果沒有就會再去檢查IIS的路由是否有，如果也沒有就會回傳錯誤訊息404至使用者端。</p>
<p>而當我們想要讓某一個Controller中的Action不要在路由表內被註冊的時候就可以透過NonAction的方式來實現，使用的方式很簡單只要在你的Action上面加上[NonAction]就可以了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/2.PNG" alt="2"></p>
<ul>
<li><p>一般的結果如下:</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/3.PNG" alt="3"></p>
</li>
<li><p>加入NonAction之後的如下:</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/4.PNG" alt="4"></p>
</li>
</ul>
<p>這邊可以看到加上NonAction之後就真的不會註冊在MVC Routing Table當中當然就會去詢問IIS，如果IIS也沒有就會拋出404錯誤(這邊被我另外寫的ErrorPage所接收起來)</p>
<p>而MVC Error Page我這邊目前是透過Web.config來設定，如下:</p>
<ul>
<li><p>Web.config</p>
<p>  <img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131104/5.PNG" alt="5"></p>
</li>
<li><p>ErrorController</p>
<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace BlackieStudio.Controllers
{
    public class ErrorController : Controller
    {
        public ActionResult Index()
        {
            return View(&quot;Error&quot;);
        }
        public ActionResult NotFound()
        {
            Response.StatusCode = 404;
            return View(&quot;NotFound&quot;);
        }
        public ActionResult Forbidden()
        {
            Response.StatusCode = 403;
            return View(&quot;Forbidden&quot;);
        }
        public ActionResult InternalError()
        {
            Response.StatusCode = 500;
            return View(&quot;InternalError&quot;);
        }

    }
}
</code></pre></li>
<li><p>Forbidden.html</p>
<pre><code>@{
    ViewBag.Title = &quot;Forbidden&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}

&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<ul>
<li><p>Index.html</p>
<pre><code>@{
    ViewBag.Title = &quot;Error&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}
&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;div class=&quot;list-sfs-holder&quot;&gt;
        &lt;div class=&quot;alert alert-error&quot;&gt;
            An unexpected error has occurred. Please contact the system administrator.&lt;/div&gt;
        @if (Model != null &amp;&amp; HttpContext.Current.IsDebuggingEnabled)
        {
            &lt;div&gt;
                &lt;p&gt;
                    &lt;b&gt;Exception:&lt;/b&gt; @Model.Exception.Message&lt;br /&gt;
                    &lt;b&gt;Controller:&lt;/b&gt; @Model.ControllerName&lt;br /&gt;
                    &lt;b&gt;Action:&lt;/b&gt; @Model.ActionName
                &lt;/p&gt;
                &lt;div style=&quot;overflow:scroll&quot;&gt;
                    &lt;pre&gt;
                        @Model.Exception.StackTrace
                    &lt;/pre&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<ul>
<li><p>InternalError.html</p>
<pre><code>@{
    ViewBag.Title = &quot;InternalError&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}

&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;div class=&quot;list-sfs-holder&quot;&gt;
        &lt;div class=&quot;alert alert-error&quot;&gt;
            An unexpected error has occurred. Please contact the system administrator.&lt;/div&gt;
        @if (Model != null &amp;&amp; HttpContext.Current.IsDebuggingEnabled)
        {
            &lt;div&gt;
                &lt;p&gt;
                    &lt;b&gt;Exception:&lt;/b&gt; @Model.Exception.Message&lt;br /&gt;
                    &lt;b&gt;Controller:&lt;/b&gt; @Model.ControllerName&lt;br /&gt;
                    &lt;b&gt;Action:&lt;/b&gt; @Model.ActionName
                &lt;/p&gt;
                &lt;div style=&quot;overflow:scroll&quot;&gt;
                    &lt;pre&gt;
                        @Model.Exception.StackTrace
                    &lt;/pre&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        }
    &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
<li><p>NotFound.html</p>
<pre><code>@{
    ViewBag.Title = &quot;NotFound&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}

&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;@ViewBag.Title&lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cannot hide status bar in iOS7]]></title>
      <url>https://blackie1019.github.io/2013/11/03/ios-hide-status-bar/</url>
      <content type="html"><![CDATA[<p>如何隱藏iOS7的狀態列<br><a id="more"></a></p>
<p>最簡單的做法是在你的APP .plist 裡面加入下面兩個屬性</p>
<ul>
<li><p>Status bar is initially hidden = YES</p>
</li>
<li><p>View controller-based status bar appearance = NO</p>
</li>
</ul>
<p>增添完plist如下圖：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131103/plist.png" alt="plist"></p>
<p>這樣就可以遮蔽摟～！</p>
<p>遮蔽前：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131103/before.png" alt="前"></p>
<p>遮蔽後：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131103/after.png" alt="後"></p>
<p>這樣簡單的兩個設定當初還找了一陣子…..iOS7預設是會顯示status bar 這邊要提醒大家一下摟</p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ASP.NET MVC 4 入門]]></title>
      <url>https://blackie1019.github.io/2013/10/23/asp-net-mvc-4-basic/</url>
      <content type="html"><![CDATA[<p>MVC 4開發環境與基本知識</p>
<a id="more"></a>
<h2 id="檢視引擎-view-engines"><a href="#檢視引擎-view-engines" class="headerlink" title="檢視引擎(view engines):"></a>檢視引擎(view engines):</h2><ul>
<li><p>ASPX</p>
<p>  傳統的頁面架構，保持先前ASP.NET的web form概念使用.aspx/.ascx/.master 等檔案組成 templates 架構，使用&lt;%%&gt;的方式呈現ASP.NET程式碼區段，如下:</p>
<pre><code>&lt;h1&gt;Hello MVC&lt;/h1&gt;
&lt;p&gt;I am &lt;%=name %&gt;&lt;/p&gt;
&lt;% foreach(var skill in skills){ %&gt;
    &lt;li&gt;&lt;%=skill.name %&gt;&lt;/li&gt;
&lt;% } %&gt;
</code></pre></li>
<li><p>Razor</p>
<p>  因關注點分離(Aspect-Oriented Programming)概念所產生的一個新的頁面架構(CSHTML)，<a href="http://www.w3schools.com/aspnet/mvc_htmlhelpers.asp" target="_blank" rel="external">HTML Helper</a>完全支援該架構(HTML Helper的客製可參考<a href="http://kelp.phate.org/2010/12/aspnet-mvc-htmlhelper.html" target="_blank" rel="external">此</a>)，而該架構設計的重點如下:</p>
<ul>
<li>避免弄亂你的程式碼(avoid spaghetti code)，透過Razor的注入方式即可將整段code插入，讓你的view能更加簡潔，且可將程式碼的關注點逐項分離避免一個頁面有太雜亂的資訊</li>
<li>加速學習-對底層的HTML,js,CSS的概念與技術需更加熟悉但也更容易上手</li>
<li>Razor是一個頁面架構而非一個新的程式語言，所以你還是使用C#/VB(or Other)語言做學習，只是在頁面的安排上你透過Razor來簡化你原本的頁面程式注入的架構</li>
<li>Razor可以透過一般的文字編輯器即可編輯程式碼(Notepad++,sublimeText都OK)，修改.cshtml的檔案時不用重新compile程式，直接修改即可</li>
<li>在VS2010之後的版本都有支援Intellisense，sublimeText也可以安裝package來支援(參考<a href="https://github.com/joseph-turner/Razor" target="_blank" rel="external">Razor Syntax Definition - Sublime Text 2</a>)</li>
<li><p>支援單元測試(Unit Test)，由於將關注點分離的概念可以使得View上每個Razor的subfunction都可以被拿來當作單元測試，單純檢測View而不用所接受到Controller所傳入的資料才能檢測</p>
<p>使用@的方式呈現ASP.NET程式碼區段，如下:</p>
<p>  </p><h1>Hello MVC</h1><br>  <p>I am @name </p><br>  @ forearch(var skill in skills){<p></p>
<pre><code>&lt;li&gt;@skill.name&lt;/li&gt;
</code></pre><p>  }</p>
</li>
</ul>
</li>
</ul>
<p><em>根據ScottGu的推薦好像還有兩個<a href="http://sparkviewengine.com/" target="_blank" rel="external">Spark</a>與<a href="http://code.google.com/p/nhaml/" target="_blank" rel="external">HNaml</a>在先前MVC3時也常被使用，但MVC4之後就是Razor的天下了</em></p>
<h2 id="NuGet"><a href="#NuGet" class="headerlink" title="NuGet"></a>NuGet</h2><p>VS2012已經自動加入了，而透過NuGet做專案內的套件管理，這邊要稍微注意一下NuGet的版本有更新，如果你是用VS 2012安裝好的NuGet記得要更新一下，以下幾個不錯的Tips可參考</p>
<ul>
<li><a href="http://blog.miniasp.com/post/2011/05/17/Useful-Visual-Studio-2010-tool-NuGet-Package-Manager.aspx" target="_blank" rel="external">VS2010 手動加入NuGet參考</a></li>
<li>移除上有問題可以參考<a href="http://stackoverflow.com/questions/14714619/cant-update-or-uninstall-nuget-package-manager-in-vs2012" target="_blank" rel="external">Can’t Update or Uninstall NuGet Package Manager in VS2012</a></li>
<li><a href="http://demo.tc/Post/763" target="_blank" rel="external">NuGet套件還原</a></li>
<li><a href="http://blog.darkthread.net/post-2011-05-27-nuget-server.aspx" target="_blank" rel="external">架設自己的NuGet Server</a></li>
</ul>
<h2 id="MVC架構"><a href="#MVC架構" class="headerlink" title="MVC架構"></a>MVC架構</h2><p><img src="MVC.png" alt="mvc"></p>
<p><img src="MVC2.png" alt="mvc2"></p>
<h2 id="目錄架構-以Internet-Application-Template為例"><a href="#目錄架構-以Internet-Application-Template為例" class="headerlink" title="目錄架構(以Internet Application Template為例):"></a>目錄架構(以Internet Application Template為例):</h2><ul>
<li><p>App_Data</p>
<p>  這邊存放db, XML, 或是任一會使用到資料實體檔案</p>
</li>
<li><p>App_Start</p>
<p>  因為加強關注點分離的概念所以這邊寫的東西會在外層的Global.asax.cs實際被註冊與使用的程式碼(a set of static classes)</p>
</li>
<li><p>AreaRegistration</p>
<p>  與MVC3之前的使用相同，可將程式分區塊，藉此可以不用將一份程式碼分成兩個專案去管理(如前後台功能的網站，可透過Area的方式直接在同一個專案內分割成不同網站)</p>
<ul>
<li><p>WebApiConfig</p>
<p>  針對WebAPI所設定的一些Routing與機制</p>
</li>
<li><p>FilterConfig</p>
</li>
<li><p>RouteConfig</p>
</li>
<li><p>BundleConfig</p>
</li>
<li><p>AuthConfig</p>
</li>
</ul>
</li>
<li><p>Content</p>
<p>  靜態檔案(可能參考到的images、css、js)，也包含預設的theme相關檔案(包含minified後的檔案)</p>
</li>
<li><p>Controllers</p>
<p>  放所有可以使用的Controller檔案，注意Controllers這邊的檔案命名一定要以Controller結尾，且回傳結果必須為一個View的Class</p>
</li>
<li><p>Filters</p>
<p>  Action 過濾器</p>
</li>
<li><p>Images</p>
<p>  放使用到的圖檔</p>
</li>
<li><p>Models</p>
<p>  放使用到的Model檔案</p>
</li>
<li><p>Scripts</p>
<p>  放所有被會被使用到的JS檔案</p>
</li>
<li><p>Views</p>
<p>  所有網頁裡面實際的檢視頁面檔案，會按照各頁面的Class名稱分別建立對應的sub-folder</p>
</li>
<li><p>Global.asax</p>
<p>  註冊所使用到的程式與服務處</p>
</li>
<li><p>packages.config</p>
<p>  所有在專案中透過NuGet管理的套件(package)都會寫在這邊做載名</p>
</li>
<li><p>Web.config</p>
<p>  該網頁應用程式的相關設定與參數</p>
</li>
</ul>
<h2 id="整合BootStrap3"><a href="#整合BootStrap3" class="headerlink" title="整合BootStrap3"></a>整合BootStrap3</h2><p>-</p>
<ul>
<li>參考上面設定確認App_start-&gt;BootstrapBundle.Config.cs的設定正確，筆者設定如下:</li>
</ul>
<pre><code>using System.Web.Optimization;
[assembly: WebActivatorEx.PostApplicationStartMethod(typeof(BlackieStudio.App_Start.BootstrapBundleConfig), &quot;RegisterBundles&quot;)]
namespace BlackieStudio.App_Start
{
    public class BootstrapBundleConfig
    {
        public static void RegisterBundles()
        {
            // Add @Styles.Render(&quot;~/Content/bootstrap/base&quot;) in the &lt;head/&gt; of your _Layout.cshtml view
            // For Bootstrap theme add @Styles.Render(&quot;~/Content/bootstrap/theme&quot;) in the &lt;head/&gt; of your _Layout.cshtml view
            // Add @Scripts.Render(&quot;~/bundles/bootstrap&quot;) after jQuery in your _Layout.cshtml view
            // When &lt;compilation debug=&quot;true&quot; /&gt;, MVC4 will render the full readable version. When set to &lt;compilation debug=&quot;false&quot; /&gt;, the minified version will be rendered automatically
            BundleTable.Bundles.Add(new ScriptBundle(&quot;~/bundles/bootstrap/js&quot;).Include(&quot;~/Scripts/bootstrap.min.js&quot;));
            BundleTable.Bundles.Add(new StyleBundle(&quot;~/bundles/bootstrap/css&quot;).Include(
                &quot;~/Content/bootstrap/bootstrap.min.css&quot;,
                &quot;~/Content/bootstrap/bootstrap-theme.min.css&quot;
            ));
        }
    }
}
</code></pre><ul>
<li><p>新增一個Views-&gt;Shared-&gt;_BootStrapLayout.cshtml的頁面內有加入上一個項目所設定的Bootstrap css與js，筆者設定如下:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta name=&quot;author&quot; content=&quot;Blackie Tsai&quot; /&gt;
    &lt;meta name=&quot;description&quot; content=&quot;BlackieStudio Site&quot; /&gt;
    &lt;meta name=&quot;keywords&quot; content=&quot;blackie,blackiestudio&quot; /&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;[BootStrap]BlackieStudio-@ViewBag.Title&lt;/title&gt;

    @Styles.Render(&quot;~/Content/css&quot;)
    @Styles.Render(&quot;~/Content/themes/base/css&quot;)
    @Styles.Render(&quot;~/bundles/bootstrap/css&quot;)
    @Scripts.Render(&quot;~/bundles/modernizr&quot;)
&lt;/head&gt;
&lt;body&gt;
    @RenderBody()

    @Scripts.Render(&quot;~/bundles/jquery&quot;)
    @Scripts.Render(&quot;~/bundles/bootstrap/js&quot;)

    @RenderSection(&quot;scripts&quot;, required: false)
&lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
</ul>
<ul>
<li><p>各頁面加入Bootstrap的配置即可，參考設定如下:</p>
<pre><code>@{
    ViewBag.Title = &quot;Index&quot;;
    Layout = &quot;~/Views/Shared/_BootstrapLayout.cshtml&quot;;
}
&lt;!--View container --&gt;
&lt;div id=&quot;brief&quot; class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot;&gt;
    &lt;h1&gt;Hi, I am Blackie&lt;/h1&gt;
    &lt;p class=&quot;lead&quot;&gt;......&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx" target="_blank" rel="external">Introducing “Razor” – a new view engine for ASP.NET</a></li>
<li><a href="http://www.codeproject.com/Articles/585873/Basic-Understanding-On-ASP-NET-MVC-4" target="_blank" rel="external">Basic-Understanding-On-ASP-NET-MVC-4</a></li>
<li><a href="http://www.c-sharpcorner.com/UploadFile/suthish_nair/mvc-folders/" target="_blank" rel="external">Understanding ASP.NET MVC Project Folders</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Web MVC/WebApi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Phonegap archives/build armv7s error!（What different between armv6/armv7/armv7s/arm64?)]]></title>
      <url>https://blackie1019.github.io/2013/10/12/ios-cordova-archives-or-build-armv7s-error-difference-between-armv6-armv7-armv7s-and-arm64/</url>
      <content type="html"><![CDATA[<p>在Xcode 4.6.X的時代預設使用的Archives與build的架構是在armv6/armv7/armv7s(但armv7s預設不會開啓)所以在打包ipa檔案都沒什麼問題，直到最近換成Xcode5與iOS7之後真的是一連串的悲劇。</p>
<a id="more"></a>
<p>先直接的說明，如果你要打包Phonegap的專案請使用armv7就好，設定上如下圖：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131012/1.png" alt="1"></p>
<p>上面可以看得很清楚Xcode5預設的打包(最右邊的iOS Default)是跑在armv7/armv7s/arm64，</p>
<p>如果不改成只支援armv7就會發生下面的悲劇錯誤</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131012/2.png" alt="2"></p>
<p>講完解決辦法，就來講講這幾個設定到底有什麼差別，其實他們就是ARM對應的指令版本</p>
<ul>
<li>armv6<ul>
<li>iPhone</li>
<li>iPhone2</li>
<li>iPhone3G</li>
<li>第一代和第二代iPod Touch</li>
</ul>
</li>
<li>armv7<ul>
<li>iPhone4</li>
<li>iPhone4S</li>
</ul>
</li>
<li>armv7s<ul>
<li>iPhone5</li>
<li>iPhone5C</li>
</ul>
</li>
<li>arm64<ul>
<li>iPhone5S     </li>
</ul>
</li>
</ul>
<p>如果在build setting的Architectures中 選擇“Standard Active Architecture Only”為Yes則會根據你目前的裝置打包對應的版本；但若選false，則會讓编译器一起打包兩個指令集的版本檔案會比较大，但是能使用Armv7的優化，同時也能讓較舊的機器也正常使用。</p>
<p>這邊要注意一點，一般Debug的时候“Build Active Architecture Only”如果你選擇YES，這是讓你以目前架構看程式是否有问题，而你如果是要Release的时候一定要選擇NO，因为需要配合其他的機型來使用，而且不選額no的話也不能讓你打包的歐！這點要千萬注意。</p>
<p>關於Build Active Architecture Only如何設定可以參考<a href="https://blackie1019.github.io/2013/10/10/xcode4-upgrade-to-xcode5-symbol-not-found-for-architecture-armv7-or-armv7s-linker-error/">[iOS]Xcode4 upgrade to Xcode5:ld: symbol(s) not found for architecture armv7 or armv7s linker error
</a></p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phonegap </tag>
            
            <tag> Cordova </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flurry:symbols not found for architecture i386]]></title>
      <url>https://blackie1019.github.io/2013/10/11/ios-flurry-symbols-not-found-for-architecture-i386/</url>
      <content type="html"><![CDATA[<p>Flurry更新設定<br><a id="more"></a></p>
<p>這邊小弟原先使用的Flurry因為要app要上iOS7所以要更新到4.2.3以上的版本才能支援，所以先去官網下載了目前最新版的4.2.4，並將檔案放置專案後如下：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93blog/blogs/20131011/1.png" alt="1"></p>
<p>但是當我們run在iOS7的裝置或模擬器時會出現下面的錯誤</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93blog/blogs/20131011/2.png" alt="2"></p>
<p>這邊的修正方式是到target&gt;Build Phases&gt;Link Binary With Libraries中加入Security.framework後再重新run該專案即可正常執行了</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93blog/blogs/20131011/3.jpg" alt="3"></p>
<p>這邊要稍微注意一下如果你還是有遇到iOS實機執行的問題可以參考小弟之前另外一篇<a href="https://blackie1019.github.io/2013/10/10/xcode4-upgrade-to-xcode5-symbol-not-found-for-architecture-armv7-or-armv7s-linker-error/">[iOS]Xcode4 upgrade to Xcode5:ld: symbol(s) not found for architecture armv7 or armv7s linker error</a></p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xcode4 upgrade to Xcode5 - symbol(s) not found for architecture armv7 or armv7s linker error]]></title>
      <url>https://blackie1019.github.io/2013/10/11/xcode4-upgrade-to-xcode5-symbol-not-found-for-architecture-armv7-or-armv7s-linker-error/</url>
      <content type="html"><![CDATA[<p>最近因為手殘把手機從iOS6升到iOS7後發現原本的Xcode4.6.3不能開發了…要使用Xcode5才可以上實機開發，而Xcode5又要OSX至少10.8以上的版本才能安裝，</p>
<a id="more"></a>
<p>所以昨天花了一整天才把因手殘發生的悲劇環境重新弄好，正當興高采烈地打開專案要開始上實機開發卻發生了下面的悲劇畫面</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131007/2.png" alt="1"></p>
<p>後來查了一下，原來是因為專案架構目前不支援的緣故(專案內有些只能跑armv7而不是armv7s)，而我們可以透過在修改專案的Active Architecture Only的方式來避免掉這個問題，如下：</p>
<p><img src="https://dl.dropboxusercontent.com/u/20925528/%E6%8A%80%E8%A1%93Blog/blogs/20131007/1.png" alt="2"></p>
<p>Active Architecture Only這個設定值預設是No的這邊我們要設定為Yes後就可以了，而這個值如果是Yes其實是設定在按下左上方執行(run)時讓專案只依據你目前連接的手機進行重建(build)，執行上會比預設還快一點，而預設的No則是不依據你的手機做執行(就有可能發生armv7 or armv7s linker error)</p>
<p>目前看來打包出來的app還是可以run在iphone4,iphone4s 只要你專案設定SDK有支援的目前看來還是可以執行的(只要iOS Deployment Targets有支援你選擇的iOS版本，這邊我是選擇5.0)</p>
<p>而如果你也是跟我一樣用Phonegap開發APP的話強烈建議你升級到最新的Phonegap版本，因為這部分有些舊的專案設定已經不支援或建議修改了（目前我用的是2.5 &amp; 2.7，專案內有很多警告….)</p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用CSS製作對話框簽名檔效果]]></title>
      <url>https://blackie1019.github.io/2013/10/09/signature-with-css-only/</url>
      <content type="html"><![CDATA[<p>運用CSS製作取代圖片的簽名檔<br><a id="more"></a></p>
<p><img src="singature.png" alt="signature"></p>
<p>小弟最近發現原來文章推薦數有點少(文章寫得太沒內容…orz)，所以只好用哀兵策略，跪求看完文章的大大們給點指教或按個推薦之類的，想說來弄個簽名檔提醒大家一下吧</p>
<p>剛好之前有看到<a href="http://www.minwt.com/css/8996.html" target="_blank" rel="external">梅問題用CSS做對話框的效果</a></p>
<p>這邊使用他教學的範例做了一些小修正後搭配了圖片寫成下面的html與CSS</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--簽名檔CSS--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">.mwt_border&#123;</div><div class="line">width: 250px;</div><div class="line">height: 40px;</div><div class="line">text-align: center;</div><div class="line">color: #fff;</div><div class="line">background: #252525;</div><div class="line">position: relative;</div><div class="line">border: solid 1px #252525;</div><div class="line">margin-left: 80px;</div><div class="line">top: -50px;</div><div class="line">padding: 0px;</div><div class="line">&#125;</div><div class="line">/*箭頭右*/</div><div class="line">.signature .mwt_border .arrow_r_int&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:transparent transparent transparent #252525;</div><div class="line">	position:absolute;</div><div class="line">	top:20%;</div><div class="line">	right:-30px;</div><div class="line">&#125;</div><div class="line">/*箭頭右-邊框*/</div><div class="line">.signature .mwt_border .arrow_r_out&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:transparent transparent transparent #252525;</div><div class="line">	position:absolute;</div><div class="line">	top:20%;</div><div class="line">	right:-29px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*箭頭左*/</div><div class="line">.signature .mwt_border .arrow_l_int&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:transparent #252525 transparent  transparent ;</div><div class="line">	position:absolute;</div><div class="line">	top:20%;</div><div class="line">	left:-30px;</div><div class="line">&#125;</div><div class="line">/*箭頭左-邊框*/</div><div class="line">.signature .mwt_border .arrow_l_out&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:transparent #252525 transparent transparent ;</div><div class="line">	position:absolute;</div><div class="line">	top:20%;</div><div class="line">	left:-29px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*箭頭上*/</div><div class="line">.signature .mwt_border .arrow_t_int&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:transparent transparent #252525 transparent ;</div><div class="line">	position:absolute;</div><div class="line">	top:-30px;</div><div class="line">	left:40px;</div><div class="line">&#125;</div><div class="line">/*箭頭上-邊框*/</div><div class="line">.signature .mwt_border .arrow_t_out&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:transparent transparent #252525 transparent ;</div><div class="line">	position:absolute;</div><div class="line">	top:-29px;</div><div class="line">	left:40px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*箭頭下*/</div><div class="line">.signature .mwt_border .arrow_b_int&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:#252525 transparent transparent transparent ;</div><div class="line">	position:absolute;</div><div class="line">	bottom:-30px;</div><div class="line">	right:50px;</div><div class="line">&#125;</div><div class="line">/*箭頭下-邊框*/</div><div class="line">.signature .mwt_border .arrow_b_out&#123;</div><div class="line">	width:0px;</div><div class="line">	height:0px;</div><div class="line">	border-width:15px;</div><div class="line">	border-style:solid;</div><div class="line">	border-color:#252525 transparent transparent transparent ;</div><div class="line">	position:absolute;</div><div class="line">	bottom:-29px;</div><div class="line">	right:50px;</div><div class="line">&#125;</div><div class="line">.signature .signature-profile&#123;</div><div class="line">	width: 60px; </div><div class="line">	height: 60px;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--簽名檔HTML(http://www.minwt.com/css/8996.html)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"signature"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"http://blackie1019.github.io/img/profile2.jpg"</span> <span class="attr">style</span>=<span class="string">"width: 60px; height: 60px;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mwt_border"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"arrow_l_int"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"arrow_l_out"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	如果覺得文章還不錯麻煩請在文章上面給予推薦，你的支持是小弟繼續努力產出的動力！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>將上面的的內容貼到後台組態設定的文章簽名檔中的Source內(如下圖)</p>
<p><img src="1.png" alt="1"></p>
<p>這邊要稍微注意一下，上面程式碼中倒數的幾行，在編輯存檔後如果再進去原始碼修改則編輯器會把下面兩行清除，所以這邊建議可以先用註解的方式包起來之後有編修簽名檔的時候要記得把這兩行手動加回來。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"arrow_l_int"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"arrow_l_out"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上就可完成一個對話框效果的簽名檔摟，大家一起來改一下吧～</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS & Android icon and preloading size list]]></title>
      <url>https://blackie1019.github.io/2013/10/02/ios-and-android-icon-and-preloading-size-list/</url>
      <content type="html"><![CDATA[<p>整理一下開發APP時所要知道的各項尺寸</p>
<a id="more"></a>
<h2 id="iOS-PNG-only"><a href="#iOS-PNG-only" class="headerlink" title="iOS:(PNG only)"></a>iOS:(PNG only)</h2><h3 id="preloading"><a href="#preloading" class="headerlink" title="preloading"></a>preloading</h3><ul>
<li>320 × 480 (iphone3gs) Default~iphone.png</li>
<li>640 × 960 (iPhone4) Default@2x~iphone.png</li>
<li>768 × 1004 (iPad) Default-Portrait~ipad.png</li>
<li>1024 x 768 (iPad) Default-Landscape~ipad.png</li>
<li>1536 × 2008 (Retina iPad)  Default-Portrait@2x~ipad.png</li>
<li>2048 × 1496 (Retina iPad)  Default-Landscape@2x~ipad.png</li>
<li>640 × 1136 (iPhone 5)  Default-568h@2x~iphone.png</li>
</ul>
<h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><ul>
<li>57×57 (default iPhone) icon.png</li>
<li>114×114 (Retina iPhone) icon@2x.png</li>
<li>72×72 (default iPad) icon-72.png</li>
<li>144×144 (Retina iPad) icon-72@2x.png</li>
<li>512×512 (app store) application144x144.png</li>
</ul>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android:"></a>Android:</h2><h3 id="preloading-none-or-by-device-screen"><a href="#preloading-none-or-by-device-screen" class="headerlink" title="preloading(none or by device screen)"></a>preloading(none or by device screen)</h3><h3 id="icon-1"><a href="#icon-1" class="headerlink" title="icon"></a>icon</h3><ul>
<li>ldpi should be 36 x 36</li>
<li>mdpi should be 48 x 48</li>
<li>hdpi should be 72 x 72</li>
<li>xhdpi should be 96 x 96</li>
<li>xxhdpi should be 144 x 144</li>
</ul>
<h2 id="icon-slayer"><a href="#icon-slayer" class="headerlink" title="icon slayer"></a>icon slayer</h2><p>這是一個可以你只要上傳一張圖就可以幫你產生不同尺寸iOS&amp;android icons的網站(含光影與圓角效果等調整)</p>
<p><a href="http://www.gieson.com/Library/projects/utilities/icon_slayer/#.UkuTiWQskVl" target="_blank" rel="external">icon slayer</a></p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[網頁資料輸出轉為Excel檔案時數字資料強制為文字呈現(含其他mso支援格式轉換)]]></title>
      <url>https://blackie1019.github.io/2013/09/30/html-convert-to-excel-with-force-numeric/</url>
      <content type="html"><![CDATA[<p>在網頁應用程式開發上常常會有需求是要把表格呈現的資料轉為excel儲存，而遇到這些需求的時候往往就是透過直接輸出一個表格的方式(html table tag)把資料透過tr,th,td的方式印出來。</p>
<a id="more"></a>
<p>而有時候在印出的資料為一個數字的時候會發生印出少0的情況，如035781178印出來會變成35781178，而資料如果是035-781178卻可以成功印出。其實這樣是因為excel column預設的general format會將數字開頭的0去除，而文字格式則不會有這個問題。</p>
<p>實務上，下面是一段可以將電話前端0印出的classic asp程式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">'設定輸出為excel格式</div><div class="line">response.ContentType = "application/vnd.ms-excel"</div><div class="line">'設定檔名</div><div class="line">response.AddHeader "content-disposition", "attachment; 	filename=Export.xls"</div><div class="line">%&gt;</div><div class="line">&lt;%</div><div class="line">Set RS = conn.execute(session("CardApply_Sql"))</div><div class="line">%&gt;</div><div class="line">&lt;HTML&gt;</div><div class="line">'設定編碼，避免中文亂碼</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;%</div><div class="line">Response.Write("&lt;style type=text/css&gt;")</div><div class="line">Response.Write("td&#123;mso-number-format:\@;&#125;") '將所有td欄位格式改	為"文字"</div><div class="line">Response.Write("&lt;/style&gt;")</div><div class="line">%&gt;</div><div class="line">&lt;table border=1 style="font-size:12pt;"&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;卡別&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;卡號&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;會員編號&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;身分證字號&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;姓名&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;印製狀態&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;E-mail&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;申請時間&lt;/th&gt;  </div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;聯絡地址&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;聯絡電話&lt;/th&gt;</div><div class="line">&lt;th bgcolor="#d0d0d0"&gt;手機電話&lt;/th&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;%</div><div class="line">while not RS.EOF</div><div class="line">	response.write "&lt;tr&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("CardType") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("CardNo") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("member_gicuitem") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("personalid") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("realname") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("email") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("xreffctupublic") &amp; "&lt;/td&gt;"			</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("deditDate") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("address")&amp;"&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("telSection")&amp;RS("tel") &amp; "&lt;/td&gt;"</div><div class="line">		response.write "&lt;td align='left'&gt;" &amp; RS("mobile") &amp; "&lt;/td&gt;"</div><div class="line">	response.write "&lt;/tr&gt;"</div><div class="line">	RS.movenext</div><div class="line">wend</div><div class="line">%&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>從上面可以看到，只要一段CSS就可以解決你的問題了，而如果你是要其他格式也可以幫你轉換，這邊幫大家找到一份整理資料如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"0"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>NO Decimals<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"0\.000"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>3 Decimals<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"\#\,\#\#0\.000"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Comma with 3 dec<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"mm\/dd\/yy"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Date7<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"mmmm\ d\,\ yyyy"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Date9<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"m\/d\/yy\ h\:mm\ AM\/PM"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>D -T AMPM<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"Short Date"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>01/03/1998<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"Medium Date"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>01-mar-98<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"d\-mmm\-yyyy"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>01-mar-1998<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"Short Time"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>5:16<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"Medium Time"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>5:16 am<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"Long Time"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>5:16:21:00<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"Percent"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Percent - two decimals<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"0%"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Percent - no decimals<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"0\.E+00"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Scientific Notation<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"\@"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"\#\ ???\/???"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>Fractions - up to 3 digits (312/943)<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"\0022£\0022\#\,\#\#0\.00"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>£12.76<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span>mso-number-format:"\#\,\#\#0\.00_ \;\[Red\]\-\#\,\#\#0\.00\ "<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">"top"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2 decimals, negative numbers in red and signed<span class="tag">&lt;<span class="name">br</span>&gt;</span>(1.56   <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#cc0000;"</span>&gt;</span>-1.56<span class="tag">&lt;/<span class="name">span</span>&gt;</span>)<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Chart API 畫出QRCode]]></title>
      <url>https://blackie1019.github.io/2013/09/27/qrcode-generate-by-google-chart-api/</url>
      <content type="html"><![CDATA[<p>這是Google提供的一個免費的畫圖Web API Service ，只要傳入指定選項與內容即可透過呼叫Web API Service的方式產生你要的圖或表甚至是QRCode</p>
<a id="more"></a>
<h2 id="Google-Chart-API"><a href="#Google-Chart-API" class="headerlink" title="Google Chart API"></a>Google Chart API</h2><p>除了傳統的直接互叫web service 服務之外，現在只要是google提供的API都有做動態載入的功能，使用上如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;!--載入 AJAX API--&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://www.google.com/jsapi"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">  <span class="comment">//動態載入 Visualization API 與 piechart package.</span></div><div class="line">  google.load(<span class="string">'visualization'</span>, <span class="string">'1.0'</span>, &#123;<span class="string">'packages'</span>:[<span class="string">'corechart'</span>]&#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 設定 Google Visualization API 成功載入時的callback function</span></div><div class="line">  google.setOnLoadCallback(drawChart);</div><div class="line"></div><div class="line">  <span class="comment">// 執行畫圖</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">drawChart</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Create the data table.</span></div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> google.visualization.DataTable();</div><div class="line">    data.addColumn(<span class="string">'string'</span>, <span class="string">'Topping'</span>);</div><div class="line">    data.addColumn(<span class="string">'number'</span>, <span class="string">'Slices'</span>);</div><div class="line">    data.addRows([</div><div class="line">      [<span class="string">'Mushrooms'</span>, <span class="number">3</span>],</div><div class="line">      [<span class="string">'Onions'</span>, <span class="number">1</span>],</div><div class="line">      [<span class="string">'Olives'</span>, <span class="number">1</span>],</div><div class="line">      [<span class="string">'Zucchini'</span>, <span class="number">1</span>],</div><div class="line">      [<span class="string">'Pepperoni'</span>, <span class="number">2</span>]</div><div class="line">    ]);</div><div class="line"></div><div class="line">    <span class="comment">// 設定畫圖相關屬性</span></div><div class="line">    <span class="keyword">var</span> options = &#123;<span class="string">'title'</span>:<span class="string">'How Much Pizza I Ate Last Night'</span>,</div><div class="line">                    <span class="string">'width'</span>:<span class="number">400</span>,</div><div class="line">                    <span class="string">'height'</span>:<span class="number">300</span>&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 傳入畫圖相關數興趣產生畫圖的instance並將結果畫在指定內容上</span></div><div class="line">    <span class="keyword">var</span> chart = <span class="keyword">new</span> google.visualization.PieChart(<span class="built_in">document</span>.getElementById(<span class="string">'chart_div'</span>));</div><div class="line">    chart.draw(data, options);</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>這邊帶大家看一個QRCode的範例，此範例是用呼叫服務的方式產生</p>
<p><a class="jsbin-embed" href="http://jsbin.com/AbEFEmu/1/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<p>基本上要畫圖表也可以，而此範例適用動態載入後再呼叫服務的方式產生</p>
<p><a class="jsbin-embed" href="http://jsbin.com/AbEFEmu/2/embed?html,output" target="_blank" rel="external">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>想知道還可以做到什麼更多的內容，請參考<a href="https://google-developers.appspot.com/chart/interactive/docs/gallery" target="_blank" rel="external">此</a></p>
<p>想要線上玩玩Google的Chart API 可以到<a href="https://code.google.com/apis/ajax/playground/?type=visualization#pie_chart" target="_blank" rel="external">此</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Google Chart API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何做MS SQL定序(Collation) 轉換]]></title>
      <url>https://blackie1019.github.io/2013/09/26/mssql-collation-update-and-setup/</url>
      <content type="html"><![CDATA[<p>定序(Collation)，簡單來說定序就是在決定你的資料被排序與資料間比對的一個規則指引，看是要依據什麼規則來定.</p>
<a id="more"></a>
<h2 id="MS-SQL定序"><a href="#MS-SQL定序" class="headerlink" title="MS SQL定序"></a>MS SQL定序</h2><p>SQL Server的定序預設設定視安裝類型而定。一般而言，預設會選擇Windows 系統地區設定的 SQL Server 定序，以台灣繁體中文來說是Chinese_Taiwan_Stroke_CI_AS，所有的定序可以看<a href="http://technet.microsoft.com/en-us/library/ms188046.aspx" target="_blank" rel="external">官方說明</a></p>
<p>而在MSSQL你可以直接下查詢去查你指定的DB定序</p>
<pre><code>-- 目前資料庫定序（DB名稱為MAS_Mobile_OpenGIP）
SELECT DATABASEPROPERTYEX (&apos;MAS_Mobile_OpenGIP&apos; ,&apos;Collation&apos; )
</code></pre><p>一般來說簡單的定序分類<a href="http://www.dotblogs.com.tw/jimmyyu/archive/2009/08/30/10320.aspx" target="_blank" rel="external">from</a></p>
<ul>
<li><p>Case sensitivity(CS)</p>
<p>  簡單來說就是區分大小寫，A跟a是不同的，如果是Case Insensitive(CI)的話A在排序或者查詢時就會被視為相同，也就是查詢A，連同a也會被查詢到。</p>
</li>
<li><p>Accent sensitivity(AS)</p>
<p>  代表的是腔調上的差別，a跟á、o跟ó在腔調上是相同的，那查詢時是要視為相同，如果是的話，那就是Accent Insensitive(AI)，如果不是的話就視為Accent sensitive。</p>
</li>
<li><p>Kana Sensitivity(KS)</p>
<p>  日文中的片假名(Hiragana)與平假名(Katakana)如果被視為相同，那就是Kana Insensitive(KI)，反之就是Kane sensitive.。</p>
</li>
<li><p>Width sensitivity(WS)</p>
<p>  當半形字與全型自被視為相同(A跟Ａ)，那就是Width Insensitive(WI)，反之就是Width sensitive。</p>
</li>
</ul>
<h2 id="定序轉換流程"><a href="#定序轉換流程" class="headerlink" title="定序轉換流程"></a>定序轉換流程</h2><p>在開始流程前要先知道定序可分為三部分</p>
<ul>
<li><p>DataBase定序</p>
<p>  幫指定的DataBase作定序，之後產生的Table與Column會依據此這設定來指定預設的定序</p>
</li>
<li><p>Table定序</p>
<p>  幫指定的Table作定序，之後產生的所有欄位(Column)資料會依據此設定來指定預設的定序</p>
</li>
</ul>
<ul>
<li><p>Column定序</p>
<p>  幫指定的Column作定序，而改筆資料的內容會依據此設定做定序</p>
</li>
</ul>
<p>由上解說可以知道他們三者在預設上有依序繼承的關係，但你也可以分別設定，圖解如下圖：</p>
<p><img src="%E6%9E%B6%E6%A7%8B%E5%9C%96.png" alt="定序架構圖"></p>
<p>在瞭解完其實定序最小單位是Column之後，來做定序修改的實作，以下操作流城市已有實際資料的情況下你要如何做定序轉換的流程。</p>
<h3 id="流程步驟如下："><a href="#流程步驟如下：" class="headerlink" title="流程步驟如下："></a>流程步驟如下：</h3><ol>
<li><p>先備份原先資料庫(bak檔案)</p>
</li>
<li><p>建置一新的定序資料庫</p>
</li>
<li><p>用step1的bak還原剛剛建立的定序資料庫</p>
</li>
<li><p>修改Database預設定序</p>
</li>
<li><p>修改Table預設定序</p>
</li>
<li><p>修改Column預設定序</p>
</li>
<li><p>完成定序修改並備份目前資料庫  </p>
</li>
</ol>
<h3 id="會使用到的指令有以下幾個："><a href="#會使用到的指令有以下幾個：" class="headerlink" title="會使用到的指令有以下幾個："></a>會使用到的指令有以下幾個：</h3><ol>
<li>查出所有設為Chinese_Taiwan_Stroke_CI_AS的欄位</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Table_Name,CoLumn_name,collation_name,*</div><div class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</div><div class="line"><span class="keyword">WHERE</span> collation_name=<span class="string">'Chinese_Taiwan_Stroke_CI_AS'</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> TABLE_NAME,COLUMN_NAME</div></pre></td></tr></table></figure>
<ol>
<li>檢查單一table的欄位定序設定(NULL表示非文字)</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, collation_name</div><div class="line"><span class="keyword">FROM</span> sys.columns</div><div class="line"><span class="keyword">WHERE</span> OBJECT_ID <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> OBJECT_ID</div><div class="line"><span class="keyword">FROM</span> sys.objects</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">type</span> = <span class="string">'U'</span></div><div class="line"><span class="keyword">AND</span> <span class="keyword">name</span> = <span class="string">'actactivity'</span>)</div><div class="line"><span class="keyword">GO</span></div></pre></td></tr></table></figure>
<ol>
<li>產生欄位定序修改的語法(這邊以Chinese_Taiwan_Stroke_CI_AS修改為Chinese_Taiwan_Stroke_BIN為例)</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> (</div><div class="line">	<span class="keyword">SELECT</span> (<span class="string">'ALTER TABLE '</span> + <span class="keyword">quotename</span>(TABLE_NAME) +</div><div class="line">	<span class="string">' ALTER COLUMN '</span> + <span class="keyword">quotename</span>(COLUMN_NAME) + <span class="string">' '</span> + 		<span class="keyword">quotename</span>(DATA_TYPE) +</div><div class="line">	<span class="keyword">CASE</span> <span class="keyword">WHEN</span> CHARACTER_MAXIMUM_LENGTH = <span class="number">-1</span> <span class="keyword">then</span> <span class="string">'(max)'</span></div><div class="line">	<span class="keyword">WHEN</span> DATA_TYPE <span class="keyword">in</span> (<span class="string">'text'</span>,<span class="string">'ntext'</span>) <span class="keyword">then</span> <span class="string">''</span></div><div class="line">	<span class="keyword">WHEN</span> CHARACTER_MAXIMUM_LENGTH <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">	<span class="keyword">THEN</span> <span class="string">'('</span>+(<span class="keyword">CONVERT</span>(<span class="built_in">VARCHAR</span>,CHARACTER_MAXIMUM_LENGTH)+<span class="string">')'</span> )</div><div class="line">	<span class="keyword">ELSE</span> <span class="keyword">isnull</span>(<span class="keyword">CONVERT</span>(<span class="built_in">VARCHAR</span>,CHARACTER_MAXIMUM_LENGTH),<span class="string">' '</span>) <span class="keyword">END</span></div><div class="line">	+<span class="string">'COLLATE Chinese_Taiwan_Stroke_BIN '</span> + <span class="keyword">CASE</span> IS_NULLABLE</div><div class="line">	<span class="keyword">WHEN</span> <span class="string">'YES'</span> <span class="keyword">THEN</span> <span class="string">'NULL'</span></div><div class="line">	<span class="keyword">ELSE</span> <span class="string">'NOT NULL'</span></div><div class="line">	<span class="keyword">END</span>) <span class="keyword">AS</span> script</div><div class="line">	<span class="keyword">from</span> INFORMATION_SCHEMA.COLUMNS</div><div class="line">	<span class="keyword">WHERE</span> collation_name=<span class="string">'Chinese_Taiwan_Stroke_CI_AS'</span></div><div class="line">) <span class="keyword">as</span> <span class="keyword">Test</span></div><div class="line"><span class="keyword">WHERE</span> script != <span class="string">'NULL'</span></div></pre></td></tr></table></figure>
<ol>
<li>view的欄位改定序 (<a href="http://bretstateham.com/applying-a-collation-to-columns-in-a-view%E2%80%A6/" target="_blank" rel="external">http://bretstateham.com/applying-a-collation-to-columns-in-a-view%E2%80%A6/</a>)</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">YourColumnName COLLATE  chinese_taiwan_stroke_bin</div></pre></td></tr></table></figure>
<ol>
<li>目前資料庫定序(MAS_Mobile_OpenGIP為你要查詢的Database名稱)</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> DATABASEPROPERTYEX (<span class="string">'MAS_Mobile_OpenGIP'</span> ,<span class="string">'Collation'</span> )</div></pre></td></tr></table></figure>
<p>以下Step by Step的圖解(以Chinese_Taiwan_Stroke_CI_AS修改為Chinese_Taiwan_Stroke_BIN為例)：</p>
<ol>
<li>修改Database定序</li>
</ol>
<p><img src="1.PNG" alt="1"></p>
<ol>
<li>修改完後查詢Table時小寫差無該Table</li>
</ol>
<p><img src="2.PNG" alt="2"></p>
<ol>
<li>大寫才查得到</li>
</ol>
<p><img src="3.PNG" alt="3"></p>
<ol>
<li>查詢欄位資料(用where對文字類型欄位用like查詢)沒分大小寫皆可查到</li>
</ol>
<p><img src="4.PNG" alt="4"></p>
<ol>
<li>檢查該欄位確實還是Chinese_Taiwan_Stroke_CI_AS</li>
</ol>
<p><img src="5.PNG" alt="5"></p>
<ol>
<li>透過指令3產生查詢語法</li>
</ol>
<p><img src="6.PNG" alt="6"></p>
<ol>
<li>產生的查詢語法會包含Table與View的所有欄位(請將View的欄位先移除）</li>
</ol>
<p><img src="7.PNG" alt="7"></p>
<ol>
<li>直接執行全部指令會發生錯誤，因為如果欄位是PK,FK或是有關聯其他Table的欄位需要先將該設定移除才可以修改或是透過9的步驟以介面方式手動調整即可連動修改</li>
</ol>
<p><img src="8.PNG" alt="8"></p>
<ol>
<li>針對剛剛有問題的Table進去設計模式修改該Column的定序(右鍵-&gt;屬性-&gt;全文檢索規格中的定序)</li>
</ol>
<p><img src="9.PNG" alt="9"></p>
<ol>
<li>若該修正有包括其他欄位的關聯則會聯動修改</li>
</ol>
<p><img src="10.PNG" alt="10"></p>
<ol>
<li>確認修改為我們要的Chinese_Taiwan_Stroke_BIN後儲存本次設計修正</li>
</ol>
<p><img src="11.PNG" alt="11"></p>
<ol>
<li>如果到外面看該欄位為資料庫預設值這邊則要參考你該Database的設定(請用指令5確認目前Database定序設定為Chinese_Taiwan_Stroke_BIN)</li>
</ol>
<p><img src="12.PNG" alt="12"></p>
<ol>
<li>針對如果是View的修正無法使用上述流程，須手動將View重新建立(先取得所有View的Ceate Script後再將目前View全部刪除，再執行修改完的View Create Script)</li>
</ol>
<p><img src="13.PNG" alt="13"></p>
<ol>
<li>修改View指令的方法為在Select欄位時，針對每個字串欄位做指令4的定序宣告</li>
</ol>
<p><img src="14.PNG" alt="14"></p>
<h2 id="定序結果驗證"><a href="#定序結果驗證" class="headerlink" title="定序結果驗證"></a>定序結果驗證</h2><p>依照流程處理完資料後請依序驗證Database, Table與 Column的定序設定(透過指令1與指令5)都正確後可直接下查詢去檢查，以下列圖組為例：</p>
<p><img src="check_1.jpg" alt="check_1"></p>
<p><img src="check_2.jpg" alt="check_2"></p>
<p><img src="check_3.jpg" alt="check_3"></p>
<p><img src="check_4.jpg" alt="check_4"></p>
<p>以上即可證明完成定序資料轉換。</p>
]]></content>
      
        <categories>
            
            <category> Database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MSSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用iScroll.js讓在Cordova(Phonegap)上面快樂拖曳與捲軸功能＆一秒加速iscroll.js]]></title>
      <url>https://blackie1019.github.io/2013/09/10/iscrolljs-introduction-with-cordova/</url>
      <content type="html"><![CDATA[<p>在開發Hybrid app或是Web app的時候難免會需要做到拖曳或是滾動刷新的功能，通常網頁放到手機上拖放功能都可以正常運作，但如果要做成app的方式，就不會希望你的application被發現可以這樣拖曳(會被猜穿是網頁使用者會有疑慮，使用經驗會不好)</p>
<a id="more"></a>
<p><img src="1.jpg" alt="iScroll.js"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常有這需求大致上可能要完成下面幾個功能：</p>
<ol>
<li>條列頁下拉刷新</li>
<li>左右滑動切換資料(類似carousels效果，以前寫silverlight時第一個做的demo就是這個效果)</li>
<li>點選Zoom in與雙指Zoom out</li>
<li>與滾動相關的操作</li>
</ol>
<p>當有以上需求的時候就可以透過iScroll.js來幫你完成</p>
<h2 id="iScroll-js介紹"><a href="#iScroll-js介紹" class="headerlink" title="iScroll.js介紹"></a>iScroll.js介紹</h2><p>他可以支援上述的點選縮放(pinch/zoom), 下拉更新(pull down to refresh)與滾動事件等來製作客製功能.</p>
<p>這邊節錄官方的幾個重要功能,以下幾個功能用手機或平板操作比較好</p>
<ul>
<li>下拉更新<a href="http://cubiq.org/dropbox/iscroll4/examples/pull-to-refresh/" target="_blank" rel="external">DEMO</a></li>
<li>點選縮放<a href="http://cubiq.org/dropbox/iscroll4/examples/zoom/" target="_blank" rel="external">DEMO</a></li>
<li>左右slide效果<a href="http://cubiq.org/dropbox/iscroll4/examples/carousel/" target="_blank" rel="external">DEMO</a></li>
</ul>
<p>這邊實作上只要先加入該script後在你要使用的dom物件帶入生成iScroll物件即可，如下</p>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script&gt;
        myScroll = new iScroll(&apos;div_showcase_img&apos;,{ zoom: true });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;div_showcase_img&quot; class=&quot;div_showcase_img&quot;&gt;
        &lt;img class=&quot;showcase_img_s&quot; src=&quot;test.png&quot;&gt;&lt;/img&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>這樣就可以生成一個支援點選縮放的區塊了，如下示意：</p>
<p>一開始：<br><img src="4.png" alt="demo圖-1"></p>
<p>點選：<br><img src="5.png" alt="demo圖-2"></p>
<p>雙指放大：<br><img src="6.png" alt="demo圖-3"></p>
<p>好吧，看圖說故事是沒用的，來看影片吧哈哈</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/pENszKvvGEg" frameborder="0" allowfullscreen></iframe>

<h2 id="祕技：一秒加速"><a href="#祕技：一秒加速" class="headerlink" title="祕技：一秒加速"></a>祕技：一秒加速</h2><p>接下來來示範一秒加速</p>
<p>將下面打開iScroll.js並將103行的useTransition從false改為true就好</p>
<p><img src="2.png" alt="加速"></p>
<p>一秒搞定真給力！其實是參考K大的文章-<a href="http://www.icoding.co/2012/03/iscroll-js%E7%9A%84scroll%E4%B8%8D%E9%A0%86%E6%80%8E%E9%BA%BC%E8%BE%A6%EF%BC%9F" target="_blank" rel="external">iScroll.js的scroll不順怎麼辦？</a></p>
<p>現在最新版的iScroll5 也在beta了，目前已經有的demo非常多，看來功能真的變強大了</p>
<p><img src="3.png" alt="demo圖"></p>
<p>有興趣的可以上他們<a href="https://github.com/cubiq/iscroll" target="_blank" rel="external">Github</a>關註一下</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cordova </tag>
            
            <tag> iScroll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[for loop vs for-in loop 與效能改善]]></title>
      <url>https://blackie1019.github.io/2013/09/05/for-loop-vs-for-in-loop/</url>
      <content type="html"><![CDATA[<p>比較for loop與for-in loop與效能實戰<br><a id="more"></a></p>
<p><img src="1.png" alt="Logo"></p>
<h2 id="for-loop-介紹"><a href="#for-loop-介紹" class="headerlink" title="for loop 介紹"></a>for loop 介紹</h2><p>引用<a href="http://www.w3schools.com/js/js_loop_for.asp" target="_blank" rel="external">W3C school</a>上的內容</p>
<blockquote>
<p>Loops are handy, if you want to run the same code over and over again, each time with a different value.<br>Often this is the case when working with arrays:</p>
</blockquote>
<p>這邊他也特別說明幾種迴圈，引用上面的出處的內容</p>
<ul>
<li>for - loops through a block of code a number of times</li>
<li>for/in - loops through the properties of an object</li>
<li>while - loops through a block of code while a specified condition is true</li>
<li>do/while - also loops through a block of code while a specified condition is true</li>
</ul>
<p>這邊很簡單的說明了一般For,while,do/while 這三個類型的loop都是可以取得一整群物件或是重復做某動作時使用，只有for/in 是取得物件內屬性(properties)時使用</p>
<p>在使用for/in loop的時候需要注意因為物件屬性在被存入物件的時候會以key-value的方式存放，物件內屬性排序是依照屬性名稱去排序的，有時會發生你宣告的順序與讀出的順序不同的情況，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//變數宣告</span></div><div class="line"><span class="keyword">var</span> items=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</div><div class="line">	items_ch=[<span class="string">"tse"</span>,<span class="string">"123"</span>,<span class="string">"abc"</span>,<span class="string">"gg"</span>,<span class="string">"中文"</span>],</div><div class="line">	item=&#123;</div><div class="line">		<span class="string">"first"</span>:<span class="string">"first"</span>,</div><div class="line">		<span class="string">"2"</span>:<span class="string">"2"</span>,</div><div class="line">		<span class="string">"34"</span>:<span class="string">"34"</span>,</div><div class="line">		<span class="string">"1"</span>:<span class="string">"1"</span>,</div><div class="line">		<span class="string">"second"</span>:<span class="string">"second"</span></div><div class="line">	&#125;;</div></pre></td></tr></table></figure>
<p>上面三種物件只有item是單一物件其他都是陣列的方式，這邊使用for loop與for-in loop來比較一下呈現結果</p>
<p><img src="3.png" alt="for與for-in比較"></p>
<p>可以看到在讀出屬性時他的順序的確是按照key值去排序，而不是按照我們宣告的順序(properties本來宣告也就沒再分順序)，使用時要稍微注意一下</p>
<h2 id="更有效的使用for-loop"><a href="#更有效的使用for-loop" class="headerlink" title="更有效的使用for loop"></a>更有效的使用for loop</h2><p>原始的迴圈版本</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;items.length;i++)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>調整1：將items.length宣告成一個變數，並讓迴圈的判斷改成每次去比對該變數</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;items.length;i++)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>調整2：將迴圈改為遞減至0</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=items.length;i&gt;<span class="number">0</span>;i--)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>調整3:透過while迴圈改善</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i=items.length;</div><div class="line"><span class="keyword">while</span>(i--)&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三者的實際比較可以看下圖(測試的電腦為mac air 2011 cpu i5，1.7 GHz (i5-2557M) dual-core Intel Core i5 with 3 MB shared L3 cache)</p>
<p><img src="2.png" alt="效能圖"></p>
<p>這邊也額外加上了for-in loop的比較，由此可知錯用for-in loop來跑真的是一件很可怕的事情….(跟原本的迴圈比降低了90%以上的效能)</p>
<p>而<em>改善二</em>跟<em>改善三</em>在我桌機上(i7 3770) 基本上秒數是一樣差不了太多，效能改善跟原本的相比<em>改善二</em>跟<em>改善三</em>大概差了1%左右</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以自己開發上來說我會盡量作<em>改善三</em>，少部分情況我也會只做<em>改善一</em>而已(迴圈內數量不大且沒雙層迴圈的情況)</p>
<p>小小的一個迴圈可能就可以讓你的程式效能差距甚遠，<em>改善一</em>只是將變數往前提出宣告就可以進步10%的效能，這可能是CP值最高的必修項目了<br>，而如果你錯用for-in再跑迴圈的話可能會跑到哭出來，在這邊分享心得給大家一下摟，如果有更好的寫法也麻煩提出建議讓小弟也學習一下～！</p>
<h2 id="題外話-撰寫CPU保持使用率在50-的程式"><a href="#題外話-撰寫CPU保持使用率在50-的程式" class="headerlink" title="題外話 - 撰寫CPU保持使用率在50%的程式"></a>題外話 - 撰寫CPU保持使用率在50%的程式</h2><p>因為在跑for loop 每次透過console.log印出結果時發現CPU會飆到100％，這時我想到幾年前看過一個號稱是微軟面試程式人員的題目，要面試人員寫出一個可以讓CPU維持50%運作情況的程式，這邊我們可以透過for loop + setTimeout 來作，程式如下：</p>
<pre><code>setInterval(&quot;doLoop()&quot;,300);
function doLoop(){
    console.log(&quot;do looping...&quot;);
    //變數宣告與前置處理
    var items=[];
    for(var i=0;i&lt;5150;i++){
        items.push(i);
    }
    for(var i=0,itemLength=items.length;i&lt;itemLength;i++){
        console.log(&quot;&quot;);
    }
}
</code></pre><p>Mac的用戶可以用iStat pro來看，結果截圖如下:</p>
<p><img src="4.png" alt="50%圖"></p>
<p>記得那個題目還有波形，三角形與長方形等應用，其實都是透過讓CPU飆上去再讓他idle控制CPU使用量的波形，有興趣的人可以去做做看摟</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mou Introduction - Write Markdown on Mac]]></title>
      <url>https://blackie1019.github.io/2013/08/31/Mou-Introduction-Write-Markdown-on-Mac/</url>
      <content type="html"><![CDATA[<p>在Mac 環境寫Markdown的好物</p>
<a id="more"></a>
<p><img src="mou_logo.png" alt="Logo"></p>
<p><a href="http://github.com/blackie1019/Mou-MarkdownCSS-Dotblog" target="_blank" rel="external">Mou-MarkdownCSS-Dotblog</a>下載</p>
<h1 id="Mou介紹"><a href="#Mou介紹" class="headerlink" title="Mou介紹"></a>Mou介紹</h1><p>-這套Markdown editor 在<a href="http://markdown.tw/" target="_blank" rel="external">Markdown.tw</a>就有推薦下載，這套軟體的開發者是對岸的高手-羅晨，對他有興趣可以看<a href="http://www.inside.com.tw/2013/07/19/mou-creator-chen-luo-interview" target="_blank" rel="external">inside這篇專訪</a></p>
<p>下載後打開app就會先看他的使用介紹，左邊寫右邊preview</p>
<p><img src="1.png" alt="1"></p>
<p>他也提供了將寫好的文檔轉換成HTML格式或PDF輸出的功能，而且他HTML的CSS本身就支援Responsive Design，算是很貼心(可惜dotblog好像沒有支援的樣板，只能自己寫custom css，真希望能提供RWD樣板選擇一下)</p>
<p><img src="8.png" alt="8"></p>
<p>因為作者是華人所以他也做了中文常常會呈現的橫板的樣式(選單上選View-&gt;Vertical Writing)的功能，可以呈現下面的結果</p>
<p><img src="9.png" alt="9"></p>
<p>這邊介紹一下如何更改呈現的樣式,並且將Markdownpad的樣式拿過來Mou用，在上面選單選擇Mou-&gt;preferences-&gt;CSS，這邊可更換呈現風格(預設四種)，而當你按下edit時就會到你樣式的目錄，這邊可以發現其實也是四份CSS而已</p>
<p><img src="3.png" alt="3"></p>
<p><img src="5.png" alt="5"></p>
<p>有看過C大文章的人就知道windows也有一款Markdown的編輯器叫做Markdownpad，這邊可以把Markdownpad輸出的CSS放到Mou，來讓兩邊編輯器呈現較一致的畫面，使用上我們就把從Markdownpad輸出的CSS作修改後放到剛剛的樣式目錄就可以了(Markdownpad的CSS在開頭有載點)</p>
<p><img src="6.png" alt="6"></p>
<h1 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h1><p>Mou真的蠻好用的而且用免費根本佛心～！</p>
<p>會分享這篇文章是因為前陣子為看到dotblog上有篇C大所寫的<a href="http://www.dotblogs.com.tw/clark/archive/2013/08/25/115495.aspx" target="_blank" rel="external">[Other] 使用Markdown格式編寫點部落文章</a> 讓我發現原來Windows 也有相同的軟體了，而且也是可以把產生出來文件轉成網頁在dotblog上面呈現，這對於我來說實在很吸引人，後來才想到我應該可以把兩邊的CSS整合成成兩個版本互相使用，也可以讓Mou的套版順利呈現到dotblog.</p>
<p>先前我在Markdownpad上面使用或是將產生的HTML作檢視都會遇到一個問題就是對於code這個tag的support有些問題(斷字跟換行好像呈現上有些錯誤)<br>所以我最後的解法就是先透過quote的方式下面在接上code區塊的寫法，但結果很醜..而Mou就沒有這樣的問題，兩者的比較如下圖(上面是Mou，下面是Markdownpad的CSS，兩篇是不同文章)</p>
<p><img src="7.png" alt="比較圖"></p>
<p>因為上述的原因現在我的blog也是將Mou的CSS套在我的dotblog上面，加上個人覺得Mou的CSS比較偏向github的風格所以作了更換，如果想把MarkdownPad的CSS給Mou呈現或是想把Mou上面的Github2(2底色白色,1是灰色)這個樣式用在dotblog上的話可以直接從這邊<a href="http://github.com/blackie1019/Mou-MarkdownCSS-Dotblog" target="_blank" rel="external">Mou-MarkdownCSS-Dotblog</a>下載</p>
<h1 id="Github1-vs-Markdownpad"><a href="#Github1-vs-Markdownpad" class="headerlink" title="Github1 vs Markdownpad"></a>Github1 vs Markdownpad</h1><p>這邊提供Markdownpad的css放到Mou的Github1(Mou預設)一些比較截圖(每組圖上面都是Mou下面都是Markdownpad)</p>
<h2 id="比較一"><a href="#比較一" class="headerlink" title="比較一"></a>比較一</h2><p><img src="MouGithub_1.png" alt="Mou-1"></p>
<p><img src="MakeDownPad_1.png" alt="Markdownpad-1"></p>
<h2 id="比較二"><a href="#比較二" class="headerlink" title="比較二"></a>比較二</h2><p><img src="MouGithub_2.png" alt="Mou-1"></p>
<p><img src="MakeDownPad_2.png" alt="Markdownpad-1"></p>
<h2 id="比較三"><a href="#比較三" class="headerlink" title="比較三"></a>比較三</h2><p><img src="MouGithub_3.png" alt="Mou-1"></p>
<p><img src="MakeDownPad_3.png" alt="Markdownpad-1"></p>
<h2 id="比較四"><a href="#比較四" class="headerlink" title="比較四"></a>比較四</h2><p><img src="MouGithub_4.png" alt="Mou-1"></p>
<p><img src="MakeDownPad_4.png" alt="Markdownpad-1"></p>
<p>工欲善其事，必先利其器，讓我們一起學好Markdown吧～！</p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Make first letter of a string upper case in C#]]></title>
      <url>https://blackie1019.github.io/2013/08/30/make-first-letter-of-a-string-upper-case/</url>
      <content type="html"><![CDATA[<p>寫程式時我們常常遇到要將英文文字轉換成大寫與小寫的需求，此時我們通常會使用.ToUpper()或.ToLower()的方式做大寫與小寫的轉換</p>
<a id="more"></a>
<p>但我們也會常常收到只需要將第一個字轉成大寫其他都小寫的需求，這時我們可以透過TextInfo這個類別的.ToTitleCase()來幫忙我們完成</p>
<p>使用前先稍微了解一下這個TextInfo類別的</p>
<h2 id="TextInfo-類別-NET-Framework後-2-0開始使用"><a href="#TextInfo-類別-NET-Framework後-2-0開始使用" class="headerlink" title="TextInfo 類別(.NET Framework後 2.0開始使用)"></a>TextInfo 類別(.NET Framework後 2.0開始使用)</h2><ul>
<li>定義文字屬性和行為，例如書寫系統特有的大小寫。</li>
<li>使用方式:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span> testStr = ABC;</div><div class="line"><span class="keyword">var</span> convertStr = Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(gameType.ToString().ToLower());</div></pre></td></tr></table></figure>
<p>這邊要稍微注意一下，這個方法只能將第一個字變大寫，如果像範例原本就是三個大寫的字卻希望只有開頭大寫的話就要先做一次.ToLower()將文字都轉換成小寫在透過.ToTitleCase()將第一個字轉換為大寫。</p>
<p>關於TextInfo類別的其他方法(Method):</p>
<p><img src="TextInfo.PNG" alt="Method"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://msdn.microsoft.com/zh-tw/library/System.Globalization.TextInfo(v=vs.110" target="_blank" rel="external">MSDN:TextInfo類別</a>.aspx)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> .NET </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript use strict(嚴格模式)-strict mode 介紹]]></title>
      <url>https://blackie1019.github.io/2013/08/30/javascript-strick-mode-introduction/</url>
      <content type="html"><![CDATA[<p>JavaScript 的核心是基於<a href="http://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="external">ECMAScript</a>標準，而該標準在最近一次更新(2009年)更新為第五版，其中加入strict mode(嚴格模式)這個功能，可以讓你的語法變得較嚴謹，相對於原本的語法較不容易出錯</p>
<a id="more"></a>
<p>使用上很簡單，只要加上即可，先呈現一個使用範例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;<span class="comment">//使用strict mode(嚴格模式)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> tryValue = <span class="number">123</span>;</div><div class="line">	<span class="keyword">return</span> tryValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// This causes a syntax error.</span></div><div class="line">testvar = <span class="number">123</span>;</div></pre></td></tr></table></figure>
<p>這邊如果你用瀏覽器看後會發現一個被拋出的錯誤</p>
<p><img src="1.png" alt="架構圖"></p>
<p>如此就可以很簡單的透過strict mode來限制一些比較鬆散的寫法跟可能發生問題的地方(但這樣好像失去了原本js最被人家稱讚的彈性)</p>
<hr>
<h2 id="優缺點與使用"><a href="#優缺點與使用" class="headerlink" title="優缺點與使用"></a>優缺點與使用</h2><p>那為什麼要有這個strict mode以及優缺點為何，簡單幫大家整理如下:</p>
<ul>
<li>優點:讓語法更簡單、可以撰寫出較嚴謹的js避免一些突發的意外，要知道在js抓問題不是普通的難，尤其那一段程式碼還不是你寫的時候，通常你抓到問題架構你也全部搞懂了</li>
<li>缺點:Browser支援程度需要先確認，也別期望只要加了<code>&quot;use strict&quot;;</code>就不用改程式，通常用很多plugin的專案你會改到哭(但我還是建議用strict mode)</li>
</ul>
<p>在使用上除了剛剛一開始的範例外你也可把<code>&quot;use strict&quot;;</code>這個用在function裡面，就不會變成全域都嚴格模式，範例如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryFunction</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">	"use strict"</span>;<span class="comment">//使用strict mode(嚴格模式)</span></div><div class="line">	tryValue = <span class="number">123</span>;</div><div class="line">	<span class="keyword">return</span> tryValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// This worked fine.</span></div><div class="line">testvar = <span class="number">123</span>;</div><div class="line"><span class="comment">// This causes a syntax error</span></div><div class="line">tryFunction();</div></pre></td></tr></table></figure>
<h2 id="瀏覽器支援程度"><a href="#瀏覽器支援程度" class="headerlink" title="瀏覽器支援程度"></a>瀏覽器支援程度</h2><ul>
<li>Chrome13之後都有支援(最新19)</li>
<li>IE10,11有支援(但上面有10有bug)</li>
<li>FF4有支援</li>
<li>Safari5.1之後有支援(最新6)</li>
</ul>
<p>詳細資料可以看下面的資訊<a href="http://kangax.github.io/es5-compat-table/" target="_blank" rel="external">ECMAScript 5 compatibility table(支援比較表)</a></p>
<p>如果你的瀏覽器沒有支援使用<code>&quot;use strict&quot;;</code>對你不會有任何影響，只是一個文字而已，所以幹嘛不用~~!哈XD</p>
<p>而且未來JavaScript計畫也會全面朝向strict mode做架構，目前只是鼓勵但以後可能就是全面普及了(此句為自己腦補…)</p>
<hr>
<h2 id="常見用法之限制"><a href="#常見用法之限制" class="headerlink" title="常見用法之限制"></a>常見用法之限制</h2><p>比較常見的一些限制可以參考<a href="http://msdn.microsoft.com/zh-tw/library/ie/br230269(v=vs.94" target="_blank" rel="external">微軟的中文文件</a>.aspx)(這幾年文件真的做很詳細還中文，糾甘心)</p>
<p>幾個重點整理節錄來至<a href="http://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/" target="_blank" rel="external">NCZOnline</a> 用原本範例換成中文讓大家瞭解一下</p>
<h3 id="消除-with-的用法"><a href="#消除-with-的用法" class="headerlink" title="消除 with 的用法"></a>消除 with 的用法</h3><p>不能使用<em>with</em>這個用法了，所以在使用<em>strict mode</em>時請先確認你沒有用下列的寫法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Causes a syntax error in strict mode</span></div><div class="line"><span class="keyword">with</span> (location) &#123;</div><div class="line">	alert(href);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="變數使用需要先宣告"><a href="#變數使用需要先宣告" class="headerlink" title="變數使用需要先宣告"></a>變數使用需要先宣告</h3><p>在使用<em>strict mode</em>下不能用下面這樣的變數使用(下面的範例正確使用需要先透過var 宣告someUndeclaredVar才可以用)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Throws an error in strict mode</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">	someUndeclaredVar = <span class="string">"foo"</span>;</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h3 id="使用this前的注意事項"><a href="#使用this前的注意事項" class="headerlink" title="使用this前的注意事項"></a>使用this前的注意事項</h3><p>另外一個重點就是你不能使用在還沒宣告的時候給一個物件相關的this-value(沒宣告的定義是當該物件是null 或undefined時)，如下錯誤的示範</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Throws an error in strict mode, "red" otherwise</span></div><div class="line">sayColor();</div><div class="line"></div><div class="line"><span class="comment">// Throws an error in strict mode, "red" otherwise</span></div><div class="line">sayColor.call(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>基於<a href="#變數使用需要先宣告">變數使用需要先宣告</a>的原則不能直接使用上方的this的寫法因為你沒先宣告this的物件為何</p>
<p>下面這段也是一樣有錯誤，如果要透過constructor來產生的話要透過new的方式來告訴它this為何物件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Error in strict mode</span></div><div class="line"><span class="keyword">var</span> me = Person(<span class="string">"Nicholas"</span>);</div></pre></td></tr></table></figure>
<h3 id="物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱"><a href="#物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱" class="headerlink" title="物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱"></a>物件內不能重複定義相同名稱的屬性或是在變數宣告時定義重複的名稱</h3><p>這通常是撰寫的時候誤打的，所以要注意下面兩個寫法在<em>strict mode</em>都是被禁止的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Error in strict mode - duplicate arguments</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">value1, value2, value1</span>) </span>&#123;</div><div class="line">	<span class="comment">//code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Error in strict mode - duplicate properties</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">	<span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">	<span class="attr">foo</span>: <span class="string">"baz"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>These are both syntax errors and so the error is thrown before the code is executed.</p>
<h3 id="還是可以使用eval-，但有點小改變"><a href="#還是可以使用eval-，但有點小改變" class="headerlink" title="還是可以使用eval()，但有點小改變"></a>還是可以使用eval()，但有點小改變</h3><p>最大的改變是在eval()內宣告的變數(variables)與函式(functions)並不會在scope中存在，如下範例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">eval</span>(<span class="string">"var x = 10;"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// Non-strict mode, alerts 10</span></div><div class="line">	<span class="comment">// Strict mode, throws an error because x is undeclared</span></div><div class="line">	alert(x);</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<p>上面的範例可以透過return value的方式把x傳回給scope呈現，<br>如下範例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"var x = 10, y = 20; x + y"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// Works in strict and non-strict mode (30)</span></div><div class="line">	alert(result);</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h3 id="對於不可改變的屬性無法在宣告後再對內容做彈性修改"><a href="#對於不可改變的屬性無法在宣告後再對內容做彈性修改" class="headerlink" title="對於不可改變的屬性無法在宣告後再對內容做彈性修改"></a>對於不可改變的屬性無法在宣告後再對內容做彈性修改</h3><p>如果屬性被設為read only 或 freezing，如果再去修改會拋出Error警示(在<em>non-strict mode</em>一樣實際的值不會改只是不會拋出Error警示)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">	<span class="attr">writable</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">value</span>: <span class="string">"Nicholas"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Fails silently in non-strict mode, throws error in strict mode</span></div><div class="line">person.name = <span class="string">"John"</span>;</div></pre></td></tr></table></figure>
<p>以上希望對大家有幫助，<em>如果有錯的地方也麻煩指導一下小弟</em>，<strong>一起進步</strong></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Basic JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flurry on Android]]></title>
      <url>https://blackie1019.github.io/2013/08/28/flurry-on-android/</url>
      <content type="html"><![CDATA[<p>關於Flurry在Android上面的設定</p>
<a id="more"></a>
<p>接續上一篇<a href="http://blackie1019.github.io/2013/08/26/flurry-on-ios/">Flurry on iOS</a>，這篇來講android上的設定</p>
<p>在android上的安裝大致上也是先一樣在Flurry官網上面新增一個application來追蹤的key並且下載下面兩個檔案</p>
<ul>
<li><a href="http://www.flurry.com/flurry-analytics.html" target="_blank" rel="external">Flurry</a></li>
<li><a href="https://github.com/jfpsf/flurry-phonegap-plugin" target="_blank" rel="external">Flurry plugin</a></li>
</ul>
<p>接下來按照下面步驟放入android專案中</p>
<h2 id="Flurry-Setup-on-Android"><a href="#Flurry-Setup-on-Android" class="headerlink" title="Flurry Setup on Android"></a>Flurry Setup on Android</h2><ol>
<li>將Flurry SDK中的<em>Flurry.jar</em>放到<em>libs</em>目錄當中(須注意是否有將它設為build path)</li>
<li>將FlurryPlugin中的<em>Flurry.java</em>放到<em>src</em> 目錄中(這邊依照使import時希望呈現的namespace建立目錄或是透過eclipse加入則自動建立對應的目錄)，再將然後再把<em>flurryPlugin.js</em>放入<em>www</em>下任意位置(這邊放在<em>www/js/android/flurryPlugin.js</em>)</li>
<li>Android專案中記得先確定對應的設定檔(<em>AndroidManifest.xml</em>)是否把INTERNET、ACCESS_COARSE_LOCATION等權限打開(新版phonegap專案預設都是全開)</li>
<li>同iOS的使用，你可以在你的html中加入下面這段語法來啟用你的flurry資料蒐集並建立一個event</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>src=<span class="string">"js/android/flurryPlugin.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="xml"><span class="comment">&lt;!--此段記得要放在cordova.js之後--&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>,onDeviceReady,<span class="literal">false</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">window</span>.plugins.flurry.startSession(<span class="string">"你的application key"</span>);<span class="comment">//這邊一定要先啟動Session</span></div><div class="line"><span class="built_in">window</span>.plugins.flurry.logEvent(<span class="string">"[plugin]index.html"</span>);<span class="comment">//記錄一項事件，事件名稱為[plugin]index.html</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>5.或是你也可以在android內的onStart()跟onStop()中設定key並啟動session蒐集Flurry要得資料，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package tw.gov.nsc.mobileApp.NSCApp_all;</div><div class="line">import android.os.Bundle;</div><div class="line">import org.apache.cordova.*;</div><div class="line">import com.flurry.android.FlurryAgent;  </div><div class="line">public class NSCApp_all extends DroidGap</div><div class="line">&#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState)</div><div class="line">    &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    // Set by &lt;content src=&quot;index.html&quot; / in config.xml</div><div class="line">    super.loadUrl(Config.getStartUrl());</div><div class="line">    //super.loadUrl(&quot;file:///android_asset/www/index.html&quot;)</div><div class="line">    &#125;</div><div class="line">    //這邊是Flurry的設定</div><div class="line">    @Override</div><div class="line">    protected void onStart()</div><div class="line">    &#123;</div><div class="line">    super.onStart();</div><div class="line">    //啟動Session</div><div class="line">    FlurryAgent.onStartSession(this, &quot;你的application key&quot;);</div><div class="line">    &#125;    </div><div class="line">    @Override</div><div class="line">    protected void onStop()</div><div class="line">    &#123;</div><div class="line">    super.onStop();</div><div class="line">    //結束Session</div><div class="line">    FlurryAgent.onEndSession(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最後會異動的項目與專案架構如下(紅框是放檔案處，籃框是編譯完的class)</p>
<p><img src="2.png" alt="架構圖"></p>
<p>這邊再補充一下Flurry能做到的事情，登入Flurry後到你該Application的頁面會先看到一個簡單的統計圖片與資料，包含了最近日期的Session數(通常可以視為app打開的次數)、平均使用時間、使用者(可以分辨新舊，這邊是用device區分)、error次數紀錄、使用者區域顯示(用地圖呈現很sweet)</p>
<p><img src="3.png" alt="網站1"></p>
<p><img src="4.png" alt="網站1"></p>
<p>如果覺得這樣的dashboard不夠滿足你也可以透過右邊的<em>create dashboard</em>來建立自己的呈現dashboard,此外右邊你也可以點開看各項細部內容</p>
<ul>
<li><p>Usage</p>
<p>  各項使用資訊，包含</p>
<ul>
<li>Active Users</li>
<li>Sessions</li>
<li>Session Length Benchmarks</li>
<li>Frequency of Use Benchmarks</li>
<li>Lifecycle</li>
<li>User Retention Benchmarks</li>
<li>Top Versions</li>
<li>Page Views</li>
</ul>
</li>
<li><p>Audience</p>
<p>  各項與使用者相關的資訊，包含</p>
<ul>
<li>Interests: My Apps</li>
<li>Interests: Category</li>
<li>Personas</li>
<li>Age</li>
<li>Gender</li>
<li>Geography</li>
<li>Language</li>
</ul>
</li>
<li><p>User Acquisition</p>
<p>  用戶在各平台的使用表現，主要讓你建立比較圖，方便在該APP或服務有多平台時，決策投入多少行銷資源比較划算或是找出該平台目前較差或較好的項目</p>
<p>  <img src="5.png" alt="網站1"></p>
<p>  <img src="6.png" alt="網站1"></p>
</li>
<li><p>Events</p>
<p>  提供各項事件相關資訊，最酷的事可以呈現事件與事件彼此互動的關係(先後啟動或是呼叫)</p>
<ul>
<li>User Paths</li>
<li>Funnels</li>
<li><p>Event Logs</p>
<p><img src="7.png" alt="網站1"></p>
<p><img src="8.png" alt="網站1"></p>
<p><img src="9.png" alt="網站1"></p>
<p><img src="10.png" alt="網站1"></p>
</li>
</ul>
</li>
<li><p>Errors</p>
<p>  提供各項Errors的相關資訊，幫你釐清發生時的人事時地物</p>
<p>  <img src="11.png" alt="網站1"></p>
</li>
<li><p>Technical</p>
<p>  提供各項載具的相關資訊，如平台、版本、型號等</p>
<p>  <img src="12.png" alt="網站1"></p>
</li>
</ul>
<p>至於如何將取得的資料做有效的分析，最近悠識有在開課(但最近的梯次都結束了)，詳情可以詢問一下他們?(但我沒有幫他們打廣告歐)</p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phonegap </tag>
            
            <tag> Cordova </tag>
            
            <tag> Android </tag>
            
            <tag> Flurry </tag>
            
            <tag> Customer Analysis </tag>
            
            <tag> Web Analysis </tag>
            
            <tag> Mobile Analysis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flurry on iOS]]></title>
      <url>https://blackie1019.github.io/2013/08/27/flurry-on-ios/</url>
      <content type="html"><![CDATA[<p>關於Flurry在iOS上面的設定</p>
<a id="more"></a>
<p><img src="1.PNG" alt="Flurry 五周年研究報告：App 正在吞噬這個世界，Web 必須順應其變"></p>
<p><a href="http://www.inside.com.tw/2013/04/08/flurry-five-year-report-it-s-an-app-world-the-just-web-lives-in-it" target="_blank" rel="external">完整文章來源</a></p>
<h2 id="App-的世界：App-正在吞噬這個世界"><a href="#App-的世界：App-正在吞噬這個世界" class="headerlink" title="App 的世界：App 正在吞噬這個世界"></a>App 的世界：App 正在吞噬這個世界</h2><blockquote>
<p>Web 的世界：Web 已死？</p>
</blockquote>
<p>開頭是一個很聳動的標題，但這的確是這幾年的趨勢，但不代表Web就要被淘汰，而是用其他延伸的開發架構轉化到不同使用方式，可以開發APP(web/hybrid app架構)或是做為server端語法(nodeJS),甚至可以做成embeded system(有興趣的可以參考<a href="http://www.mandice.com/" target="_blank" rel="external">Mandice</a>)。這年頭要明確地掌握手中資源才可以做到最有效的利用，所以不管在哪一個平台或方式都要盡量收集使用者資訊，透過分析使用者行為的方式來改善或是藉此看到商機。</p>
<p>而這邊指的Web我把它視為指前端開發，因工作上還是hybrid app架構為主，所以環境還是以Phonegap+JQM為主要，這邊就來直接帶大家一步步的透過第三方的plugin在Phonegap上也快樂的使用Flurry這套收集工具的威力。</p>
<p>先列出所有要下載的東西很簡單只有兩項</p>
<ul>
<li><a href="http://www.flurry.com/flurry-analytics.html" target="_blank" rel="external">Flurry</a></li>
<li><a href="https://github.com/jfpsf/flurry-phonegap-plugin" target="_blank" rel="external">Flurry plugin</a></li>
</ul>
<p>Flurry的註冊跟操作比較複雜，這邊以iOS一步步的教學如下</p>
<h2 id="Flurry-Setup-on-iOS"><a href="#Flurry-Setup-on-iOS" class="headerlink" title="Flurry Setup on iOS"></a>Flurry Setup on iOS</h2><ol>
<li>至<a href="http://www.flurry.com/flurry-analytics.html" target="_blank" rel="external">Flurry</a>註冊會員並登入會員</li>
<li>點到<em>Applications</em>後點選右方的<em>Add a New Application</em><br><img src="2.PNG" alt="新增Applicaion"></li>
<li>這邊選擇你要加入的開發類型是哪一種，這邊我們選擇左上方的iPhone<br><img src="3.PNG" alt="選擇Applicaion類型"></li>
<li>接下來設定你的Application名稱與類型，下方有一個Restrict Feature Set的選項，如果勾選的話你會獲取到較少的使用者資料，與一般收集版本的差異請看<a href="http://support.flurry.com/index.php?title=Analytics/Overview/RestrictedFeatureSet" target="_blank" rel="external">此處</a>。<br><img src="4.PNG" alt="設定Application名稱與類型"></li>
<li>這邊如果你建立成功的話會產一組key，這組key就是專門來讓你放在程式裡面識別要記錄成哪一個Application的識別值，之後我們會把他放到你APP當中。<img src="5.PNG" alt="取得key"></li>
<li>然後我們打開我們已經建立的iOS Phonegap專案(我這邊用的是2.5版本但目前到最新的2.9也是相容的)，將剛剛從官方SDK下載下來的<em>Flurry.h</em>跟<em>libFlurry.a</em>檔案放置你的專案內，位置在Classes下方<br><img src="7.PNG" alt="iOS2架構"></li>
<li>接者我們再把從plugin下載的iOS folder下的<em>FlurryPhoneGapPlugin.h</em>跟<em>FlurryPhoneGapPlugin.m</em>放到<br>Plugin下<img src="8.PNG" alt="iOS2架構"></li>
<li>然後再把 flurryPlugin.js放入<em>www</em>下任意位置(這邊放在<em>www/js/ios/flurryPlugin.js</em>)</li>
<li><p>最後會成這樣的配置，如圖<br><img src="6.PNG" alt="iOS架構"></p>
</li>
<li><p>接下來我們要在<em>config.xml</em>(舊版Phonegap是<em>Cordova.plist</em>)內新增一組key-value對應值<br><code>&lt;plugin name=&quot;flurryPlugin&quot;value=&quot;FlurryPhoneGapPlugin&quot; /&gt;</code></p>
</li>
</ol>
<p>如下圖<img src="9.PNG" alt="iOS2架構"></p>
<ol>
<li>最後我們只要再有要用到的html頁面加入剛剛的js位置並且使用下面的方式就可以使用了</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>src=<span class="string">"js/ios/flurryPlugin.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="xml"><span class="comment">&lt;!--此段記得要放在cordova.js之後--&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>,onDeviceReady,<span class="literal">false</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">window</span>.plugins.flurry.startSession(<span class="string">"你的application key"</span>);<span class="comment">//這邊一定要先啟動Session</span></div><div class="line"><span class="built_in">window</span>.plugins.flurry.logEvent(<span class="string">"[plugin]index.html"</span>);<span class="comment">//記錄一項事件，事件名稱為[plugin]index.html</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所有可以用function可以參考js裡面有實作的，如果有沒有的也可以自己實作再回饋到github歐(與你分享的快樂勝過獨自擁有~!)</p>
<p>Flurry比較麻煩的地方就是蒐集到的資料呈現在網站上大概要等6-12小時左右，所以一定不能即時回饋的。<br>在等待一陣子後返回剛剛的Flurry網站在Application的地方就可以看到妳剛剛的資料</p>
<p><img src="10.PNG" alt="iOS2架構"></p>
<p>在左邊選單選到<em>Events</em>就可以看到我們設定的事件</p>
<p><img src="11.PNG" alt="iOS2架構"></p>
<p>這邊如果點選每個事件右邊的user paths還能看到每個event之間的互動情形</p>
<p><img src="12.PNG" alt="iOS2架構"></p>
<p>Flurry真的很棒，他可以幫你產生的數據直接產生報告，你可以從中做仔細分析使用者的行為以及偵錯一些exception的發生情形與統計使用者與硬體的情況…等等，應用面真的很廣，這邊希望大家都能透過這個工作做一個賺錢的app~!</p>
<p>如果你是要開發<strong>iOS7 APP</strong>的人請注意，這邊一定要用<strong>最新的Flurry SDK</strong>不然會有一定機率當機</p>
]]></content>
      
        <categories>
            
            <category> Mobile </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Phonegap </tag>
            
            <tag> Cordova </tag>
            
            <tag> Flurry </tag>
            
            <tag> Customer Analysis </tag>
            
            <tag> Web Analysis </tag>
            
            <tag> Mobile Analysis </tag>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL convert int to datetime overflow issue]]></title>
      <url>https://blackie1019.github.io/2013/08/26/SQL-convert-int-to-datetime-has-overflow-issue/</url>
      <content type="html"><![CDATA[<p>SQL convert int to datetime(轉換 expression 到資料類型 datetime 時發生算術溢位錯誤)</p>
<a id="more"></a>
<p>今天在幫客戶新增一個功能的時候看到前人把生日分為三個欄位(民國年,月與日)，應該是歷史包袱或效果考量吧..</p>
<p><img src="2013826191632853.png" alt="img_1"></p>
<p>直覺上看到這個，直覺上就把它用數學解成(1911+year)<em>10000+month</em>100+day ,以74 10 19來說就會變成 19851019這樣的數字</p>
<p>再來再透過</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert(datetime,‘文字時間’)</div></pre></td></tr></table></figure>
<p>可以把文字轉換成時間格式，所以我們取得的數字轉成文字就可以</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CONVERT(VARCHAR(8),((birthyear+1911)*10000+birthmonth*100+birthday))</div></pre></td></tr></table></figure>
<p>完整的語法與結果如下</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> gicuitem <span class="keyword">as</span> <span class="keyword">id</span>,<span class="keyword">convert</span>(datetime,<span class="keyword">CONVERT</span>(<span class="built_in">VARCHAR</span>(<span class="number">8</span>),((birthyear+<span class="number">1911</span>)*<span class="number">10000</span>+birthmonth*<span class="number">100</span>+birthday))) <span class="keyword">as</span><span class="string">'西元年月日'</span>  <span class="keyword">from</span> testTable</div></pre></td></tr></table></figure>
<p><img src="2013826192452728.png" alt="img_2"></p>
<p><strong>注意歐！日期時間比對在非閏年的2/29 比對會發生問題(如果1973/2/29 就會發生下面的問題）</strong></p>
<p><img src="20138261934271.png" alt="img_3"></p>
]]></content>
      
        <categories>
            
            <category> Database </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MSSQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 Localstorage and Sessionstorage]]></title>
      <url>https://blackie1019.github.io/2013/07/17/html5-localstorage-and-sessionstorage/</url>
      <content type="html"><![CDATA[<p>HTML5新增了一些client資料儲存的功能，localStorage與sessionStorage，這邊將講解一下如何使用正確的使用他們。</p>
<a id="more"></a>
<p>在談如何使用前，先參考前輩們整理出來為什麼不要用既有的cookie來作儲存解決的原因</p>
<h2 id="Cookie-缺點"><a href="#Cookie-缺點" class="headerlink" title="Cookie 缺點"></a>Cookie 缺點</h2><ul>
<li>Cookie在每個HTTP request送出時都會被送到Server端，不管你沒有要用到Cookie中的資訊，在某種程度上會拖慢執行的效能與浪費不必要的網路頻寬</li>
<li>Cookie送出的資料本身並沒有加密，因此除非我們用SSL一類的技術做加密，否則Cookie中不宜放任何重要的資訊</li>
<li>Cookies最大才4KB，不可能存太多資料</li>
</ul>
<p><a href="http://www.dotblogs.com.tw/jimmyyu/archive/2011/03/27/html5-client-storage.aspx" target="_blank" rel="external">參考</a></p>
<h2 id="HTML5’s-new-feature"><a href="#HTML5’s-new-feature" class="headerlink" title="HTML5’s new feature"></a>HTML5’s new feature</h2><p>知道cookie的缺點後，那我們才看看有哪些html5提出的新解決方法</p>
<p>主要可以分為以下三項</p>
<ul>
<li><p>localStorage</p>
<p>  支援度最廣，使用上最簡單，速度快，跨平台，生命週期較長，原則上要等到透過Javascript將內容清掉或者使用者清空Cache時才會消失</p>
</li>
<li><p>sessionStorage</p>
<p>  同localStorage的特性，差別在於生命週期較短在Browser/Tab關閉時就會清空</p>
</li>
<li><p>IndexedDB/Web SQL Database</p>
<p>  Web SQL Database支援用SQL存取，操作很像資料庫，是基於SQLite修改的，但目前是被W3C捨棄，不算是一個標準，IE和Firefox都不支援，操作速度也頗慢</p>
</li>
</ul>
<p><em>IndexedDB</em> 是W3C用來取代Web SQL Database的新規範，但目前仍在制定階段<br>使用上可以參考<a href="http://msdn.microsoft.com/zh-cn/library/ie/hh779017(v=vs.85" target="_blank" rel="external">這篇</a>.aspx)</p>
<p>詳細支援程度可參考<a href="http://www.html5rocks.com/it/features/storage" target="_blank" rel="external">http://www.html5rocks.com/it/features/storage</a></p>
<h2 id="Practice-with-localStorage-and-sessionStorage"><a href="#Practice-with-localStorage-and-sessionStorage" class="headerlink" title="Practice with localStorage and sessionStorage"></a>Practice with localStorage and sessionStorage</h2><p>今天我們先介紹前兩個最長被使用的localStorage與sessionStorage使用上與實務上結合json的擴充用法</p>
<p>首先我們先看一下支援度，<a href="http://www.quirksmode.org/dom/html5.html" target="_blank" rel="external">參考</a></p>
<p><img src="20137711575447.png" alt="support"></p>
<p>從上面我可以知道幾乎目前主流的瀏覽器都支援了Web Storage(localStorage and sessionStorage)，<a href="http://thenextweb.com/apps/2013/01/01/ie10-below-1-market-share-firefox-back-under-20-chrome-recovers-from-three-months-of-losses/" target="_blank" rel="external">市佔參考</a>。</p>
<p>而使用上可以分為get,set,remove三種，分別如下</p>
 <iframe id="cp_embed_qhaIl" src="//codepen.io/blackie1019|anonymous|anon/embed/qhaIl?height=300&theme-id=7928&slug-hash=qhaIl&default-tab=result" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
<p>上面我可以在輸入框輸入值後透過 get 來 alert 值，而當我們 remove 之後再用 get 則會出現 <strong>null</strong> ，是不是很簡單使用</p>
<p>seesionStorage 也是如此歐，只是把window.localStorage.getItem換成(set,remove以此類推）</p>
<pre><code>windows.sessionStorage.getItem
</code></pre> <iframe id="cp_embed_LykfE" src="//codepen.io/blackie1019|anonymous|anon/embed/LykfE?height=300&theme-id=7928&slug-hash=LykfE&default-tab=result" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>
<p>因為是 <em>key-value</em> 的架構，所以在實務上我習慣將儲存進去的item設為是一個 <strong>json</strong> 的格式，如此一來之後要取用就很方便摟（而且可以一次拿多個值勒）<br>這邊要稍微注意在 <em>get</em> 跟 <em>set</em> 的時候要做一下資料處理<br>存進去前的值要做</p>
<pre><code>JSON.stringify()
</code></pre><p>取出去後的值要做</p>
<pre><code>JSON.parse()
</code></pre><p>使用上的參考範例如下</p>
 <iframe id="cp_embed_ECrAk" src="//codepen.io/blackie1019|anonymous|anon/embed/ECrAk?height=300&theme-id=7928&slug-hash=ECrAk&default-tab=result" scrolling="no" frameborder="no" height="300" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
      
        <categories>
            
            <category> HTML5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web Storage </tag>
            
            <tag> localStorage </tag>
            
            <tag> sessionStorage </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
